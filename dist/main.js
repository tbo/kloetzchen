(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var KEYCODE_SPACE = 32;
var KEYCODE_LEFT = 37;
var KEYCODE_RIGHT = 39;
var KEYCODE_DOWN = 40;
var KEYCODE_S = 83;
var KEYCODE_W = 87;
var KEYCODE_UP = 38;
var KEYCODE_A = 65;
var KEYCODE_D = 68;
var KEYCODE_E = 69;
var KEYCODE_Q = 81;
var left = false;
var right = false;
var rotateLeft = false;
var rotateRight = false;
var up = false;
var down = false;
var forward = false;
var backward = false;
var mouse = {
  down: false,
  up: false,
  moving: false,
  x: null,
  y: null
};
var yawLeft = false;
var yawRight = false;
var pitchUp = false;
var pitchDown = false;
function onKey(v) {
  return function(event) {
    switch (event.keyCode) {
      case KEYCODE_LEFT:
        yawLeft = v;
        break;
      case KEYCODE_A:
        left = v;
        break;
      case KEYCODE_RIGHT:
        yawRight = v;
        break;
      case KEYCODE_D:
        right = v;
        break;
      case KEYCODE_E:
        rotateRight = v;
        break;
      case KEYCODE_Q:
        rotateLeft = v;
        break;
      case KEYCODE_SPACE:
        up = v;
        break;
      case KEYCODE_UP:
        pitchUp = v;
        break;
      case KEYCODE_W:
        forward = v;
        break;
      case KEYCODE_DOWN:
        pitchDown = v;
        break;
      case KEYCODE_S:
        backward = v;
        break;
    }
  };
}
function translateMovement(gameState) {
  gameState.player.movement.up = up;
  if (gameState.camera.yaw >= -45 && gameState.camera.yaw < 45) {
    gameState.player.movement.forward = forward;
    gameState.player.movement.backward = backward;
    gameState.player.movement.left = left;
    gameState.player.movement.right = right;
  } else if (gameState.camera.yaw >= 45 && gameState.camera.yaw < 135) {
    gameState.player.movement.forward = right;
    gameState.player.movement.backward = left;
    gameState.player.movement.left = forward;
    gameState.player.movement.right = backward;
  } else if (gameState.camera.yaw <= -45 && gameState.camera.yaw > -135) {
    gameState.player.movement.forward = left;
    gameState.player.movement.backward = right;
    gameState.player.movement.left = backward;
    gameState.player.movement.right = forward;
  } else {
    gameState.player.movement.forward = backward;
    gameState.player.movement.backward = forward;
    gameState.player.movement.left = right;
    gameState.player.movement.right = left;
  }
}
function onMouseDown(e) {
  mouse.down = true;
  mouse.up = false;
  mouse.moving = true;
  mouse.x = e.clientX;
  mouse.y = e.clientY;
}
function onMouseMove(e) {
  mouse.moving = true;
  mouse.x = e.clientX;
  mouse.y = e.clientY;
}
function onMouseUp() {
  mouse.down = false;
  mouse.up = true;
  mouse.moving = false;
  mouse.x = null;
  mouse.y = null;
}
function updateValue(value, update, lowerBound, upperBound) {
  var newValue = value + update;
  if (newValue > upperBound) {
    if (Math.abs(lowerBound) === Math.abs(upperBound)) {
      newValue = lowerBound;
    } else {
      newValue = upperBound;
    }
  }
  if (newValue < lowerBound) {
    if (Math.abs(lowerBound) === Math.abs(upperBound)) {
      newValue = upperBound;
    } else {
      newValue = lowerBound;
    }
  }
  return newValue;
}
document.addEventListener('keydown', onKey(true), false);
document.addEventListener('keyup', onKey(false), false);
window.addEventListener('mousemove', onMouseMove, false);
window.addEventListener('mousedown', onMouseDown, false);
window.addEventListener('mouseup', onMouseUp, false);
module.exports = function(gameState) {
  gameState.player.movement.up = up;
  gameState.player.movement.forward = forward;
  gameState.player.movement.backward = backward;
  gameState.player.movement.left = left;
  gameState.player.movement.right = right;
  gameState.player.movement.rotateRight = rotateRight;
  gameState.player.movement.rotateLeft = rotateLeft;
  if (gameState.controls.mouse.up) {
    mouse.up = false;
  }
  if (gameState.controls.mouse.down) {
    mouse.down = false;
  }
  gameState.controls.mouse.up = mouse.up;
  gameState.controls.mouse.down = mouse.down;
  gameState.controls.mouse.moving = mouse.moving;
  gameState.controls.mouse.x = mouse.x;
  gameState.controls.mouse.y = mouse.y;
  gameState.camera.yawLeft = yawLeft;
  gameState.camera.yawRight = yawRight;
  var yawUpdate = 1;
  if (gameState.camera.yaw === undefined) {
    gameState.camera.yaw = 0;
  }
  if (gameState.camera.yawLeft) {
    gameState.camera.yaw = updateValue(gameState.camera.yaw, -yawUpdate, -180, 180);
  }
  if (gameState.camera.yawRight) {
    gameState.camera.yaw = updateValue(gameState.camera.yaw, yawUpdate, -180, 180);
  }
  translateMovement(gameState);
  gameState.camera.pitchUp = pitchUp;
  gameState.camera.pitchDown = pitchDown;
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/controls.js
},{}],2:[function(require,module,exports){
"use strict";
var CUBE_HEIGHT = 1;
var CUBE_WIDTH = 2.0;
var CUBE_LENGTH = 3.0;
function createCuboid(row, position) {
  var x,
      y,
      z,
      zRotation = 0.0;
  if (row % 2 === 0) {
    x = position * CUBE_WIDTH;
    y = 0.0;
  } else {
    zRotation = Math.PI / 2;
    x = (CUBE_LENGTH / 2) + (CUBE_WIDTH / 4.0);
    y = (position - 1) * CUBE_WIDTH;
  }
  z = (row * CUBE_HEIGHT) + (CUBE_HEIGHT / 2.0);
  return {
    x: x,
    y: y,
    z: z,
    zRotation: zRotation
  };
}
module.exports = createCuboid;


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/createCuboid.js
},{}],3:[function(require,module,exports){
"use strict";
function getObjectPrototype() {
  return {
    mesh: null,
    body: null,
    movement: {}
  };
}
var gameState = {
  controls: {mouse: {}},
  objects: [],
  bootstrapping: [],
  tombstoned: [],
  player: {
    movement: {},
    body: {},
    mesh: {position: {
        x: 0,
        y: 0,
        z: 0
      }}
  },
  camera: {},
  add: function(type, x, y, z) {
    var newObject = getObjectPrototype();
    newObject.type = type;
    newObject.initialPosition = {
      x: x,
      y: y,
      z: z
    };
    return this.bootstrapping.push(newObject) - 1;
  },
  addCuboid: function(position) {
    var newObject = getObjectPrototype();
    newObject.type = 'cube';
    newObject.initialPosition = position;
    return this.bootstrapping.push(newObject) - 1;
  },
  remove: function(index) {
    return this.tombstoned.push(this.objects.splice(index, 1).pop()) - 1;
  },
  assumeControl: function(index) {
    this.player = this.objects[index];
  },
  pipe: function(transformer) {
    transformer(this);
    return this;
  }
};
gameState.camera = {};
module.exports = gameState;


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/gameState.js
},{}],4:[function(require,module,exports){
"use strict";
var createCuboid = require('./createCuboid');
function initialise(gameState) {
  for (var row = 0; row < 15; ++row) {
    gameState.addCuboid(createCuboid(row, 0));
    gameState.addCuboid(createCuboid(row, 1));
    gameState.addCuboid(createCuboid(row, 2));
  }
}
module.exports = initialise;


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/initialise.js
},{"./createCuboid":2}],5:[function(require,module,exports){
"use strict";
var THREE = require('./three.min.js');
function createHemisphereLight() {
  var hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);
  hemiLight.color.setHSL(0.6, 1, 0.6);
  hemiLight.groundColor.setHSL(0.095, 1, 0.75);
  hemiLight.position.set(0, 0, 500);
  return hemiLight;
}
function createDirectionalLight() {
  var dirLight = new THREE.DirectionalLight(0xffffff, 1);
  dirLight.color.setHSL(0.1, 1, 0.95);
  dirLight.position.set(0, -10, 10);
  dirLight.position.multiplyScalar(50);
  dirLight.castShadow = true;
  dirLight.shadowMapWidth = 2048;
  dirLight.shadowMapHeight = 2048;
  var d = 50;
  dirLight.shadowCameraLeft = -d;
  dirLight.shadowCameraRight = d;
  dirLight.shadowCameraTop = d;
  dirLight.shadowCameraBottom = -d;
  dirLight.shadowCameraFar = 3500;
  dirLight.shadowBias = -0.0001;
  dirLight.shadowDarkness = 0.35;
  return dirLight;
}
module.exports = {
  directional: createDirectionalLight(),
  hemisphere: createHemisphereLight()
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/lights.js
},{"./three.min.js":10}],6:[function(require,module,exports){
"use strict";
'use strict';
var renderer = require('./renderer');
var controls = require('./controls');
var timing = require('./timing');
var physics = require('./physics');
var gameState = require('./gameState');
var stateManager = require('./stateManager');
var initialise = require('./initialise');
var stats = require('stats-js')();
stats.domElement.style.position = 'absolute';
stats.domElement.style.left = '0px';
stats.domElement.style.top = '0px';
function echo(gameState) {
  if (gameState.controls.mouse.up) {
    console.log(gameState.controls.mouse);
  }
}
function gameLoop() {
  stats.begin();
  gameState.pipe(timing).pipe(controls).pipe(physics).pipe(renderer.render).pipe(stateManager);
  stats.end();
  requestAnimationFrame(gameLoop);
}
window.onload = function() {
  renderer.initialize();
  document.body.appendChild(stats.domElement);
  window.gameState = gameState;
  initialise(gameState);
  gameLoop();
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/main.js
},{"./controls":1,"./gameState":3,"./initialise":4,"./physics":7,"./renderer":8,"./stateManager":9,"./timing":11,"stats-js":13}],7:[function(require,module,exports){
"use strict";
var CANNON = require('cannon');
var baseImpulse = 0.1;
var ITERATIONS_BETWEEN_SLEEP_CHECK = 20;
var SLEEP_VELOCITY = 0.5;
var currentIteration = 0;
var world = new CANNON.World();
world.gravity.set(0, 0, -5);
world.broadphase = new CANNON.NaiveBroadphase();
world.solver.iterations = 10;
world.defaultContactMaterial.contactEquationStiffness = 1e8;
world.defaultContactMaterial.contactEquationRegularizationTime = 10;
var groundShape = new CANNON.Plane();
var groundMaterial = new CANNON.Material('groundMaterial');
var groundBody = new CANNON.Body({
  mass: 0,
  material: groundMaterial
});
var slipperyMaterial = new CANNON.Material('slipperyMaterial');
var groundGroundContactMaterial = new CANNON.ContactMaterial(groundMaterial, groundMaterial, {
  friction: 1,
  restitution: 0.3,
  contactEquationStiffness: 1e8,
  contactEquationRegularizationTime: 3,
  frictionEquationStiffness: 1e8,
  frictionEquationRegularizationTime: 3
});
world.addContactMaterial(groundGroundContactMaterial);
var slipperyGroundContactMaterial = new CANNON.ContactMaterial(groundMaterial, slipperyMaterial, {
  friction: 0.3,
  restitution: 0.3,
  contactEquationStiffness: 1e8,
  contactEquationRegularizationTime: 3
});
world.addContactMaterial(slipperyGroundContactMaterial);
var slipperySlipperyContactMaterial = new CANNON.ContactMaterial(slipperyMaterial, slipperyMaterial, {
  friction: 0.01,
  restitution: 0.01,
  contactEquationStiffness: 1e8,
  contactEquationRegularizationTime: 0.3
});
world.addContactMaterial(slipperySlipperyContactMaterial);
groundBody.addShape(groundShape);
world.add(groundBody);
var box = new CANNON.Box(new CANNON.Vec3(1.0, 3.0, 0.5));
function createCube(x, y, z, zRotation) {
  var cube = new CANNON.Body({
    mass: 0.05,
    position: new CANNON.Vec3(x, y, z),
    material: slipperyMaterial
  });
  cube.quaternion.setFromAxisAngle(new CANNON.Vec3(0, 0, 1), zRotation);
  cube.collisionResponse = true;
  cube.allowSleep = true;
  cube.angularDamping = 0;
  cube.linearDamping = 0;
  cube.addShape(box);
  return cube;
}
function bootstrappingObjects(bootstrapping) {
  var bootstrapLength = bootstrapping.length;
  if (bootstrapLength) {
    var body = null,
        obj = null;
    for (var i = 0; i < bootstrapLength; i++) {
      obj = bootstrapping[i];
      switch (obj.type) {
        case 'cube':
          body = createCube(obj.initialPosition.x, obj.initialPosition.y, obj.initialPosition.z, obj.initialPosition.zRotation);
          break;
        default:
          console.warn('Type:', obj.type, 'unknown');
          continue;
      }
      world.add(body);
      obj.body = body;
    }
  }
}
function removeObjects(tombstoned) {
  var tombstonedLength = tombstoned.length;
  if (tombstonedLength) {
    for (var i = 0; i < tombstonedLength; i++) {
      world.remove(tombstoned[i].body);
    }
  }
}
function movePlayer(player, delta) {
  var velocity = player.body.velocity,
      movement = player.movement,
      relativeImpulse = baseImpulse * delta;
  if (movement.forward) {
    velocity.y = relativeImpulse;
  }
  if (movement.backward) {
    velocity.y = -relativeImpulse;
  }
  if (movement.up) {
    velocity.z = relativeImpulse;
    player.body.angularVelocity.set(0, 0, 0);
  }
  if (movement.right) {
    velocity.x = relativeImpulse;
  }
  if (movement.left) {
    velocity.x = -relativeImpulse;
  }
  if (movement.rotateRight) {
    player.body.quaternion.z -= 0.001 * delta;
  }
  if (movement.rotateLeft) {
    player.body.quaternion.z += 0.001 * delta;
  }
}
function stopWobblingObjects(objects) {
  for (var i = objects.length - 1; i >= 0; --i) {
    var body = objects[i].body;
    if (Math.abs(body.velocity.x) < SLEEP_VELOCITY && Math.abs(body.velocity.y) < SLEEP_VELOCITY && Math.abs(body.velocity.z) < SLEEP_VELOCITY) {
      body.sleep();
    }
  }
}
function checkStopWobblingObjects(objects) {
  currentIteration = (currentIteration + 1) % ITERATIONS_BETWEEN_SLEEP_CHECK;
  if (!currentIteration) {
    stopWobblingObjects(objects);
  }
}
module.exports = function(gameState) {
  bootstrappingObjects(gameState.bootstrapping);
  checkStopWobblingObjects(gameState.objects);
  if (gameState.player.body.wakeUp) {
    gameState.player.body.wakeUp();
  }
  movePlayer(gameState.player, gameState.timing.delta);
  world.step(1.0 / 60.0, gameState.timing.delta / 1000);
  removeObjects(gameState.tombstoned);
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/physics.js
},{"cannon":12}],8:[function(require,module,exports){
"use strict";
'use strict';
var THREE = require('./three.min.js');
var lights = require('./lights');
var scene = new THREE.Scene();
var raycaster = new THREE.Raycaster();
function addLights() {
  for (var index in lights) {
    scene.add(lights[index]);
  }
}
function getRandomColor() {
  return '#' + Math.floor(Math.random() * 16777215).toString(16);
}
function createCube() {
  var geometry = new THREE.BoxGeometry(2, 6, 1);
  var material = new THREE.MeshLambertMaterial({color: getRandomColor()});
  var mesh = new THREE.Mesh(geometry, material);
  mesh.castShadow = true;
  mesh.receiveShadow = true;
  return mesh;
}
addLights();
var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
var renderer = new THREE.WebGLRenderer({antialias: true});
renderer.setSize(window.innerWidth, window.innerHeight);
var groundGeo = new THREE.PlaneGeometry(10000, 10000);
var groundMat = new THREE.MeshPhongMaterial({
  ambient: 0xffffff,
  color: 0xffffff,
  specular: 0x050505
});
groundMat.color.setHSL(0.095, 1, 0.75);
var ground = new THREE.Mesh(groundGeo, groundMat);
scene.add(ground);
ground.receiveShadow = true;
camera.position.z = 6;
camera.position.y = -30;
renderer.gammaInput = true;
renderer.gammaOutput = true;
renderer.shadowMapEnabled = true;
renderer.shadowMapCullFace = THREE.CullFaceBack;
function bootstrappingObjects(bootstrapping) {
  var bootstrapLength = bootstrapping.length;
  if (bootstrapLength) {
    var mesh = null,
        obj = null;
    for (var i = 0; i < bootstrapLength; i++) {
      obj = bootstrapping[i];
      switch (obj.type) {
        case 'cube':
          mesh = createCube();
          break;
        default:
          console.warn('Type:', obj.type, 'unknown');
          continue;
      }
      scene.add(mesh);
      obj.mesh = mesh;
    }
  }
}
function removeObjects(tombstoned) {
  var tombstonedLength = tombstoned.length;
  if (tombstonedLength) {
    for (var i = 0; i < tombstonedLength; i++) {
      scene.remove(tombstoned[i].mesh);
    }
  }
}
function updatePositions(objects) {
  var objectsLength = objects.length;
  for (var i = 0; i < objectsLength; i++) {
    objects[i].mesh.position.x = objects[i].body.position.x;
    objects[i].mesh.position.y = objects[i].body.position.y;
    objects[i].mesh.position.z = objects[i].body.position.z;
    objects[i].mesh.quaternion.x = objects[i].body.quaternion.x;
    objects[i].mesh.quaternion.y = objects[i].body.quaternion.y;
    objects[i].mesh.quaternion.z = objects[i].body.quaternion.z;
    objects[i].mesh.quaternion.w = objects[i].body.quaternion.w;
  }
}
function getRayCasterFromScreenCoord(screenX, screenY, camera) {
  var mouse3D = new THREE.Vector3();
  mouse3D.x = (screenX / window.innerWidth) * 2 - 1;
  mouse3D.y = -(screenY / window.innerHeight) * 2 + 1;
  mouse3D.z = 0.5;
  raycaster.setFromCamera(mouse3D, camera);
}
function findNearestIntersectingObject(clientX, clientY, camera, objects) {
  getRayCasterFromScreenCoord(clientX, clientY, camera);
  var hits = raycaster.intersectObjects(objects);
  if (hits.length > 0) {
    return hits[0];
  }
  return hits;
}
function mouseInteraction(gameState) {
  var mouse = gameState.controls.mouse;
  var objects = gameState.objects;
  if (mouse.down) {
    var hit = findNearestIntersectingObject(mouse.x, mouse.y, camera, objects.map(function(o) {
      return o.mesh;
    }));
    objects.some(function(o, index) {
      if (o.mesh === hit.object) {
        gameState.assumeControl(index);
        return true;
      }
      return false;
    });
  }
}
function updateValue(value, update, lowerBound, upperBound) {
  var newValue = value + update;
  if (newValue > upperBound) {
    if (Math.abs(lowerBound) === Math.abs(upperBound)) {
      newValue = lowerBound;
    } else {
      newValue = upperBound;
    }
  }
  if (newValue < lowerBound) {
    if (Math.abs(lowerBound) === Math.abs(upperBound)) {
      newValue = upperBound;
    } else {
      newValue = lowerBound;
    }
  }
  return newValue;
}
var pitchUpdate = 0.1;
var pitchLowerBound = 0.1;
var pitchDefault = 20;
var pitchUpperBound = 30;
var cameraRadius = 20;
function updateCameraPosition(gameState) {
  camera.up = new THREE.Vector3(0, 0, 1);
  camera.lookAt(new THREE.Vector3(0, 0, 0));
  if (gameState.camera.pitch === undefined) {
    gameState.camera.pitch = pitchDefault;
  }
  if (gameState.camera.pitchUp) {
    gameState.camera.pitch = updateValue(gameState.camera.pitch, pitchUpdate, pitchLowerBound, pitchUpperBound);
  }
  if (gameState.camera.pitchDown) {
    gameState.camera.pitch = updateValue(gameState.camera.pitch, -pitchUpdate, pitchLowerBound, pitchUpperBound);
  }
  camera.position.z = gameState.camera.pitch;
  camera.position.y = -Math.cos(gameState.camera.yaw / 180 * Math.PI) * cameraRadius;
  camera.position.x = Math.sin(gameState.camera.yaw / 180 * Math.PI) * cameraRadius;
}
function render(gameState) {
  bootstrappingObjects(gameState.bootstrapping);
  updatePositions(gameState.objects);
  mouseInteraction(gameState);
  updateCameraPosition(gameState);
  renderer.render(scene, camera);
  removeObjects(gameState.tombstoned);
}
function initialize() {
  document.body.appendChild(renderer.domElement);
}
module.exports = {
  initialize: initialize,
  render: render
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/renderer.js
},{"./lights":5,"./three.min.js":10}],9:[function(require,module,exports){
"use strict";
module.exports = function(gameState) {
  gameState.objects = gameState.objects.concat(gameState.bootstrapping);
  gameState.bootstrapping.length = 0;
  gameState.tombstoned.length = 0;
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/stateManager.js
},{}],10:[function(require,module,exports){
"use strict";
'use strict';
var THREE = {REVISION: "70"};
"object" === typeof module && (module.exports = THREE);
void 0 === Math.sign && (Math.sign = function(a) {
  return 0 > a ? -1 : 0 < a ? 1 : 0;
});
THREE.MOUSE = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};
THREE.CullFaceNone = 0;
THREE.CullFaceBack = 1;
THREE.CullFaceFront = 2;
THREE.CullFaceFrontBack = 3;
THREE.FrontFaceDirectionCW = 0;
THREE.FrontFaceDirectionCCW = 1;
THREE.BasicShadowMap = 0;
THREE.PCFShadowMap = 1;
THREE.PCFSoftShadowMap = 2;
THREE.FrontSide = 0;
THREE.BackSide = 1;
THREE.DoubleSide = 2;
THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;
THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;
THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.CustomBlending = 5;
THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;
THREE.MinEquation = 103;
THREE.MaxEquation = 104;
THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;
THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.AddOperation = 2;
THREE.UVMapping = 300;
THREE.CubeReflectionMapping = 301;
THREE.CubeRefractionMapping = 302;
THREE.EquirectangularReflectionMapping = 303;
THREE.EquirectangularRefractionMapping = 304;
THREE.SphericalReflectionMapping = 305;
THREE.RepeatWrapping = 1E3;
THREE.ClampToEdgeWrapping = 1001;
THREE.MirroredRepeatWrapping = 1002;
THREE.NearestFilter = 1003;
THREE.NearestMipMapNearestFilter = 1004;
THREE.NearestMipMapLinearFilter = 1005;
THREE.LinearFilter = 1006;
THREE.LinearMipMapNearestFilter = 1007;
THREE.LinearMipMapLinearFilter = 1008;
THREE.UnsignedByteType = 1009;
THREE.ByteType = 1010;
THREE.ShortType = 1011;
THREE.UnsignedShortType = 1012;
THREE.IntType = 1013;
THREE.UnsignedIntType = 1014;
THREE.FloatType = 1015;
THREE.UnsignedShort4444Type = 1016;
THREE.UnsignedShort5551Type = 1017;
THREE.UnsignedShort565Type = 1018;
THREE.AlphaFormat = 1019;
THREE.RGBFormat = 1020;
THREE.RGBAFormat = 1021;
THREE.LuminanceFormat = 1022;
THREE.LuminanceAlphaFormat = 1023;
THREE.RGBEFormat = THREE.RGBAFormat;
THREE.RGB_S3TC_DXT1_Format = 2001;
THREE.RGBA_S3TC_DXT1_Format = 2002;
THREE.RGBA_S3TC_DXT3_Format = 2003;
THREE.RGBA_S3TC_DXT5_Format = 2004;
THREE.RGB_PVRTC_4BPPV1_Format = 2100;
THREE.RGB_PVRTC_2BPPV1_Format = 2101;
THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
THREE.RGBA_PVRTC_2BPPV1_Format = 2103;
THREE.Projector = function() {
  console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");
  this.projectVector = function(a, b) {
    console.warn("THREE.Projector: .projectVector() is now vector.project().");
    a.project(b);
  };
  this.unprojectVector = function(a, b) {
    console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
    a.unproject(b);
  };
  this.pickingRay = function(a, b) {
    console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
  };
};
THREE.CanvasRenderer = function() {
  console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
  this.domElement = document.createElement("canvas");
  this.clear = function() {};
  this.render = function() {};
  this.setClearColor = function() {};
  this.setSize = function() {};
};
THREE.Color = function(a) {
  return 3 === arguments.length ? this.setRGB(arguments[0], arguments[1], arguments[2]) : this.set(a);
};
THREE.Color.prototype = {
  constructor: THREE.Color,
  r: 1,
  g: 1,
  b: 1,
  set: function(a) {
    a instanceof THREE.Color ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);
    return this;
  },
  setHex: function(a) {
    a = Math.floor(a);
    this.r = (a >> 16 & 255) / 255;
    this.g = (a >> 8 & 255) / 255;
    this.b = (a & 255) / 255;
    return this;
  },
  setRGB: function(a, b, c) {
    this.r = a;
    this.g = b;
    this.b = c;
    return this;
  },
  setHSL: function(a, b, c) {
    if (0 === b)
      this.r = this.g = this.b = c;
    else {
      var d = function(a, b, c) {
        0 > c && (c += 1);
        1 < c && (c -= 1);
        return c < 1 / 6 ? a + 6 * (b - a) * c : .5 > c ? b : c < 2 / 3 ? a + 6 * (b - a) * (2 / 3 - c) : a;
      };
      b = .5 >= c ? c * (1 + b) : c + b - c * b;
      c = 2 * c - b;
      this.r = d(c, b, a + 1 / 3);
      this.g = d(c, b, a);
      this.b = d(c, b, a - 1 / 3);
    }
    return this;
  },
  setStyle: function(a) {
    if (/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(a))
      return a = /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(a), this.r = Math.min(255, parseInt(a[1], 10)) / 255, this.g = Math.min(255, parseInt(a[2], 10)) / 255, this.b = Math.min(255, parseInt(a[3], 10)) / 255, this;
    if (/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(a))
      return a = /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(a), this.r = Math.min(100, parseInt(a[1], 10)) / 100, this.g = Math.min(100, parseInt(a[2], 10)) / 100, this.b = Math.min(100, parseInt(a[3], 10)) / 100, this;
    if (/^\#([0-9a-f]{6})$/i.test(a))
      return a = /^\#([0-9a-f]{6})$/i.exec(a), this.setHex(parseInt(a[1], 16)), this;
    if (/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))
      return a = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a), this.setHex(parseInt(a[1] + a[1] + a[2] + a[2] + a[3] + a[3], 16)), this;
    if (/^(\w+)$/i.test(a))
      return this.setHex(THREE.ColorKeywords[a]), this;
  },
  copy: function(a) {
    this.r = a.r;
    this.g = a.g;
    this.b = a.b;
    return this;
  },
  copyGammaToLinear: function(a) {
    this.r = a.r * a.r;
    this.g = a.g * a.g;
    this.b = a.b * a.b;
    return this;
  },
  copyLinearToGamma: function(a) {
    this.r = Math.sqrt(a.r);
    this.g = Math.sqrt(a.g);
    this.b = Math.sqrt(a.b);
    return this;
  },
  convertGammaToLinear: function() {
    var a = this.r,
        b = this.g,
        c = this.b;
    this.r = a * a;
    this.g = b * b;
    this.b = c * c;
    return this;
  },
  convertLinearToGamma: function() {
    this.r = Math.sqrt(this.r);
    this.g = Math.sqrt(this.g);
    this.b = Math.sqrt(this.b);
    return this;
  },
  getHex: function() {
    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
  },
  getHexString: function() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  },
  getHSL: function(a) {
    a = a || {
      h: 0,
      s: 0,
      l: 0
    };
    var b = this.r,
        c = this.g,
        d = this.b,
        e = Math.max(b, c, d),
        f = Math.min(b, c, d),
        g,
        h = (f + e) / 2;
    if (f === e)
      f = g = 0;
    else {
      var k = e - f,
          f = .5 >= h ? k / (e + f) : k / (2 - e - f);
      switch (e) {
        case b:
          g = (c - d) / k + (c < d ? 6 : 0);
          break;
        case c:
          g = (d - b) / k + 2;
          break;
        case d:
          g = (b - c) / k + 4;
      }
      g /= 6;
    }
    a.h = g;
    a.s = f;
    a.l = h;
    return a;
  },
  getStyle: function() {
    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
  },
  offsetHSL: function(a, b, c) {
    var d = this.getHSL();
    d.h += a;
    d.s += b;
    d.l += c;
    this.setHSL(d.h, d.s, d.l);
    return this;
  },
  add: function(a) {
    this.r += a.r;
    this.g += a.g;
    this.b += a.b;
    return this;
  },
  addColors: function(a, b) {
    this.r = a.r + b.r;
    this.g = a.g + b.g;
    this.b = a.b + b.b;
    return this;
  },
  addScalar: function(a) {
    this.r += a;
    this.g += a;
    this.b += a;
    return this;
  },
  multiply: function(a) {
    this.r *= a.r;
    this.g *= a.g;
    this.b *= a.b;
    return this;
  },
  multiplyScalar: function(a) {
    this.r *= a;
    this.g *= a;
    this.b *= a;
    return this;
  },
  lerp: function(a, b) {
    this.r += (a.r - this.r) * b;
    this.g += (a.g - this.g) * b;
    this.b += (a.b - this.b) * b;
    return this;
  },
  equals: function(a) {
    return a.r === this.r && a.g === this.g && a.b === this.b;
  },
  fromArray: function(a) {
    this.r = a[0];
    this.g = a[1];
    this.b = a[2];
    return this;
  },
  toArray: function() {
    return [this.r, this.g, this.b];
  },
  clone: function() {
    return (new THREE.Color).setRGB(this.r, this.g, this.b);
  }
};
THREE.ColorKeywords = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
THREE.Quaternion = function(a, b, c, d) {
  this._x = a || 0;
  this._y = b || 0;
  this._z = c || 0;
  this._w = void 0 !== d ? d : 1;
};
THREE.Quaternion.prototype = {
  constructor: THREE.Quaternion,
  _x: 0,
  _y: 0,
  _z: 0,
  _w: 0,
  get x() {
    return this._x;
  },
  set x(a) {
    this._x = a;
    this.onChangeCallback();
  },
  get y() {
    return this._y;
  },
  set y(a) {
    this._y = a;
    this.onChangeCallback();
  },
  get z() {
    return this._z;
  },
  set z(a) {
    this._z = a;
    this.onChangeCallback();
  },
  get w() {
    return this._w;
  },
  set w(a) {
    this._w = a;
    this.onChangeCallback();
  },
  set: function(a, b, c, d) {
    this._x = a;
    this._y = b;
    this._z = c;
    this._w = d;
    this.onChangeCallback();
    return this;
  },
  copy: function(a) {
    this._x = a.x;
    this._y = a.y;
    this._z = a.z;
    this._w = a.w;
    this.onChangeCallback();
    return this;
  },
  setFromEuler: function(a, b) {
    if (!1 === a instanceof THREE.Euler)
      throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var c = Math.cos(a._x / 2),
        d = Math.cos(a._y / 2),
        e = Math.cos(a._z / 2),
        f = Math.sin(a._x / 2),
        g = Math.sin(a._y / 2),
        h = Math.sin(a._z / 2);
    "XYZ" === a.order ? (this._x = f * d * e + c * g * h, this._y = c * g * e - f * d * h, this._z = c * d * h + f * g * e, this._w = c * d * e - f * g * h) : "YXZ" === a.order ? (this._x = f * d * e + c * g * h, this._y = c * g * e - f * d * h, this._z = c * d * h - f * g * e, this._w = c * d * e + f * g * h) : "ZXY" === a.order ? (this._x = f * d * e - c * g * h, this._y = c * g * e + f * d * h, this._z = c * d * h + f * g * e, this._w = c * d * e - f * g * h) : "ZYX" === a.order ? (this._x = f * d * e - c * g * h, this._y = c * g * e + f * d * h, this._z = c * d * h - f * g * e, this._w = c * d * e + f * g * h) : "YZX" === a.order ? (this._x = f * d * e + c * g * h, this._y = c * g * e + f * d * h, this._z = c * d * h - f * g * e, this._w = c * d * e - f * g * h) : "XZY" === a.order && (this._x = f * d * e - c * g * h, this._y = c * g * e - f * d * h, this._z = c * d * h + f * g * e, this._w = c * d * e + f * g * h);
    if (!1 !== b)
      this.onChangeCallback();
    return this;
  },
  setFromAxisAngle: function(a, b) {
    var c = b / 2,
        d = Math.sin(c);
    this._x = a.x * d;
    this._y = a.y * d;
    this._z = a.z * d;
    this._w = Math.cos(c);
    this.onChangeCallback();
    return this;
  },
  setFromRotationMatrix: function(a) {
    var b = a.elements,
        c = b[0];
    a = b[4];
    var d = b[8],
        e = b[1],
        f = b[5],
        g = b[9],
        h = b[2],
        k = b[6],
        b = b[10],
        n = c + f + b;
    0 < n ? (c = .5 / Math.sqrt(n + 1), this._w = .25 / c, this._x = (k - g) * c, this._y = (d - h) * c, this._z = (e - a) * c) : c > f && c > b ? (c = 2 * Math.sqrt(1 + c - f - b), this._w = (k - g) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (d + h) / c) : f > b ? (c = 2 * Math.sqrt(1 + f - c - b), this._w = (d - h) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (g + k) / c) : (c = 2 * Math.sqrt(1 + b - c - f), this._w = (e - a) / c, this._x = (d + h) / c, this._y = (g + k) / c, this._z = .25 * c);
    this.onChangeCallback();
    return this;
  },
  setFromUnitVectors: function() {
    var a,
        b;
    return function(c, d) {
      void 0 === a && (a = new THREE.Vector3);
      b = c.dot(d) + 1;
      1E-6 > b ? (b = 0, Math.abs(c.x) > Math.abs(c.z) ? a.set(-c.y, c.x, 0) : a.set(0, -c.z, c.y)) : a.crossVectors(c, d);
      this._x = a.x;
      this._y = a.y;
      this._z = a.z;
      this._w = b;
      this.normalize();
      return this;
    };
  }(),
  inverse: function() {
    this.conjugate().normalize();
    return this;
  },
  conjugate: function() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this.onChangeCallback();
    return this;
  },
  dot: function(a) {
    return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
  },
  lengthSq: function() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  },
  length: function() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  },
  normalize: function() {
    var a = this.length();
    0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);
    this.onChangeCallback();
    return this;
  },
  multiply: function(a, b) {
    return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
  },
  multiplyQuaternions: function(a, b) {
    var c = a._x,
        d = a._y,
        e = a._z,
        f = a._w,
        g = b._x,
        h = b._y,
        k = b._z,
        n = b._w;
    this._x = c * n + f * g + d * k - e * h;
    this._y = d * n + f * h + e * g - c * k;
    this._z = e * n + f * k + c * h - d * g;
    this._w = f * n - c * g - d * h - e * k;
    this.onChangeCallback();
    return this;
  },
  multiplyVector3: function(a) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return a.applyQuaternion(this);
  },
  slerp: function(a, b) {
    if (0 === b)
      return this;
    if (1 === b)
      return this.copy(a);
    var c = this._x,
        d = this._y,
        e = this._z,
        f = this._w,
        g = f * a._w + c * a._x + d * a._y + e * a._z;
    0 > g ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, g = -g) : this.copy(a);
    if (1 <= g)
      return this._w = f, this._x = c, this._y = d, this._z = e, this;
    var h = Math.acos(g),
        k = Math.sqrt(1 - g * g);
    if (.001 > Math.abs(k))
      return this._w = .5 * (f + this._w), this._x = .5 * (c + this._x), this._y = .5 * (d + this._y), this._z = .5 * (e + this._z), this;
    g = Math.sin((1 - b) * h) / k;
    h = Math.sin(b * h) / k;
    this._w = f * g + this._w * h;
    this._x = c * g + this._x * h;
    this._y = d * g + this._y * h;
    this._z = e * g + this._z * h;
    this.onChangeCallback();
    return this;
  },
  equals: function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
  },
  fromArray: function(a, b) {
    void 0 === b && (b = 0);
    this._x = a[b];
    this._y = a[b + 1];
    this._z = a[b + 2];
    this._w = a[b + 3];
    this.onChangeCallback();
    return this;
  },
  toArray: function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this._x;
    a[b + 1] = this._y;
    a[b + 2] = this._z;
    a[b + 3] = this._w;
    return a;
  },
  onChange: function(a) {
    this.onChangeCallback = a;
    return this;
  },
  onChangeCallback: function() {},
  clone: function() {
    return new THREE.Quaternion(this._x, this._y, this._z, this._w);
  }
};
THREE.Quaternion.slerp = function(a, b, c, d) {
  return c.copy(a).slerp(b, d);
};
THREE.Vector2 = function(a, b) {
  this.x = a || 0;
  this.y = b || 0;
};
THREE.Vector2.prototype = {
  constructor: THREE.Vector2,
  set: function(a, b) {
    this.x = a;
    this.y = b;
    return this;
  },
  setX: function(a) {
    this.x = a;
    return this;
  },
  setY: function(a) {
    this.y = a;
    return this;
  },
  setComponent: function(a, b) {
    switch (a) {
      case 0:
        this.x = b;
        break;
      case 1:
        this.y = b;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
  },
  getComponent: function(a) {
    switch (a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw Error("index is out of range: " + a);
    }
  },
  copy: function(a) {
    this.x = a.x;
    this.y = a.y;
    return this;
  },
  add: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
    this.x += a.x;
    this.y += a.y;
    return this;
  },
  addVectors: function(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    return this;
  },
  addScalar: function(a) {
    this.x += a;
    this.y += a;
    return this;
  },
  sub: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
    this.x -= a.x;
    this.y -= a.y;
    return this;
  },
  subVectors: function(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    return this;
  },
  multiply: function(a) {
    this.x *= a.x;
    this.y *= a.y;
    return this;
  },
  multiplyScalar: function(a) {
    this.x *= a;
    this.y *= a;
    return this;
  },
  divide: function(a) {
    this.x /= a.x;
    this.y /= a.y;
    return this;
  },
  divideScalar: function(a) {
    0 !== a ? (a = 1 / a, this.x *= a, this.y *= a) : this.y = this.x = 0;
    return this;
  },
  min: function(a) {
    this.x > a.x && (this.x = a.x);
    this.y > a.y && (this.y = a.y);
    return this;
  },
  max: function(a) {
    this.x < a.x && (this.x = a.x);
    this.y < a.y && (this.y = a.y);
    return this;
  },
  clamp: function(a, b) {
    this.x < a.x ? this.x = a.x : this.x > b.x && (this.x = b.x);
    this.y < a.y ? this.y = a.y : this.y > b.y && (this.y = b.y);
    return this;
  },
  clampScalar: function() {
    var a,
        b;
    return function(c, d) {
      void 0 === a && (a = new THREE.Vector2, b = new THREE.Vector2);
      a.set(c, c);
      b.set(d, d);
      return this.clamp(a, b);
    };
  }(),
  floor: function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  },
  ceil: function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  },
  round: function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  },
  roundToZero: function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  },
  negate: function() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  },
  dot: function(a) {
    return this.x * a.x + this.y * a.y;
  },
  lengthSq: function() {
    return this.x * this.x + this.y * this.y;
  },
  length: function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  },
  normalize: function() {
    return this.divideScalar(this.length());
  },
  distanceTo: function(a) {
    return Math.sqrt(this.distanceToSquared(a));
  },
  distanceToSquared: function(a) {
    var b = this.x - a.x;
    a = this.y - a.y;
    return b * b + a * a;
  },
  setLength: function(a) {
    var b = this.length();
    0 !== b && a !== b && this.multiplyScalar(a / b);
    return this;
  },
  lerp: function(a, b) {
    this.x += (a.x - this.x) * b;
    this.y += (a.y - this.y) * b;
    return this;
  },
  equals: function(a) {
    return a.x === this.x && a.y === this.y;
  },
  fromArray: function(a, b) {
    void 0 === b && (b = 0);
    this.x = a[b];
    this.y = a[b + 1];
    return this;
  },
  toArray: function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this.x;
    a[b + 1] = this.y;
    return a;
  },
  fromAttribute: function(a, b, c) {
    void 0 === c && (c = 0);
    b = b * a.itemSize + c;
    this.x = a.array[b];
    this.y = a.array[b + 1];
    return this;
  },
  clone: function() {
    return new THREE.Vector2(this.x, this.y);
  }
};
THREE.Vector3 = function(a, b, c) {
  this.x = a || 0;
  this.y = b || 0;
  this.z = c || 0;
};
THREE.Vector3.prototype = {
  constructor: THREE.Vector3,
  set: function(a, b, c) {
    this.x = a;
    this.y = b;
    this.z = c;
    return this;
  },
  setX: function(a) {
    this.x = a;
    return this;
  },
  setY: function(a) {
    this.y = a;
    return this;
  },
  setZ: function(a) {
    this.z = a;
    return this;
  },
  setComponent: function(a, b) {
    switch (a) {
      case 0:
        this.x = b;
        break;
      case 1:
        this.y = b;
        break;
      case 2:
        this.z = b;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
  },
  getComponent: function(a) {
    switch (a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw Error("index is out of range: " + a);
    }
  },
  copy: function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    return this;
  },
  add: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    return this;
  },
  addScalar: function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    return this;
  },
  addVectors: function(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  },
  sub: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    return this;
  },
  subVectors: function(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  },
  multiply: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);
    this.x *= a.x;
    this.y *= a.y;
    this.z *= a.z;
    return this;
  },
  multiplyScalar: function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    return this;
  },
  multiplyVectors: function(a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  },
  applyEuler: function() {
    var a;
    return function(b) {
      !1 === b instanceof THREE.Euler && console.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.");
      void 0 === a && (a = new THREE.Quaternion);
      this.applyQuaternion(a.setFromEuler(b));
      return this;
    };
  }(),
  applyAxisAngle: function() {
    var a;
    return function(b, c) {
      void 0 === a && (a = new THREE.Quaternion);
      this.applyQuaternion(a.setFromAxisAngle(b, c));
      return this;
    };
  }(),
  applyMatrix3: function(a) {
    var b = this.x,
        c = this.y,
        d = this.z;
    a = a.elements;
    this.x = a[0] * b + a[3] * c + a[6] * d;
    this.y = a[1] * b + a[4] * c + a[7] * d;
    this.z = a[2] * b + a[5] * c + a[8] * d;
    return this;
  },
  applyMatrix4: function(a) {
    var b = this.x,
        c = this.y,
        d = this.z;
    a = a.elements;
    this.x = a[0] * b + a[4] * c + a[8] * d + a[12];
    this.y = a[1] * b + a[5] * c + a[9] * d + a[13];
    this.z = a[2] * b + a[6] * c + a[10] * d + a[14];
    return this;
  },
  applyProjection: function(a) {
    var b = this.x,
        c = this.y,
        d = this.z;
    a = a.elements;
    var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);
    this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;
    this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;
    this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;
    return this;
  },
  applyQuaternion: function(a) {
    var b = this.x,
        c = this.y,
        d = this.z,
        e = a.x,
        f = a.y,
        g = a.z;
    a = a.w;
    var h = a * b + f * d - g * c,
        k = a * c + g * b - e * d,
        n = a * d + e * c - f * b,
        b = -e * b - f * c - g * d;
    this.x = h * a + b * -e + k * -g - n * -f;
    this.y = k * a + b * -f + n * -e - h * -g;
    this.z = n * a + b * -g + h * -f - k * -e;
    return this;
  },
  project: function() {
    var a;
    return function(b) {
      void 0 === a && (a = new THREE.Matrix4);
      a.multiplyMatrices(b.projectionMatrix, a.getInverse(b.matrixWorld));
      return this.applyProjection(a);
    };
  }(),
  unproject: function() {
    var a;
    return function(b) {
      void 0 === a && (a = new THREE.Matrix4);
      a.multiplyMatrices(b.matrixWorld, a.getInverse(b.projectionMatrix));
      return this.applyProjection(a);
    };
  }(),
  transformDirection: function(a) {
    var b = this.x,
        c = this.y,
        d = this.z;
    a = a.elements;
    this.x = a[0] * b + a[4] * c + a[8] * d;
    this.y = a[1] * b + a[5] * c + a[9] * d;
    this.z = a[2] * b + a[6] * c + a[10] * d;
    this.normalize();
    return this;
  },
  divide: function(a) {
    this.x /= a.x;
    this.y /= a.y;
    this.z /= a.z;
    return this;
  },
  divideScalar: function(a) {
    0 !== a ? (a = 1 / a, this.x *= a, this.y *= a, this.z *= a) : this.z = this.y = this.x = 0;
    return this;
  },
  min: function(a) {
    this.x > a.x && (this.x = a.x);
    this.y > a.y && (this.y = a.y);
    this.z > a.z && (this.z = a.z);
    return this;
  },
  max: function(a) {
    this.x < a.x && (this.x = a.x);
    this.y < a.y && (this.y = a.y);
    this.z < a.z && (this.z = a.z);
    return this;
  },
  clamp: function(a, b) {
    this.x < a.x ? this.x = a.x : this.x > b.x && (this.x = b.x);
    this.y < a.y ? this.y = a.y : this.y > b.y && (this.y = b.y);
    this.z < a.z ? this.z = a.z : this.z > b.z && (this.z = b.z);
    return this;
  },
  clampScalar: function() {
    var a,
        b;
    return function(c, d) {
      void 0 === a && (a = new THREE.Vector3, b = new THREE.Vector3);
      a.set(c, c, c);
      b.set(d, d, d);
      return this.clamp(a, b);
    };
  }(),
  floor: function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  },
  ceil: function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  },
  round: function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  },
  roundToZero: function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  },
  negate: function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  },
  dot: function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z;
  },
  lengthSq: function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  },
  length: function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  },
  lengthManhattan: function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  },
  normalize: function() {
    return this.divideScalar(this.length());
  },
  setLength: function(a) {
    var b = this.length();
    0 !== b && a !== b && this.multiplyScalar(a / b);
    return this;
  },
  lerp: function(a, b) {
    this.x += (a.x - this.x) * b;
    this.y += (a.y - this.y) * b;
    this.z += (a.z - this.z) * b;
    return this;
  },
  cross: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b);
    var c = this.x,
        d = this.y,
        e = this.z;
    this.x = d * a.z - e * a.y;
    this.y = e * a.x - c * a.z;
    this.z = c * a.y - d * a.x;
    return this;
  },
  crossVectors: function(a, b) {
    var c = a.x,
        d = a.y,
        e = a.z,
        f = b.x,
        g = b.y,
        h = b.z;
    this.x = d * h - e * g;
    this.y = e * f - c * h;
    this.z = c * g - d * f;
    return this;
  },
  projectOnVector: function() {
    var a,
        b;
    return function(c) {
      void 0 === a && (a = new THREE.Vector3);
      a.copy(c).normalize();
      b = this.dot(a);
      return this.copy(a).multiplyScalar(b);
    };
  }(),
  projectOnPlane: function() {
    var a;
    return function(b) {
      void 0 === a && (a = new THREE.Vector3);
      a.copy(this).projectOnVector(b);
      return this.sub(a);
    };
  }(),
  reflect: function() {
    var a;
    return function(b) {
      void 0 === a && (a = new THREE.Vector3);
      return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
    };
  }(),
  angleTo: function(a) {
    a = this.dot(a) / (this.length() * a.length());
    return Math.acos(THREE.Math.clamp(a, -1, 1));
  },
  distanceTo: function(a) {
    return Math.sqrt(this.distanceToSquared(a));
  },
  distanceToSquared: function(a) {
    var b = this.x - a.x,
        c = this.y - a.y;
    a = this.z - a.z;
    return b * b + c * c + a * a;
  },
  setEulerFromRotationMatrix: function(a, b) {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  },
  setEulerFromQuaternion: function(a, b) {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  },
  getPositionFromMatrix: function(a) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(a);
  },
  getScaleFromMatrix: function(a) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(a);
  },
  getColumnFromMatrix: function(a, b) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(a, b);
  },
  setFromMatrixPosition: function(a) {
    this.x = a.elements[12];
    this.y = a.elements[13];
    this.z = a.elements[14];
    return this;
  },
  setFromMatrixScale: function(a) {
    var b = this.set(a.elements[0], a.elements[1], a.elements[2]).length(),
        c = this.set(a.elements[4], a.elements[5], a.elements[6]).length();
    a = this.set(a.elements[8], a.elements[9], a.elements[10]).length();
    this.x = b;
    this.y = c;
    this.z = a;
    return this;
  },
  setFromMatrixColumn: function(a, b) {
    var c = 4 * a,
        d = b.elements;
    this.x = d[c];
    this.y = d[c + 1];
    this.z = d[c + 2];
    return this;
  },
  equals: function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z;
  },
  fromArray: function(a, b) {
    void 0 === b && (b = 0);
    this.x = a[b];
    this.y = a[b + 1];
    this.z = a[b + 2];
    return this;
  },
  toArray: function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this.x;
    a[b + 1] = this.y;
    a[b + 2] = this.z;
    return a;
  },
  fromAttribute: function(a, b, c) {
    void 0 === c && (c = 0);
    b = b * a.itemSize + c;
    this.x = a.array[b];
    this.y = a.array[b + 1];
    this.z = a.array[b + 2];
    return this;
  },
  clone: function() {
    return new THREE.Vector3(this.x, this.y, this.z);
  }
};
THREE.Vector4 = function(a, b, c, d) {
  this.x = a || 0;
  this.y = b || 0;
  this.z = c || 0;
  this.w = void 0 !== d ? d : 1;
};
THREE.Vector4.prototype = {
  constructor: THREE.Vector4,
  set: function(a, b, c, d) {
    this.x = a;
    this.y = b;
    this.z = c;
    this.w = d;
    return this;
  },
  setX: function(a) {
    this.x = a;
    return this;
  },
  setY: function(a) {
    this.y = a;
    return this;
  },
  setZ: function(a) {
    this.z = a;
    return this;
  },
  setW: function(a) {
    this.w = a;
    return this;
  },
  setComponent: function(a, b) {
    switch (a) {
      case 0:
        this.x = b;
        break;
      case 1:
        this.y = b;
        break;
      case 2:
        this.z = b;
        break;
      case 3:
        this.w = b;
        break;
      default:
        throw Error("index is out of range: " + a);
    }
  },
  getComponent: function(a) {
    switch (a) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw Error("index is out of range: " + a);
    }
  },
  copy: function(a) {
    this.x = a.x;
    this.y = a.y;
    this.z = a.z;
    this.w = void 0 !== a.w ? a.w : 1;
    return this;
  },
  add: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
    this.x += a.x;
    this.y += a.y;
    this.z += a.z;
    this.w += a.w;
    return this;
  },
  addScalar: function(a) {
    this.x += a;
    this.y += a;
    this.z += a;
    this.w += a;
    return this;
  },
  addVectors: function(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;
    return this;
  },
  sub: function(a, b) {
    if (void 0 !== b)
      return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
    this.x -= a.x;
    this.y -= a.y;
    this.z -= a.z;
    this.w -= a.w;
    return this;
  },
  subVectors: function(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;
    return this;
  },
  multiplyScalar: function(a) {
    this.x *= a;
    this.y *= a;
    this.z *= a;
    this.w *= a;
    return this;
  },
  applyMatrix4: function(a) {
    var b = this.x,
        c = this.y,
        d = this.z,
        e = this.w;
    a = a.elements;
    this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;
    this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;
    this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;
    this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;
    return this;
  },
  divideScalar: function(a) {
    0 !== a ? (a = 1 / a, this.x *= a, this.y *= a, this.z *= a, this.w *= a) : (this.z = this.y = this.x = 0, this.w = 1);
    return this;
  },
  setAxisAngleFromQuaternion: function(a) {
    this.w = 2 * Math.acos(a.w);
    var b = Math.sqrt(1 - a.w * a.w);
    1E-4 > b ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / b, this.y = a.y / b, this.z = a.z / b);
    return this;
  },
  setAxisAngleFromRotationMatrix: function(a) {
    var b,
        c,
        d;
    a = a.elements;
    var e = a[0];
    d = a[4];
    var f = a[8],
        g = a[1],
        h = a[5],
        k = a[9];
    c = a[2];
    b = a[6];
    var n = a[10];
    if (.01 > Math.abs(d - g) && .01 > Math.abs(f - c) && .01 > Math.abs(k - b)) {
      if (.1 > Math.abs(d + g) && .1 > Math.abs(f + c) && .1 > Math.abs(k + b) && .1 > Math.abs(e + h + n - 3))
        return this.set(1, 0, 0, 0), this;
      a = Math.PI;
      e = (e + 1) / 2;
      h = (h + 1) / 2;
      n = (n + 1) / 2;
      d = (d + g) / 4;
      f = (f + c) / 4;
      k = (k + b) / 4;
      e > h && e > n ? .01 > e ? (b = 0, d = c = .707106781) : (b = Math.sqrt(e), c = d / b, d = f / b) : h > n ? .01 > h ? (b = .707106781, c = 0, d = .707106781) : (c = Math.sqrt(h), b = d / c, d = k / c) : .01 > n ? (c = b = .707106781, d = 0) : (d = Math.sqrt(n), b = f / d, c = k / d);
      this.set(b, c, d, a);
      return this;
    }
    a = Math.sqrt((b - k) * (b - k) + (f - c) * (f - c) + (g - d) * (g - d));
    .001 > Math.abs(a) && (a = 1);
    this.x = (b - k) / a;
    this.y = (f - c) / a;
    this.z = (g - d) / a;
    this.w = Math.acos((e + h + n - 1) / 2);
    return this;
  },
  min: function(a) {
    this.x > a.x && (this.x = a.x);
    this.y > a.y && (this.y = a.y);
    this.z > a.z && (this.z = a.z);
    this.w > a.w && (this.w = a.w);
    return this;
  },
  max: function(a) {
    this.x < a.x && (this.x = a.x);
    this.y < a.y && (this.y = a.y);
    this.z < a.z && (this.z = a.z);
    this.w < a.w && (this.w = a.w);
    return this;
  },
  clamp: function(a, b) {
    this.x < a.x ? this.x = a.x : this.x > b.x && (this.x = b.x);
    this.y < a.y ? this.y = a.y : this.y > b.y && (this.y = b.y);
    this.z < a.z ? this.z = a.z : this.z > b.z && (this.z = b.z);
    this.w < a.w ? this.w = a.w : this.w > b.w && (this.w = b.w);
    return this;
  },
  clampScalar: function() {
    var a,
        b;
    return function(c, d) {
      void 0 === a && (a = new THREE.Vector4, b = new THREE.Vector4);
      a.set(c, c, c, c);
      b.set(d, d, d, d);
      return this.clamp(a, b);
    };
  }(),
  floor: function() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  },
  ceil: function() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  },
  round: function() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  },
  roundToZero: function() {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  },
  negate: function() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  },
  dot: function(a) {
    return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
  },
  lengthSq: function() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  },
  length: function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  },
  lengthManhattan: function() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  },
  normalize: function() {
    return this.divideScalar(this.length());
  },
  setLength: function(a) {
    var b = this.length();
    0 !== b && a !== b && this.multiplyScalar(a / b);
    return this;
  },
  lerp: function(a, b) {
    this.x += (a.x - this.x) * b;
    this.y += (a.y - this.y) * b;
    this.z += (a.z - this.z) * b;
    this.w += (a.w - this.w) * b;
    return this;
  },
  equals: function(a) {
    return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
  },
  fromArray: function(a, b) {
    void 0 === b && (b = 0);
    this.x = a[b];
    this.y = a[b + 1];
    this.z = a[b + 2];
    this.w = a[b + 3];
    return this;
  },
  toArray: function(a, b) {
    void 0 === a && (a = []);
    void 0 === b && (b = 0);
    a[b] = this.x;
    a[b + 1] = this.y;
    a[b + 2] = this.z;
    a[b + 3] = this.w;
    return a;
  },
  fromAttribute: function(a, b, c) {
    void 0 === c && (c = 0);
    b = b * a.itemSize + c;
    this.x = a.array[b];
    this.y = a.array[b + 1];
    this.z = a.array[b + 2];
    this.w = a.array[b + 3];
    return this;
  },
  clone: function() {
    return new THREE.Vector4(this.x, this.y, this.z, this.w);
  }
};
THREE.Euler = function(a, b, c, d) {
  this._x = a || 0;
  this._y = b || 0;
  this._z = c || 0;
  this._order = d || THREE.Euler.DefaultOrder;
};
THREE.Euler.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
THREE.Euler.DefaultOrder = "XYZ";
THREE.Euler.prototype = {
  constructor: THREE.Euler,
  _x: 0,
  _y: 0,
  _z: 0,
  _order: THREE.Euler.DefaultOrder,
  get x() {
    return this._x;
  },
  set x(a) {
    this._x = a;
    this.onChangeCallback();
  },
  get y() {
    return this._y;
  },
  set y(a) {
    this._y = a;
    this.onChangeCallback();
  },
  get z() {
    return this._z;
  },
  set z(a) {
    this._z = a;
    this.onChangeCallback();
  },
  get order() {
    return this._order;
  },
  set order(a) {
    this._order = a;
    this.onChangeCallback();
  },
  set: function(a, b, c, d) {
    this._x = a;
    this._y = b;
    this._z = c;
    this._order = d || this._order;
    this.onChangeCallback();
    return this;
  },
  copy: function(a) {
    this._x = a._x;
    this._y = a._y;
    this._z = a._z;
    this._order = a._order;
    this.onChangeCallback();
    return this;
  },
  setFromRotationMatrix: function(a, b, c) {
    var d = THREE.Math.clamp,
        e = a.elements;
    a = e[0];
    var f = e[4],
        g = e[8],
        h = e[1],
        k = e[5],
        n = e[9],
        p = e[2],
        q = e[6],
        e = e[10];
    b = b || this._order;
    "XYZ" === b ? (this._y = Math.asin(d(g, -1, 1)), .99999 > Math.abs(g) ? (this._x = Math.atan2(-n, e), this._z = Math.atan2(-f, a)) : (this._x = Math.atan2(q, k), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-d(n, -1, 1)), .99999 > Math.abs(n) ? (this._y = Math.atan2(g, e), this._z = Math.atan2(h, k)) : (this._y = Math.atan2(-p, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(d(q, -1, 1)), .99999 > Math.abs(q) ? (this._y = Math.atan2(-p, e), this._z = Math.atan2(-f, k)) : (this._y = 0, this._z = Math.atan2(h, a))) : "ZYX" === b ? (this._y = Math.asin(-d(p, -1, 1)), .99999 > Math.abs(p) ? (this._x = Math.atan2(q, e), this._z = Math.atan2(h, a)) : (this._x = 0, this._z = Math.atan2(-f, k))) : "YZX" === b ? (this._z = Math.asin(d(h, -1, 1)), .99999 > Math.abs(h) ? (this._x = Math.atan2(-n, k), this._y = Math.atan2(-p, a)) : (this._x = 0, this._y = Math.atan2(g, e))) : "XZY" === b ? (this._z = Math.asin(-d(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(q, k), this._y = Math.atan2(g, a)) : (this._x = Math.atan2(-n, e), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);
    this._order = b;
    if (!1 !== c)
      this.onChangeCallback();
    return this;
  },
  setFromQuaternion: function() {
    var a;
    return function(b, c, d) {
      void 0 === a && (a = new THREE.Matrix4);
      a.makeRotationFromQuaternion(b);
      this.setFromRotationMatrix(a, c, d);
      return this;
    };
  }(),
  setFromVector3: function(a, b) {
    return this.set(a.x, a.y, a.z, b || this._order);
  },
  reorder: function() {
    var a = new THREE.Quaternion;
    return function(b) {
      a.setFromEuler(this);
      this.setFromQuaternion(a, b);
    };
  }(),
  equals: function(a) {
    return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
  },
  fromArray: function(a) {
    this._x = a[0];
    this._y = a[1];
    this._z = a[2];
    void 0 !== a[3] && (this._order = a[3]);
    this.onChangeCallback();
    return this;
  },
  toArray: function() {
    return [this._x, this._y, this._z, this._order];
  },
  toVector3: function(a) {
    return a ? a.set(this._x, this._y, this._z) : new THREE.Vector3(this._x, this._y, this._z);
  },
  onChange: function(a) {
    this.onChangeCallback = a;
    return this;
  },
  onChangeCallback: function() {},
  clone: function() {
    return new THREE.Euler(this._x, this._y, this._z, this._order);
  }
};
THREE.Line3 = function(a, b) {
  this.start = void 0 !== a ? a : new THREE.Vector3;
  this.end = void 0 !== b ? b : new THREE.Vector3;
};
THREE.Line3.prototype = {
  constructor: THREE.Line3,
  set: function(a, b) {
    this.start.copy(a);
    this.end.copy(b);
    return this;
  },
  copy: function(a) {
    this.start.copy(a.start);
    this.end.copy(a.end);
    return this;
  },
  center: function(a) {
    return (a || new THREE.Vector3).addVectors(this.start, this.end).multiplyScalar(.5);
  },
  delta: function(a) {
    return (a || new THREE.Vector3).subVectors(this.end, this.start);
  },
  distanceSq: function() {
    return this.start.distanceToSquared(this.end);
  },
  distance: function() {
    return this.start.distanceTo(this.end);
  },
  at: function(a, b) {
    var c = b || new THREE.Vector3;
    return this.delta(c).multiplyScalar(a).add(this.start);
  },
  closestPointToPointParameter: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3;
    return function(c, d) {
      a.subVectors(c, this.start);
      b.subVectors(this.end, this.start);
      var e = b.dot(b),
          e = b.dot(a) / e;
      d && (e = THREE.Math.clamp(e, 0, 1));
      return e;
    };
  }(),
  closestPointToPoint: function(a, b, c) {
    a = this.closestPointToPointParameter(a, b);
    c = c || new THREE.Vector3;
    return this.delta(c).multiplyScalar(a).add(this.start);
  },
  applyMatrix4: function(a) {
    this.start.applyMatrix4(a);
    this.end.applyMatrix4(a);
    return this;
  },
  equals: function(a) {
    return a.start.equals(this.start) && a.end.equals(this.end);
  },
  clone: function() {
    return (new THREE.Line3).copy(this);
  }
};
THREE.Box2 = function(a, b) {
  this.min = void 0 !== a ? a : new THREE.Vector2(Infinity, Infinity);
  this.max = void 0 !== b ? b : new THREE.Vector2(-Infinity, -Infinity);
};
THREE.Box2.prototype = {
  constructor: THREE.Box2,
  set: function(a, b) {
    this.min.copy(a);
    this.max.copy(b);
    return this;
  },
  setFromPoints: function(a) {
    this.makeEmpty();
    for (var b = 0,
        c = a.length; b < c; b++)
      this.expandByPoint(a[b]);
    return this;
  },
  setFromCenterAndSize: function() {
    var a = new THREE.Vector2;
    return function(b, c) {
      var d = a.copy(c).multiplyScalar(.5);
      this.min.copy(b).sub(d);
      this.max.copy(b).add(d);
      return this;
    };
  }(),
  copy: function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  },
  makeEmpty: function() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  },
  empty: function() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  },
  center: function(a) {
    return (a || new THREE.Vector2).addVectors(this.min, this.max).multiplyScalar(.5);
  },
  size: function(a) {
    return (a || new THREE.Vector2).subVectors(this.max, this.min);
  },
  expandByPoint: function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  },
  expandByVector: function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  },
  expandByScalar: function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  },
  containsPoint: function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
  },
  containsBox: function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y ? !0 : !1;
  },
  getParameter: function(a, b) {
    return (b || new THREE.Vector2).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
  },
  isIntersectionBox: function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
  },
  clampPoint: function(a, b) {
    return (b || new THREE.Vector2).copy(a).clamp(this.min, this.max);
  },
  distanceToPoint: function() {
    var a = new THREE.Vector2;
    return function(b) {
      return a.copy(b).clamp(this.min, this.max).sub(b).length();
    };
  }(),
  intersect: function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    return this;
  },
  union: function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  },
  translate: function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  },
  equals: function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  },
  clone: function() {
    return (new THREE.Box2).copy(this);
  }
};
THREE.Box3 = function(a, b) {
  this.min = void 0 !== a ? a : new THREE.Vector3(Infinity, Infinity, Infinity);
  this.max = void 0 !== b ? b : new THREE.Vector3(-Infinity, -Infinity, -Infinity);
};
THREE.Box3.prototype = {
  constructor: THREE.Box3,
  set: function(a, b) {
    this.min.copy(a);
    this.max.copy(b);
    return this;
  },
  setFromPoints: function(a) {
    this.makeEmpty();
    for (var b = 0,
        c = a.length; b < c; b++)
      this.expandByPoint(a[b]);
    return this;
  },
  setFromCenterAndSize: function() {
    var a = new THREE.Vector3;
    return function(b, c) {
      var d = a.copy(c).multiplyScalar(.5);
      this.min.copy(b).sub(d);
      this.max.copy(b).add(d);
      return this;
    };
  }(),
  setFromObject: function() {
    var a = new THREE.Vector3;
    return function(b) {
      var c = this;
      b.updateMatrixWorld(!0);
      this.makeEmpty();
      b.traverse(function(b) {
        var e = b.geometry;
        if (void 0 !== e)
          if (e instanceof THREE.Geometry)
            for (var f = e.vertices,
                e = 0,
                g = f.length; e < g; e++)
              a.copy(f[e]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
          else if (e instanceof THREE.BufferGeometry && void 0 !== e.attributes.position)
            for (f = e.attributes.position.array, e = 0, g = f.length; e < g; e += 3)
              a.set(f[e], f[e + 1], f[e + 2]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
      });
      return this;
    };
  }(),
  copy: function(a) {
    this.min.copy(a.min);
    this.max.copy(a.max);
    return this;
  },
  makeEmpty: function() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  },
  empty: function() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  },
  center: function(a) {
    return (a || new THREE.Vector3).addVectors(this.min, this.max).multiplyScalar(.5);
  },
  size: function(a) {
    return (a || new THREE.Vector3).subVectors(this.max, this.min);
  },
  expandByPoint: function(a) {
    this.min.min(a);
    this.max.max(a);
    return this;
  },
  expandByVector: function(a) {
    this.min.sub(a);
    this.max.add(a);
    return this;
  },
  expandByScalar: function(a) {
    this.min.addScalar(-a);
    this.max.addScalar(a);
    return this;
  },
  containsPoint: function(a) {
    return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
  },
  containsBox: function(a) {
    return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z ? !0 : !1;
  },
  getParameter: function(a, b) {
    return (b || new THREE.Vector3).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
  },
  isIntersectionBox: function(a) {
    return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
  },
  clampPoint: function(a, b) {
    return (b || new THREE.Vector3).copy(a).clamp(this.min, this.max);
  },
  distanceToPoint: function() {
    var a = new THREE.Vector3;
    return function(b) {
      return a.copy(b).clamp(this.min, this.max).sub(b).length();
    };
  }(),
  getBoundingSphere: function() {
    var a = new THREE.Vector3;
    return function(b) {
      b = b || new THREE.Sphere;
      b.center = this.center();
      b.radius = .5 * this.size(a).length();
      return b;
    };
  }(),
  intersect: function(a) {
    this.min.max(a.min);
    this.max.min(a.max);
    return this;
  },
  union: function(a) {
    this.min.min(a.min);
    this.max.max(a.max);
    return this;
  },
  applyMatrix4: function() {
    var a = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
    return function(b) {
      a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);
      a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);
      a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);
      a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);
      a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);
      a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);
      a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);
      a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);
      this.makeEmpty();
      this.setFromPoints(a);
      return this;
    };
  }(),
  translate: function(a) {
    this.min.add(a);
    this.max.add(a);
    return this;
  },
  equals: function(a) {
    return a.min.equals(this.min) && a.max.equals(this.max);
  },
  clone: function() {
    return (new THREE.Box3).copy(this);
  }
};
THREE.Matrix3 = function() {
  this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
  0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
};
THREE.Matrix3.prototype = {
  constructor: THREE.Matrix3,
  set: function(a, b, c, d, e, f, g, h, k) {
    var n = this.elements;
    n[0] = a;
    n[3] = b;
    n[6] = c;
    n[1] = d;
    n[4] = e;
    n[7] = f;
    n[2] = g;
    n[5] = h;
    n[8] = k;
    return this;
  },
  identity: function() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  },
  copy: function(a) {
    a = a.elements;
    this.set(a[0], a[3], a[6], a[1], a[4], a[7], a[2], a[5], a[8]);
    return this;
  },
  multiplyVector3: function(a) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return a.applyMatrix3(this);
  },
  multiplyVector3Array: function(a) {
    console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
    return this.applyToVector3Array(a);
  },
  applyToVector3Array: function() {
    var a = new THREE.Vector3;
    return function(b, c, d) {
      void 0 === c && (c = 0);
      void 0 === d && (d = b.length);
      for (var e = 0; e < d; e += 3, c += 3)
        a.x = b[c], a.y = b[c + 1], a.z = b[c + 2], a.applyMatrix3(this), b[c] = a.x, b[c + 1] = a.y, b[c + 2] = a.z;
      return b;
    };
  }(),
  multiplyScalar: function(a) {
    var b = this.elements;
    b[0] *= a;
    b[3] *= a;
    b[6] *= a;
    b[1] *= a;
    b[4] *= a;
    b[7] *= a;
    b[2] *= a;
    b[5] *= a;
    b[8] *= a;
    return this;
  },
  determinant: function() {
    var a = this.elements,
        b = a[0],
        c = a[1],
        d = a[2],
        e = a[3],
        f = a[4],
        g = a[5],
        h = a[6],
        k = a[7],
        a = a[8];
    return b * f * a - b * g * k - c * e * a + c * g * h + d * e * k - d * f * h;
  },
  getInverse: function(a, b) {
    var c = a.elements,
        d = this.elements;
    d[0] = c[10] * c[5] - c[6] * c[9];
    d[1] = -c[10] * c[1] + c[2] * c[9];
    d[2] = c[6] * c[1] - c[2] * c[5];
    d[3] = -c[10] * c[4] + c[6] * c[8];
    d[4] = c[10] * c[0] - c[2] * c[8];
    d[5] = -c[6] * c[0] + c[2] * c[4];
    d[6] = c[9] * c[4] - c[5] * c[8];
    d[7] = -c[9] * c[0] + c[1] * c[8];
    d[8] = c[5] * c[0] - c[1] * c[4];
    c = c[0] * d[0] + c[1] * d[3] + c[2] * d[6];
    if (0 === c) {
      if (b)
        throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");
      console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");
      this.identity();
      return this;
    }
    this.multiplyScalar(1 / c);
    return this;
  },
  transpose: function() {
    var a,
        b = this.elements;
    a = b[1];
    b[1] = b[3];
    b[3] = a;
    a = b[2];
    b[2] = b[6];
    b[6] = a;
    a = b[5];
    b[5] = b[7];
    b[7] = a;
    return this;
  },
  flattenToArrayOffset: function(a, b) {
    var c = this.elements;
    a[b] = c[0];
    a[b + 1] = c[1];
    a[b + 2] = c[2];
    a[b + 3] = c[3];
    a[b + 4] = c[4];
    a[b + 5] = c[5];
    a[b + 6] = c[6];
    a[b + 7] = c[7];
    a[b + 8] = c[8];
    return a;
  },
  getNormalMatrix: function(a) {
    this.getInverse(a).transpose();
    return this;
  },
  transposeIntoArray: function(a) {
    var b = this.elements;
    a[0] = b[0];
    a[1] = b[3];
    a[2] = b[6];
    a[3] = b[1];
    a[4] = b[4];
    a[5] = b[7];
    a[6] = b[2];
    a[7] = b[5];
    a[8] = b[8];
    return this;
  },
  fromArray: function(a) {
    this.elements.set(a);
    return this;
  },
  toArray: function() {
    var a = this.elements;
    return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]];
  },
  clone: function() {
    return (new THREE.Matrix3).fromArray(this.elements);
  }
};
THREE.Matrix4 = function() {
  this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
  0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
};
THREE.Matrix4.prototype = {
  constructor: THREE.Matrix4,
  set: function(a, b, c, d, e, f, g, h, k, n, p, q, m, t, s, r) {
    var u = this.elements;
    u[0] = a;
    u[4] = b;
    u[8] = c;
    u[12] = d;
    u[1] = e;
    u[5] = f;
    u[9] = g;
    u[13] = h;
    u[2] = k;
    u[6] = n;
    u[10] = p;
    u[14] = q;
    u[3] = m;
    u[7] = t;
    u[11] = s;
    u[15] = r;
    return this;
  },
  identity: function() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  },
  copy: function(a) {
    this.elements.set(a.elements);
    return this;
  },
  extractPosition: function(a) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(a);
  },
  copyPosition: function(a) {
    var b = this.elements;
    a = a.elements;
    b[12] = a[12];
    b[13] = a[13];
    b[14] = a[14];
    return this;
  },
  extractBasis: function(a, b, c) {
    var d = this.elements;
    a.set(d[0], d[1], d[2]);
    b.set(d[4], d[5], d[6]);
    c.set(d[8], d[9], d[10]);
    return this;
  },
  makeBasis: function(a, b, c) {
    this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);
    return this;
  },
  extractRotation: function() {
    var a = new THREE.Vector3;
    return function(b) {
      var c = this.elements;
      b = b.elements;
      var d = 1 / a.set(b[0], b[1], b[2]).length(),
          e = 1 / a.set(b[4], b[5], b[6]).length(),
          f = 1 / a.set(b[8], b[9], b[10]).length();
      c[0] = b[0] * d;
      c[1] = b[1] * d;
      c[2] = b[2] * d;
      c[4] = b[4] * e;
      c[5] = b[5] * e;
      c[6] = b[6] * e;
      c[8] = b[8] * f;
      c[9] = b[9] * f;
      c[10] = b[10] * f;
      return this;
    };
  }(),
  makeRotationFromEuler: function(a) {
    !1 === a instanceof THREE.Euler && console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var b = this.elements,
        c = a.x,
        d = a.y,
        e = a.z,
        f = Math.cos(c),
        c = Math.sin(c),
        g = Math.cos(d),
        d = Math.sin(d),
        h = Math.cos(e),
        e = Math.sin(e);
    if ("XYZ" === a.order) {
      a = f * h;
      var k = f * e,
          n = c * h,
          p = c * e;
      b[0] = g * h;
      b[4] = -g * e;
      b[8] = d;
      b[1] = k + n * d;
      b[5] = a - p * d;
      b[9] = -c * g;
      b[2] = p - a * d;
      b[6] = n + k * d;
      b[10] = f * g;
    } else
      "YXZ" === a.order ? (a = g * h, k = g * e, n = d * h, p = d * e, b[0] = a + p * c, b[4] = n * c - k, b[8] = f * d, b[1] = f * e, b[5] = f * h, b[9] = -c, b[2] = k * c - n, b[6] = p + a * c, b[10] = f * g) : "ZXY" === a.order ? (a = g * h, k = g * e, n = d * h, p = d * e, b[0] = a - p * c, b[4] = -f * e, b[8] = n + k * c, b[1] = k + n * c, b[5] = f * h, b[9] = p - a * c, b[2] = -f * d, b[6] = c, b[10] = f * g) : "ZYX" === a.order ? (a = f * h, k = f * e, n = c * h, p = c * e, b[0] = g * h, b[4] = n * d - k, b[8] = a * d + p, b[1] = g * e, b[5] = p * d + a, b[9] = k * d - n, b[2] = -d, b[6] = c * g, b[10] = f * g) : "YZX" === a.order ? (a = f * g, k = f * d, n = c * g, p = c * d, b[0] = g * h, b[4] = p - a * e, b[8] = n * e + k, b[1] = e, b[5] = f * h, b[9] = -c * h, b[2] = -d * h, b[6] = k * e + n, b[10] = a - p * e) : "XZY" === a.order && (a = f * g, k = f * d, n = c * g, p = c * d, b[0] = g * h, b[4] = -e, b[8] = d * h, b[1] = a * e + p, b[5] = f * h, b[9] = k * e - n, b[2] = n * e - k, b[6] = c * h, b[10] = p * e + a);
    b[3] = 0;
    b[7] = 0;
    b[11] = 0;
    b[12] = 0;
    b[13] = 0;
    b[14] = 0;
    b[15] = 1;
    return this;
  },
  setRotationFromQuaternion: function(a) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(a);
  },
  makeRotationFromQuaternion: function(a) {
    var b = this.elements,
        c = a.x,
        d = a.y,
        e = a.z,
        f = a.w,
        g = c + c,
        h = d + d,
        k = e + e;
    a = c * g;
    var n = c * h,
        c = c * k,
        p = d * h,
        d = d * k,
        e = e * k,
        g = f * g,
        h = f * h,
        f = f * k;
    b[0] = 1 - (p + e);
    b[4] = n - f;
    b[8] = c + h;
    b[1] = n + f;
    b[5] = 1 - (a + e);
    b[9] = d - g;
    b[2] = c - h;
    b[6] = d + g;
    b[10] = 1 - (a + p);
    b[3] = 0;
    b[7] = 0;
    b[11] = 0;
    b[12] = 0;
    b[13] = 0;
    b[14] = 0;
    b[15] = 1;
    return this;
  },
  lookAt: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3,
        c = new THREE.Vector3;
    return function(d, e, f) {
      var g = this.elements;
      c.subVectors(d, e).normalize();
      0 === c.length() && (c.z = 1);
      a.crossVectors(f, c).normalize();
      0 === a.length() && (c.x += 1E-4, a.crossVectors(f, c).normalize());
      b.crossVectors(c, a);
      g[0] = a.x;
      g[4] = b.x;
      g[8] = c.x;
      g[1] = a.y;
      g[5] = b.y;
      g[9] = c.y;
      g[2] = a.z;
      g[6] = b.z;
      g[10] = c.z;
      return this;
    };
  }(),
  multiply: function(a, b) {
    return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
  },
  multiplyMatrices: function(a, b) {
    var c = a.elements,
        d = b.elements,
        e = this.elements,
        f = c[0],
        g = c[4],
        h = c[8],
        k = c[12],
        n = c[1],
        p = c[5],
        q = c[9],
        m = c[13],
        t = c[2],
        s = c[6],
        r = c[10],
        u = c[14],
        v = c[3],
        y = c[7],
        C = c[11],
        c = c[15],
        x = d[0],
        F = d[4],
        z = d[8],
        G = d[12],
        E = d[1],
        w = d[5],
        D = d[9],
        A = d[13],
        U = d[2],
        M = d[6],
        K = d[10],
        L = d[14],
        N = d[3],
        T = d[7],
        Q = d[11],
        d = d[15];
    e[0] = f * x + g * E + h * U + k * N;
    e[4] = f * F + g * w + h * M + k * T;
    e[8] = f * z + g * D + h * K + k * Q;
    e[12] = f * G + g * A + h * L + k * d;
    e[1] = n * x + p * E + q * U + m * N;
    e[5] = n * F + p * w + q * M + m * T;
    e[9] = n * z + p * D + q * K + m * Q;
    e[13] = n * G + p * A + q * L + m * d;
    e[2] = t * x + s * E + r * U + u * N;
    e[6] = t * F + s * w + r * M + u * T;
    e[10] = t * z + s * D + r * K + u * Q;
    e[14] = t * G + s * A + r * L + u * d;
    e[3] = v * x + y * E + C * U + c * N;
    e[7] = v * F + y * w + C * M + c * T;
    e[11] = v * z + y * D + C * K + c * Q;
    e[15] = v * G + y * A + C * L + c * d;
    return this;
  },
  multiplyToArray: function(a, b, c) {
    var d = this.elements;
    this.multiplyMatrices(a, b);
    c[0] = d[0];
    c[1] = d[1];
    c[2] = d[2];
    c[3] = d[3];
    c[4] = d[4];
    c[5] = d[5];
    c[6] = d[6];
    c[7] = d[7];
    c[8] = d[8];
    c[9] = d[9];
    c[10] = d[10];
    c[11] = d[11];
    c[12] = d[12];
    c[13] = d[13];
    c[14] = d[14];
    c[15] = d[15];
    return this;
  },
  multiplyScalar: function(a) {
    var b = this.elements;
    b[0] *= a;
    b[4] *= a;
    b[8] *= a;
    b[12] *= a;
    b[1] *= a;
    b[5] *= a;
    b[9] *= a;
    b[13] *= a;
    b[2] *= a;
    b[6] *= a;
    b[10] *= a;
    b[14] *= a;
    b[3] *= a;
    b[7] *= a;
    b[11] *= a;
    b[15] *= a;
    return this;
  },
  multiplyVector3: function(a) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
    return a.applyProjection(this);
  },
  multiplyVector4: function(a) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  },
  multiplyVector3Array: function(a) {
    console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
    return this.applyToVector3Array(a);
  },
  applyToVector3Array: function() {
    var a = new THREE.Vector3;
    return function(b, c, d) {
      void 0 === c && (c = 0);
      void 0 === d && (d = b.length);
      for (var e = 0; e < d; e += 3, c += 3)
        a.x = b[c], a.y = b[c + 1], a.z = b[c + 2], a.applyMatrix4(this), b[c] = a.x, b[c + 1] = a.y, b[c + 2] = a.z;
      return b;
    };
  }(),
  rotateAxis: function(a) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    a.transformDirection(this);
  },
  crossVector: function(a) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return a.applyMatrix4(this);
  },
  determinant: function() {
    var a = this.elements,
        b = a[0],
        c = a[4],
        d = a[8],
        e = a[12],
        f = a[1],
        g = a[5],
        h = a[9],
        k = a[13],
        n = a[2],
        p = a[6],
        q = a[10],
        m = a[14];
    return a[3] * (+e * h * p - d * k * p - e * g * q + c * k * q + d * g * m - c * h * m) + a[7] * (+b * h * m - b * k * q + e * f * q - d * f * m + d * k * n - e * h * n) + a[11] * (+b * k * p - b * g * m - e * f * p + c * f * m + e * g * n - c * k * n) + a[15] * (-d * g * n - b * h * p + b * g * q + d * f * p - c * f * q + c * h * n);
  },
  transpose: function() {
    var a = this.elements,
        b;
    b = a[1];
    a[1] = a[4];
    a[4] = b;
    b = a[2];
    a[2] = a[8];
    a[8] = b;
    b = a[6];
    a[6] = a[9];
    a[9] = b;
    b = a[3];
    a[3] = a[12];
    a[12] = b;
    b = a[7];
    a[7] = a[13];
    a[13] = b;
    b = a[11];
    a[11] = a[14];
    a[14] = b;
    return this;
  },
  flattenToArrayOffset: function(a, b) {
    var c = this.elements;
    a[b] = c[0];
    a[b + 1] = c[1];
    a[b + 2] = c[2];
    a[b + 3] = c[3];
    a[b + 4] = c[4];
    a[b + 5] = c[5];
    a[b + 6] = c[6];
    a[b + 7] = c[7];
    a[b + 8] = c[8];
    a[b + 9] = c[9];
    a[b + 10] = c[10];
    a[b + 11] = c[11];
    a[b + 12] = c[12];
    a[b + 13] = c[13];
    a[b + 14] = c[14];
    a[b + 15] = c[15];
    return a;
  },
  getPosition: function() {
    var a = new THREE.Vector3;
    return function() {
      console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
      var b = this.elements;
      return a.set(b[12], b[13], b[14]);
    };
  }(),
  setPosition: function(a) {
    var b = this.elements;
    b[12] = a.x;
    b[13] = a.y;
    b[14] = a.z;
    return this;
  },
  getInverse: function(a, b) {
    var c = this.elements,
        d = a.elements,
        e = d[0],
        f = d[4],
        g = d[8],
        h = d[12],
        k = d[1],
        n = d[5],
        p = d[9],
        q = d[13],
        m = d[2],
        t = d[6],
        s = d[10],
        r = d[14],
        u = d[3],
        v = d[7],
        y = d[11],
        d = d[15];
    c[0] = p * r * v - q * s * v + q * t * y - n * r * y - p * t * d + n * s * d;
    c[4] = h * s * v - g * r * v - h * t * y + f * r * y + g * t * d - f * s * d;
    c[8] = g * q * v - h * p * v + h * n * y - f * q * y - g * n * d + f * p * d;
    c[12] = h * p * t - g * q * t - h * n * s + f * q * s + g * n * r - f * p * r;
    c[1] = q * s * u - p * r * u - q * m * y + k * r * y + p * m * d - k * s * d;
    c[5] = g * r * u - h * s * u + h * m * y - e * r * y - g * m * d + e * s * d;
    c[9] = h * p * u - g * q * u - h * k * y + e * q * y + g * k * d - e * p * d;
    c[13] = g * q * m - h * p * m + h * k * s - e * q * s - g * k * r + e * p * r;
    c[2] = n * r * u - q * t * u + q * m * v - k * r * v - n * m * d + k * t * d;
    c[6] = h * t * u - f * r * u - h * m * v + e * r * v + f * m * d - e * t * d;
    c[10] = f * q * u - h * n * u + h * k * v - e * q * v - f * k * d + e * n * d;
    c[14] = h * n * m - f * q * m - h * k * t + e * q * t + f * k * r - e * n * r;
    c[3] = p * t * u - n * s * u - p * m * v + k * s * v + n * m * y - k * t * y;
    c[7] = f * s * u - g * t * u + g * m * v - e * s * v - f * m * y + e * t * y;
    c[11] = g * n * u - f * p * u - g * k * v + e * p * v + f * k * y - e * n * y;
    c[15] = f * p * m - g * n * m + g * k * t - e * p * t - f * k * s + e * n * s;
    c = e * c[0] + k * c[4] + m * c[8] + u * c[12];
    if (0 == c) {
      if (b)
        throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");
      console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0");
      this.identity();
      return this;
    }
    this.multiplyScalar(1 / c);
    return this;
  },
  translate: function(a) {
    console.warn("THREE.Matrix4: .translate() has been removed.");
  },
  rotateX: function(a) {
    console.warn("THREE.Matrix4: .rotateX() has been removed.");
  },
  rotateY: function(a) {
    console.warn("THREE.Matrix4: .rotateY() has been removed.");
  },
  rotateZ: function(a) {
    console.warn("THREE.Matrix4: .rotateZ() has been removed.");
  },
  rotateByAxis: function(a, b) {
    console.warn("THREE.Matrix4: .rotateByAxis() has been removed.");
  },
  scale: function(a) {
    var b = this.elements,
        c = a.x,
        d = a.y;
    a = a.z;
    b[0] *= c;
    b[4] *= d;
    b[8] *= a;
    b[1] *= c;
    b[5] *= d;
    b[9] *= a;
    b[2] *= c;
    b[6] *= d;
    b[10] *= a;
    b[3] *= c;
    b[7] *= d;
    b[11] *= a;
    return this;
  },
  getMaxScaleOnAxis: function() {
    var a = this.elements;
    return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], Math.max(a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10])));
  },
  makeTranslation: function(a, b, c) {
    this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);
    return this;
  },
  makeRotationX: function(a) {
    var b = Math.cos(a);
    a = Math.sin(a);
    this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);
    return this;
  },
  makeRotationY: function(a) {
    var b = Math.cos(a);
    a = Math.sin(a);
    this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);
    return this;
  },
  makeRotationZ: function(a) {
    var b = Math.cos(a);
    a = Math.sin(a);
    this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  },
  makeRotationAxis: function(a, b) {
    var c = Math.cos(b),
        d = Math.sin(b),
        e = 1 - c,
        f = a.x,
        g = a.y,
        h = a.z,
        k = e * f,
        n = e * g;
    this.set(k * f + c, k * g - d * h, k * h + d * g, 0, k * g + d * h, n * g + c, n * h - d * f, 0, k * h - d * g, n * h + d * f, e * h * h + c, 0, 0, 0, 0, 1);
    return this;
  },
  makeScale: function(a, b, c) {
    this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);
    return this;
  },
  compose: function(a, b, c) {
    this.makeRotationFromQuaternion(b);
    this.scale(c);
    this.setPosition(a);
    return this;
  },
  decompose: function() {
    var a = new THREE.Vector3,
        b = new THREE.Matrix4;
    return function(c, d, e) {
      var f = this.elements,
          g = a.set(f[0], f[1], f[2]).length(),
          h = a.set(f[4], f[5], f[6]).length(),
          k = a.set(f[8], f[9], f[10]).length();
      0 > this.determinant() && (g = -g);
      c.x = f[12];
      c.y = f[13];
      c.z = f[14];
      b.elements.set(this.elements);
      c = 1 / g;
      var f = 1 / h,
          n = 1 / k;
      b.elements[0] *= c;
      b.elements[1] *= c;
      b.elements[2] *= c;
      b.elements[4] *= f;
      b.elements[5] *= f;
      b.elements[6] *= f;
      b.elements[8] *= n;
      b.elements[9] *= n;
      b.elements[10] *= n;
      d.setFromRotationMatrix(b);
      e.x = g;
      e.y = h;
      e.z = k;
      return this;
    };
  }(),
  makeFrustum: function(a, b, c, d, e, f) {
    var g = this.elements;
    g[0] = 2 * e / (b - a);
    g[4] = 0;
    g[8] = (b + a) / (b - a);
    g[12] = 0;
    g[1] = 0;
    g[5] = 2 * e / (d - c);
    g[9] = (d + c) / (d - c);
    g[13] = 0;
    g[2] = 0;
    g[6] = 0;
    g[10] = -(f + e) / (f - e);
    g[14] = -2 * f * e / (f - e);
    g[3] = 0;
    g[7] = 0;
    g[11] = -1;
    g[15] = 0;
    return this;
  },
  makePerspective: function(a, b, c, d) {
    a = c * Math.tan(THREE.Math.degToRad(.5 * a));
    var e = -a;
    return this.makeFrustum(e * b, a * b, e, a, c, d);
  },
  makeOrthographic: function(a, b, c, d, e, f) {
    var g = this.elements,
        h = b - a,
        k = c - d,
        n = f - e;
    g[0] = 2 / h;
    g[4] = 0;
    g[8] = 0;
    g[12] = -((b + a) / h);
    g[1] = 0;
    g[5] = 2 / k;
    g[9] = 0;
    g[13] = -((c + d) / k);
    g[2] = 0;
    g[6] = 0;
    g[10] = -2 / n;
    g[14] = -((f + e) / n);
    g[3] = 0;
    g[7] = 0;
    g[11] = 0;
    g[15] = 1;
    return this;
  },
  fromArray: function(a) {
    this.elements.set(a);
    return this;
  },
  toArray: function() {
    var a = this.elements;
    return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]];
  },
  clone: function() {
    return (new THREE.Matrix4).fromArray(this.elements);
  }
};
THREE.Ray = function(a, b) {
  this.origin = void 0 !== a ? a : new THREE.Vector3;
  this.direction = void 0 !== b ? b : new THREE.Vector3;
};
THREE.Ray.prototype = {
  constructor: THREE.Ray,
  set: function(a, b) {
    this.origin.copy(a);
    this.direction.copy(b);
    return this;
  },
  copy: function(a) {
    this.origin.copy(a.origin);
    this.direction.copy(a.direction);
    return this;
  },
  at: function(a, b) {
    return (b || new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin);
  },
  recast: function() {
    var a = new THREE.Vector3;
    return function(b) {
      this.origin.copy(this.at(b, a));
      return this;
    };
  }(),
  closestPointToPoint: function(a, b) {
    var c = b || new THREE.Vector3;
    c.subVectors(a, this.origin);
    var d = c.dot(this.direction);
    return 0 > d ? c.copy(this.origin) : c.copy(this.direction).multiplyScalar(d).add(this.origin);
  },
  distanceToPoint: function() {
    var a = new THREE.Vector3;
    return function(b) {
      var c = a.subVectors(b, this.origin).dot(this.direction);
      if (0 > c)
        return this.origin.distanceTo(b);
      a.copy(this.direction).multiplyScalar(c).add(this.origin);
      return a.distanceTo(b);
    };
  }(),
  distanceSqToSegment: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3,
        c = new THREE.Vector3;
    return function(d, e, f, g) {
      a.copy(d).add(e).multiplyScalar(.5);
      b.copy(e).sub(d).normalize();
      c.copy(this.origin).sub(a);
      var h = .5 * d.distanceTo(e),
          k = -this.direction.dot(b),
          n = c.dot(this.direction),
          p = -c.dot(b),
          q = c.lengthSq(),
          m = Math.abs(1 - k * k),
          t;
      0 < m ? (d = k * p - n, e = k * n - p, t = h * m, 0 <= d ? e >= -t ? e <= t ? (h = 1 / m, d *= h, e *= h, k = d * (d + k * e + 2 * n) + e * (k * d + e + 2 * p) + q) : (e = h, d = Math.max(0, -(k * e + n)), k = -d * d + e * (e + 2 * p) + q) : (e = -h, d = Math.max(0, -(k * e + n)), k = -d * d + e * (e + 2 * p) + q) : e <= -t ? (d = Math.max(0, -(-k * h + n)), e = 0 < d ? -h : Math.min(Math.max(-h, -p), h), k = -d * d + e * (e + 2 * p) + q) : e <= t ? (d = 0, e = Math.min(Math.max(-h, -p), h), k = e * (e + 2 * p) + q) : (d = Math.max(0, -(k * h + n)), e = 0 < d ? h : Math.min(Math.max(-h, -p), h), k = -d * d + e * (e + 2 * p) + q)) : (e = 0 < k ? -h : h, d = Math.max(0, -(k * e + n)), k = -d * d + e * (e + 2 * p) + q);
      f && f.copy(this.direction).multiplyScalar(d).add(this.origin);
      g && g.copy(b).multiplyScalar(e).add(a);
      return k;
    };
  }(),
  isIntersectionSphere: function(a) {
    return this.distanceToPoint(a.center) <= a.radius;
  },
  intersectSphere: function() {
    var a = new THREE.Vector3;
    return function(b, c) {
      a.subVectors(b.center, this.origin);
      var d = a.dot(this.direction),
          e = a.dot(a) - d * d,
          f = b.radius * b.radius;
      if (e > f)
        return null;
      f = Math.sqrt(f - e);
      e = d - f;
      d += f;
      return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
    };
  }(),
  isIntersectionPlane: function(a) {
    var b = a.distanceToPoint(this.origin);
    return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
  },
  distanceToPlane: function(a) {
    var b = a.normal.dot(this.direction);
    if (0 == b)
      return 0 == a.distanceToPoint(this.origin) ? 0 : null;
    a = -(this.origin.dot(a.normal) + a.constant) / b;
    return 0 <= a ? a : null;
  },
  intersectPlane: function(a, b) {
    var c = this.distanceToPlane(a);
    return null === c ? null : this.at(c, b);
  },
  isIntersectionBox: function() {
    var a = new THREE.Vector3;
    return function(b) {
      return null !== this.intersectBox(b, a);
    };
  }(),
  intersectBox: function(a, b) {
    var c,
        d,
        e,
        f,
        g;
    d = 1 / this.direction.x;
    f = 1 / this.direction.y;
    g = 1 / this.direction.z;
    var h = this.origin;
    0 <= d ? (c = (a.min.x - h.x) * d, d *= a.max.x - h.x) : (c = (a.max.x - h.x) * d, d *= a.min.x - h.x);
    0 <= f ? (e = (a.min.y - h.y) * f, f *= a.max.y - h.y) : (e = (a.max.y - h.y) * f, f *= a.min.y - h.y);
    if (c > f || e > d)
      return null;
    if (e > c || c !== c)
      c = e;
    if (f < d || d !== d)
      d = f;
    0 <= g ? (e = (a.min.z - h.z) * g, g *= a.max.z - h.z) : (e = (a.max.z - h.z) * g, g *= a.min.z - h.z);
    if (c > g || e > d)
      return null;
    if (e > c || c !== c)
      c = e;
    if (g < d || d !== d)
      d = g;
    return 0 > d ? null : this.at(0 <= c ? c : d, b);
  },
  intersectTriangle: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3,
        c = new THREE.Vector3,
        d = new THREE.Vector3;
    return function(e, f, g, h, k) {
      b.subVectors(f, e);
      c.subVectors(g, e);
      d.crossVectors(b, c);
      f = this.direction.dot(d);
      if (0 < f) {
        if (h)
          return null;
        h = 1;
      } else if (0 > f)
        h = -1, f = -f;
      else
        return null;
      a.subVectors(this.origin, e);
      e = h * this.direction.dot(c.crossVectors(a, c));
      if (0 > e)
        return null;
      g = h * this.direction.dot(b.cross(a));
      if (0 > g || e + g > f)
        return null;
      e = -h * a.dot(d);
      return 0 > e ? null : this.at(e / f, k);
    };
  }(),
  applyMatrix4: function(a) {
    this.direction.add(this.origin).applyMatrix4(a);
    this.origin.applyMatrix4(a);
    this.direction.sub(this.origin);
    this.direction.normalize();
    return this;
  },
  equals: function(a) {
    return a.origin.equals(this.origin) && a.direction.equals(this.direction);
  },
  clone: function() {
    return (new THREE.Ray).copy(this);
  }
};
THREE.Sphere = function(a, b) {
  this.center = void 0 !== a ? a : new THREE.Vector3;
  this.radius = void 0 !== b ? b : 0;
};
THREE.Sphere.prototype = {
  constructor: THREE.Sphere,
  set: function(a, b) {
    this.center.copy(a);
    this.radius = b;
    return this;
  },
  setFromPoints: function() {
    var a = new THREE.Box3;
    return function(b, c) {
      var d = this.center;
      void 0 !== c ? d.copy(c) : a.setFromPoints(b).center(d);
      for (var e = 0,
          f = 0,
          g = b.length; f < g; f++)
        e = Math.max(e, d.distanceToSquared(b[f]));
      this.radius = Math.sqrt(e);
      return this;
    };
  }(),
  copy: function(a) {
    this.center.copy(a.center);
    this.radius = a.radius;
    return this;
  },
  empty: function() {
    return 0 >= this.radius;
  },
  containsPoint: function(a) {
    return a.distanceToSquared(this.center) <= this.radius * this.radius;
  },
  distanceToPoint: function(a) {
    return a.distanceTo(this.center) - this.radius;
  },
  intersectsSphere: function(a) {
    var b = this.radius + a.radius;
    return a.center.distanceToSquared(this.center) <= b * b;
  },
  clampPoint: function(a, b) {
    var c = this.center.distanceToSquared(a),
        d = b || new THREE.Vector3;
    d.copy(a);
    c > this.radius * this.radius && (d.sub(this.center).normalize(), d.multiplyScalar(this.radius).add(this.center));
    return d;
  },
  getBoundingBox: function(a) {
    a = a || new THREE.Box3;
    a.set(this.center, this.center);
    a.expandByScalar(this.radius);
    return a;
  },
  applyMatrix4: function(a) {
    this.center.applyMatrix4(a);
    this.radius *= a.getMaxScaleOnAxis();
    return this;
  },
  translate: function(a) {
    this.center.add(a);
    return this;
  },
  equals: function(a) {
    return a.center.equals(this.center) && a.radius === this.radius;
  },
  clone: function() {
    return (new THREE.Sphere).copy(this);
  }
};
THREE.Frustum = function(a, b, c, d, e, f) {
  this.planes = [void 0 !== a ? a : new THREE.Plane, void 0 !== b ? b : new THREE.Plane, void 0 !== c ? c : new THREE.Plane, void 0 !== d ? d : new THREE.Plane, void 0 !== e ? e : new THREE.Plane, void 0 !== f ? f : new THREE.Plane];
};
THREE.Frustum.prototype = {
  constructor: THREE.Frustum,
  set: function(a, b, c, d, e, f) {
    var g = this.planes;
    g[0].copy(a);
    g[1].copy(b);
    g[2].copy(c);
    g[3].copy(d);
    g[4].copy(e);
    g[5].copy(f);
    return this;
  },
  copy: function(a) {
    for (var b = this.planes,
        c = 0; 6 > c; c++)
      b[c].copy(a.planes[c]);
    return this;
  },
  setFromMatrix: function(a) {
    var b = this.planes,
        c = a.elements;
    a = c[0];
    var d = c[1],
        e = c[2],
        f = c[3],
        g = c[4],
        h = c[5],
        k = c[6],
        n = c[7],
        p = c[8],
        q = c[9],
        m = c[10],
        t = c[11],
        s = c[12],
        r = c[13],
        u = c[14],
        c = c[15];
    b[0].setComponents(f - a, n - g, t - p, c - s).normalize();
    b[1].setComponents(f + a, n + g, t + p, c + s).normalize();
    b[2].setComponents(f + d, n + h, t + q, c + r).normalize();
    b[3].setComponents(f - d, n - h, t - q, c - r).normalize();
    b[4].setComponents(f - e, n - k, t - m, c - u).normalize();
    b[5].setComponents(f + e, n + k, t + m, c + u).normalize();
    return this;
  },
  intersectsObject: function() {
    var a = new THREE.Sphere;
    return function(b) {
      var c = b.geometry;
      null === c.boundingSphere && c.computeBoundingSphere();
      a.copy(c.boundingSphere);
      a.applyMatrix4(b.matrixWorld);
      return this.intersectsSphere(a);
    };
  }(),
  intersectsSphere: function(a) {
    var b = this.planes,
        c = a.center;
    a = -a.radius;
    for (var d = 0; 6 > d; d++)
      if (b[d].distanceToPoint(c) < a)
        return !1;
    return !0;
  },
  intersectsBox: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3;
    return function(c) {
      for (var d = this.planes,
          e = 0; 6 > e; e++) {
        var f = d[e];
        a.x = 0 < f.normal.x ? c.min.x : c.max.x;
        b.x = 0 < f.normal.x ? c.max.x : c.min.x;
        a.y = 0 < f.normal.y ? c.min.y : c.max.y;
        b.y = 0 < f.normal.y ? c.max.y : c.min.y;
        a.z = 0 < f.normal.z ? c.min.z : c.max.z;
        b.z = 0 < f.normal.z ? c.max.z : c.min.z;
        var g = f.distanceToPoint(a),
            f = f.distanceToPoint(b);
        if (0 > g && 0 > f)
          return !1;
      }
      return !0;
    };
  }(),
  containsPoint: function(a) {
    for (var b = this.planes,
        c = 0; 6 > c; c++)
      if (0 > b[c].distanceToPoint(a))
        return !1;
    return !0;
  },
  clone: function() {
    return (new THREE.Frustum).copy(this);
  }
};
THREE.Plane = function(a, b) {
  this.normal = void 0 !== a ? a : new THREE.Vector3(1, 0, 0);
  this.constant = void 0 !== b ? b : 0;
};
THREE.Plane.prototype = {
  constructor: THREE.Plane,
  set: function(a, b) {
    this.normal.copy(a);
    this.constant = b;
    return this;
  },
  setComponents: function(a, b, c, d) {
    this.normal.set(a, b, c);
    this.constant = d;
    return this;
  },
  setFromNormalAndCoplanarPoint: function(a, b) {
    this.normal.copy(a);
    this.constant = -b.dot(this.normal);
    return this;
  },
  setFromCoplanarPoints: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3;
    return function(c, d, e) {
      d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();
      this.setFromNormalAndCoplanarPoint(d, c);
      return this;
    };
  }(),
  copy: function(a) {
    this.normal.copy(a.normal);
    this.constant = a.constant;
    return this;
  },
  normalize: function() {
    var a = 1 / this.normal.length();
    this.normal.multiplyScalar(a);
    this.constant *= a;
    return this;
  },
  negate: function() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  },
  distanceToPoint: function(a) {
    return this.normal.dot(a) + this.constant;
  },
  distanceToSphere: function(a) {
    return this.distanceToPoint(a.center) - a.radius;
  },
  projectPoint: function(a, b) {
    return this.orthoPoint(a, b).sub(a).negate();
  },
  orthoPoint: function(a, b) {
    var c = this.distanceToPoint(a);
    return (b || new THREE.Vector3).copy(this.normal).multiplyScalar(c);
  },
  isIntersectionLine: function(a) {
    var b = this.distanceToPoint(a.start);
    a = this.distanceToPoint(a.end);
    return 0 > b && 0 < a || 0 > a && 0 < b;
  },
  intersectLine: function() {
    var a = new THREE.Vector3;
    return function(b, c) {
      var d = c || new THREE.Vector3,
          e = b.delta(a),
          f = this.normal.dot(e);
      if (0 == f) {
        if (0 == this.distanceToPoint(b.start))
          return d.copy(b.start);
      } else
        return f = -(b.start.dot(this.normal) + this.constant) / f, 0 > f || 1 < f ? void 0 : d.copy(e).multiplyScalar(f).add(b.start);
    };
  }(),
  coplanarPoint: function(a) {
    return (a || new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant);
  },
  applyMatrix4: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3,
        c = new THREE.Matrix3;
    return function(d, e) {
      var f = e || c.getNormalMatrix(d),
          f = a.copy(this.normal).applyMatrix3(f),
          g = this.coplanarPoint(b);
      g.applyMatrix4(d);
      this.setFromNormalAndCoplanarPoint(f, g);
      return this;
    };
  }(),
  translate: function(a) {
    this.constant -= a.dot(this.normal);
    return this;
  },
  equals: function(a) {
    return a.normal.equals(this.normal) && a.constant == this.constant;
  },
  clone: function() {
    return (new THREE.Plane).copy(this);
  }
};
THREE.Math = {
  generateUUID: function() {
    var a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
        b = Array(36),
        c = 0,
        d;
    return function() {
      for (var e = 0; 36 > e; e++)
        8 == e || 13 == e || 18 == e || 23 == e ? b[e] = "-" : 14 == e ? b[e] = "4" : (2 >= c && (c = 33554432 + 16777216 * Math.random() | 0), d = c & 15, c >>= 4, b[e] = a[19 == e ? d & 3 | 8 : d]);
      return b.join("");
    };
  }(),
  clamp: function(a, b, c) {
    return a < b ? b : a > c ? c : a;
  },
  clampBottom: function(a, b) {
    return a < b ? b : a;
  },
  mapLinear: function(a, b, c, d, e) {
    return d + (a - b) * (e - d) / (c - b);
  },
  smoothstep: function(a, b, c) {
    if (a <= b)
      return 0;
    if (a >= c)
      return 1;
    a = (a - b) / (c - b);
    return a * a * (3 - 2 * a);
  },
  smootherstep: function(a, b, c) {
    if (a <= b)
      return 0;
    if (a >= c)
      return 1;
    a = (a - b) / (c - b);
    return a * a * a * (a * (6 * a - 15) + 10);
  },
  random16: function() {
    return (65280 * Math.random() + 255 * Math.random()) / 65535;
  },
  randInt: function(a, b) {
    return Math.floor(this.randFloat(a, b));
  },
  randFloat: function(a, b) {
    return a + Math.random() * (b - a);
  },
  randFloatSpread: function(a) {
    return a * (.5 - Math.random());
  },
  degToRad: function() {
    var a = Math.PI / 180;
    return function(b) {
      return b * a;
    };
  }(),
  radToDeg: function() {
    var a = 180 / Math.PI;
    return function(b) {
      return b * a;
    };
  }(),
  isPowerOfTwo: function(a) {
    return 0 === (a & a - 1) && 0 !== a;
  }
};
THREE.Spline = function(a) {
  function b(a, b, c, d, e, f, g) {
    a = .5 * (c - a);
    d = .5 * (d - b);
    return (2 * (b - c) + a + d) * g + (-3 * (b - c) - 2 * a - d) * f + a * e + b;
  }
  this.points = a;
  var c = [],
      d = {
        x: 0,
        y: 0,
        z: 0
      },
      e,
      f,
      g,
      h,
      k,
      n,
      p,
      q,
      m;
  this.initFromArray = function(a) {
    this.points = [];
    for (var b = 0; b < a.length; b++)
      this.points[b] = {
        x: a[b][0],
        y: a[b][1],
        z: a[b][2]
      };
  };
  this.getPoint = function(a) {
    e = (this.points.length - 1) * a;
    f = Math.floor(e);
    g = e - f;
    c[0] = 0 === f ? f : f - 1;
    c[1] = f;
    c[2] = f > this.points.length - 2 ? this.points.length - 1 : f + 1;
    c[3] = f > this.points.length - 3 ? this.points.length - 1 : f + 2;
    n = this.points[c[0]];
    p = this.points[c[1]];
    q = this.points[c[2]];
    m = this.points[c[3]];
    h = g * g;
    k = g * h;
    d.x = b(n.x, p.x, q.x, m.x, g, h, k);
    d.y = b(n.y, p.y, q.y, m.y, g, h, k);
    d.z = b(n.z, p.z, q.z, m.z, g, h, k);
    return d;
  };
  this.getControlPointsArray = function() {
    var a,
        b,
        c = this.points.length,
        d = [];
    for (a = 0; a < c; a++)
      b = this.points[a], d[a] = [b.x, b.y, b.z];
    return d;
  };
  this.getLength = function(a) {
    var b,
        c,
        d,
        e = b = b = 0,
        f = new THREE.Vector3,
        g = new THREE.Vector3,
        h = [],
        k = 0;
    h[0] = 0;
    a || (a = 100);
    c = this.points.length * a;
    f.copy(this.points[0]);
    for (a = 1; a < c; a++)
      b = a / c, d = this.getPoint(b), g.copy(d), k += g.distanceTo(f), f.copy(d), b *= this.points.length - 1, b = Math.floor(b), b != e && (h[b] = k, e = b);
    h[h.length] = k;
    return {
      chunks: h,
      total: k
    };
  };
  this.reparametrizeByArcLength = function(a) {
    var b,
        c,
        d,
        e,
        f,
        g,
        h = [],
        k = new THREE.Vector3,
        m = this.getLength();
    h.push(k.copy(this.points[0]).clone());
    for (b = 1; b < this.points.length; b++) {
      c = m.chunks[b] - m.chunks[b - 1];
      g = Math.ceil(a * c / m.total);
      e = (b - 1) / (this.points.length - 1);
      f = b / (this.points.length - 1);
      for (c = 1; c < g - 1; c++)
        d = e + 1 / g * c * (f - e), d = this.getPoint(d), h.push(k.copy(d).clone());
      h.push(k.copy(this.points[b]).clone());
    }
    this.points = h;
  };
};
THREE.Triangle = function(a, b, c) {
  this.a = void 0 !== a ? a : new THREE.Vector3;
  this.b = void 0 !== b ? b : new THREE.Vector3;
  this.c = void 0 !== c ? c : new THREE.Vector3;
};
THREE.Triangle.normal = function() {
  var a = new THREE.Vector3;
  return function(b, c, d, e) {
    e = e || new THREE.Vector3;
    e.subVectors(d, c);
    a.subVectors(b, c);
    e.cross(a);
    b = e.lengthSq();
    return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
  };
}();
THREE.Triangle.barycoordFromPoint = function() {
  var a = new THREE.Vector3,
      b = new THREE.Vector3,
      c = new THREE.Vector3;
  return function(d, e, f, g, h) {
    a.subVectors(g, e);
    b.subVectors(f, e);
    c.subVectors(d, e);
    d = a.dot(a);
    e = a.dot(b);
    f = a.dot(c);
    var k = b.dot(b);
    g = b.dot(c);
    var n = d * k - e * e;
    h = h || new THREE.Vector3;
    if (0 == n)
      return h.set(-2, -1, -1);
    n = 1 / n;
    k = (k * f - e * g) * n;
    d = (d * g - e * f) * n;
    return h.set(1 - k - d, d, k);
  };
}();
THREE.Triangle.containsPoint = function() {
  var a = new THREE.Vector3;
  return function(b, c, d, e) {
    b = THREE.Triangle.barycoordFromPoint(b, c, d, e, a);
    return 0 <= b.x && 0 <= b.y && 1 >= b.x + b.y;
  };
}();
THREE.Triangle.prototype = {
  constructor: THREE.Triangle,
  set: function(a, b, c) {
    this.a.copy(a);
    this.b.copy(b);
    this.c.copy(c);
    return this;
  },
  setFromPointsAndIndices: function(a, b, c, d) {
    this.a.copy(a[b]);
    this.b.copy(a[c]);
    this.c.copy(a[d]);
    return this;
  },
  copy: function(a) {
    this.a.copy(a.a);
    this.b.copy(a.b);
    this.c.copy(a.c);
    return this;
  },
  area: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3;
    return function() {
      a.subVectors(this.c, this.b);
      b.subVectors(this.a, this.b);
      return .5 * a.cross(b).length();
    };
  }(),
  midpoint: function(a) {
    return (a || new THREE.Vector3).addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  },
  normal: function(a) {
    return THREE.Triangle.normal(this.a, this.b, this.c, a);
  },
  plane: function(a) {
    return (a || new THREE.Plane).setFromCoplanarPoints(this.a, this.b, this.c);
  },
  barycoordFromPoint: function(a, b) {
    return THREE.Triangle.barycoordFromPoint(a, this.a, this.b, this.c, b);
  },
  containsPoint: function(a) {
    return THREE.Triangle.containsPoint(a, this.a, this.b, this.c);
  },
  equals: function(a) {
    return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
  },
  clone: function() {
    return (new THREE.Triangle).copy(this);
  }
};
THREE.Clock = function(a) {
  this.autoStart = void 0 !== a ? a : !0;
  this.elapsedTime = this.oldTime = this.startTime = 0;
  this.running = !1;
};
THREE.Clock.prototype = {
  constructor: THREE.Clock,
  start: function() {
    this.oldTime = this.startTime = void 0 !== self.performance && void 0 !== self.performance.now ? self.performance.now() : Date.now();
    this.running = !0;
  },
  stop: function() {
    this.getElapsedTime();
    this.running = !1;
  },
  getElapsedTime: function() {
    this.getDelta();
    return this.elapsedTime;
  },
  getDelta: function() {
    var a = 0;
    this.autoStart && !this.running && this.start();
    if (this.running) {
      var b = void 0 !== self.performance && void 0 !== self.performance.now ? self.performance.now() : Date.now(),
          a = .001 * (b - this.oldTime);
      this.oldTime = b;
      this.elapsedTime += a;
    }
    return a;
  }
};
THREE.EventDispatcher = function() {};
THREE.EventDispatcher.prototype = {
  constructor: THREE.EventDispatcher,
  apply: function(a) {
    a.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
    a.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
    a.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
    a.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;
  },
  addEventListener: function(a, b) {
    void 0 === this._listeners && (this._listeners = {});
    var c = this._listeners;
    void 0 === c[a] && (c[a] = []);
    -1 === c[a].indexOf(b) && c[a].push(b);
  },
  hasEventListener: function(a, b) {
    if (void 0 === this._listeners)
      return !1;
    var c = this._listeners;
    return void 0 !== c[a] && -1 !== c[a].indexOf(b) ? !0 : !1;
  },
  removeEventListener: function(a, b) {
    if (void 0 !== this._listeners) {
      var c = this._listeners[a];
      if (void 0 !== c) {
        var d = c.indexOf(b);
        -1 !== d && c.splice(d, 1);
      }
    }
  },
  dispatchEvent: function(a) {
    if (void 0 !== this._listeners) {
      var b = this._listeners[a.type];
      if (void 0 !== b) {
        a.target = this;
        for (var c = [],
            d = b.length,
            e = 0; e < d; e++)
          c[e] = b[e];
        for (e = 0; e < d; e++)
          c[e].call(this, a);
      }
    }
  }
};
(function(a) {
  a.Raycaster = function(b, c, f, g) {
    this.ray = new a.Ray(b, c);
    this.near = f || 0;
    this.far = g || Infinity;
    this.params = {
      Sprite: {},
      Mesh: {},
      PointCloud: {threshold: 1},
      LOD: {},
      Line: {}
    };
  };
  var b = function(a, b) {
    return a.distance - b.distance;
  },
      c = function(a, b, f, g) {
        a.raycast(b, f);
        if (!0 === g) {
          a = a.children;
          g = 0;
          for (var h = a.length; g < h; g++)
            c(a[g], b, f, !0);
        }
      };
  a.Raycaster.prototype = {
    constructor: a.Raycaster,
    precision: 1E-4,
    linePrecision: 1,
    set: function(a, b) {
      this.ray.set(a, b);
    },
    setFromCamera: function(b, c) {
      c instanceof a.PerspectiveCamera ? (this.ray.origin.copy(c.position), this.ray.direction.set(b.x, b.y, .5).unproject(c).sub(c.position).normalize()) : c instanceof a.OrthographicCamera ? (this.ray.origin.set(b.x, b.y, -1).unproject(c), this.ray.direction.set(0, 0, -1).transformDirection(c.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
    },
    intersectObject: function(a, e) {
      var f = [];
      c(a, this, f, e);
      f.sort(b);
      return f;
    },
    intersectObjects: function(a, e) {
      var f = [];
      if (!1 === a instanceof Array)
        return console.log("THREE.Raycaster.intersectObjects: objects is not an Array."), f;
      for (var g = 0,
          h = a.length; g < h; g++)
        c(a[g], this, f, e);
      f.sort(b);
      return f;
    }
  };
})(THREE);
THREE.Object3D = function() {
  Object.defineProperty(this, "id", {value: THREE.Object3DIdCount++});
  this.uuid = THREE.Math.generateUUID();
  this.name = "";
  this.type = "Object3D";
  this.parent = void 0;
  this.children = [];
  this.up = THREE.Object3D.DefaultUp.clone();
  var a = new THREE.Vector3,
      b = new THREE.Euler,
      c = new THREE.Quaternion,
      d = new THREE.Vector3(1, 1, 1);
  b.onChange(function() {
    c.setFromEuler(b, !1);
  });
  c.onChange(function() {
    b.setFromQuaternion(c, void 0, !1);
  });
  Object.defineProperties(this, {
    position: {
      enumerable: !0,
      value: a
    },
    rotation: {
      enumerable: !0,
      value: b
    },
    quaternion: {
      enumerable: !0,
      value: c
    },
    scale: {
      enumerable: !0,
      value: d
    }
  });
  this.rotationAutoUpdate = !0;
  this.matrix = new THREE.Matrix4;
  this.matrixWorld = new THREE.Matrix4;
  this.matrixAutoUpdate = !0;
  this.matrixWorldNeedsUpdate = !1;
  this.visible = !0;
  this.receiveShadow = this.castShadow = !1;
  this.frustumCulled = !0;
  this.userData = {};
};
THREE.Object3D.DefaultUp = new THREE.Vector3(0, 1, 0);
THREE.Object3D.prototype = {
  constructor: THREE.Object3D,
  get eulerOrder() {
    console.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");
    return this.rotation.order;
  },
  set eulerOrder(a) {
    console.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");
    this.rotation.order = a;
  },
  get useQuaternion() {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  },
  set useQuaternion(a) {
    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
  },
  applyMatrix: function(a) {
    this.matrix.multiplyMatrices(a, this.matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  },
  setRotationFromAxisAngle: function(a, b) {
    this.quaternion.setFromAxisAngle(a, b);
  },
  setRotationFromEuler: function(a) {
    this.quaternion.setFromEuler(a, !0);
  },
  setRotationFromMatrix: function(a) {
    this.quaternion.setFromRotationMatrix(a);
  },
  setRotationFromQuaternion: function(a) {
    this.quaternion.copy(a);
  },
  rotateOnAxis: function() {
    var a = new THREE.Quaternion;
    return function(b, c) {
      a.setFromAxisAngle(b, c);
      this.quaternion.multiply(a);
      return this;
    };
  }(),
  rotateX: function() {
    var a = new THREE.Vector3(1, 0, 0);
    return function(b) {
      return this.rotateOnAxis(a, b);
    };
  }(),
  rotateY: function() {
    var a = new THREE.Vector3(0, 1, 0);
    return function(b) {
      return this.rotateOnAxis(a, b);
    };
  }(),
  rotateZ: function() {
    var a = new THREE.Vector3(0, 0, 1);
    return function(b) {
      return this.rotateOnAxis(a, b);
    };
  }(),
  translateOnAxis: function() {
    var a = new THREE.Vector3;
    return function(b, c) {
      a.copy(b).applyQuaternion(this.quaternion);
      this.position.add(a.multiplyScalar(c));
      return this;
    };
  }(),
  translate: function(a, b) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(b, a);
  },
  translateX: function() {
    var a = new THREE.Vector3(1, 0, 0);
    return function(b) {
      return this.translateOnAxis(a, b);
    };
  }(),
  translateY: function() {
    var a = new THREE.Vector3(0, 1, 0);
    return function(b) {
      return this.translateOnAxis(a, b);
    };
  }(),
  translateZ: function() {
    var a = new THREE.Vector3(0, 0, 1);
    return function(b) {
      return this.translateOnAxis(a, b);
    };
  }(),
  localToWorld: function(a) {
    return a.applyMatrix4(this.matrixWorld);
  },
  worldToLocal: function() {
    var a = new THREE.Matrix4;
    return function(b) {
      return b.applyMatrix4(a.getInverse(this.matrixWorld));
    };
  }(),
  lookAt: function() {
    var a = new THREE.Matrix4;
    return function(b) {
      a.lookAt(b, this.position, this.up);
      this.quaternion.setFromRotationMatrix(a);
    };
  }(),
  add: function(a) {
    if (1 < arguments.length) {
      for (var b = 0; b < arguments.length; b++)
        this.add(arguments[b]);
      return this;
    }
    if (a === this)
      return console.error("THREE.Object3D.add:", a, "can't be added as a child of itself."), this;
    a instanceof THREE.Object3D ? (void 0 !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({type: "added"}), this.children.push(a)) : console.error("THREE.Object3D.add:", a, "is not an instance of THREE.Object3D.");
    return this;
  },
  remove: function(a) {
    if (1 < arguments.length)
      for (var b = 0; b < arguments.length; b++)
        this.remove(arguments[b]);
    b = this.children.indexOf(a);
    -1 !== b && (a.parent = void 0, a.dispatchEvent({type: "removed"}), this.children.splice(b, 1));
  },
  getChildByName: function(a, b) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(a, b);
  },
  getObjectById: function(a, b) {
    return this.getObjectByProperty("id", a, b);
  },
  getObjectByName: function(a, b) {
    return this.getObjectByProperty("name", a, b);
  },
  getObjectByProperty: function(a, b, c) {
    if (this[a] === b)
      return this;
    for (var d = 0,
        e = this.children.length; d < e; d++) {
      var f = this.children[d].getObjectByProperty(a, b, c);
      if (void 0 !== f)
        return f;
    }
  },
  getWorldPosition: function(a) {
    a = a || new THREE.Vector3;
    this.updateMatrixWorld(!0);
    return a.setFromMatrixPosition(this.matrixWorld);
  },
  getWorldQuaternion: function() {
    var a = new THREE.Vector3,
        b = new THREE.Vector3;
    return function(c) {
      c = c || new THREE.Quaternion;
      this.updateMatrixWorld(!0);
      this.matrixWorld.decompose(a, c, b);
      return c;
    };
  }(),
  getWorldRotation: function() {
    var a = new THREE.Quaternion;
    return function(b) {
      b = b || new THREE.Euler;
      this.getWorldQuaternion(a);
      return b.setFromQuaternion(a, this.rotation.order, !1);
    };
  }(),
  getWorldScale: function() {
    var a = new THREE.Vector3,
        b = new THREE.Quaternion;
    return function(c) {
      c = c || new THREE.Vector3;
      this.updateMatrixWorld(!0);
      this.matrixWorld.decompose(a, b, c);
      return c;
    };
  }(),
  getWorldDirection: function() {
    var a = new THREE.Quaternion;
    return function(b) {
      b = b || new THREE.Vector3;
      this.getWorldQuaternion(a);
      return b.set(0, 0, 1).applyQuaternion(a);
    };
  }(),
  raycast: function() {},
  traverse: function(a) {
    a(this);
    for (var b = 0,
        c = this.children.length; b < c; b++)
      this.children[b].traverse(a);
  },
  traverseVisible: function(a) {
    if (!1 !== this.visible) {
      a(this);
      for (var b = 0,
          c = this.children.length; b < c; b++)
        this.children[b].traverseVisible(a);
    }
  },
  traverseAncestors: function(a) {
    this.parent && (a(this.parent), this.parent.traverseAncestors(a));
  },
  updateMatrix: function() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = !0;
  },
  updateMatrixWorld: function(a) {
    !0 === this.matrixAutoUpdate && this.updateMatrix();
    if (!0 === this.matrixWorldNeedsUpdate || !0 === a)
      void 0 === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;
    for (var b = 0,
        c = this.children.length; b < c; b++)
      this.children[b].updateMatrixWorld(a);
  },
  toJSON: function() {
    var a = {metadata: {
        version: 4.3,
        type: "Object",
        generator: "ObjectExporter"
      }},
        b = {},
        c = function(c) {
          void 0 === a.geometries && (a.geometries = []);
          if (void 0 === b[c.uuid]) {
            var d = c.toJSON();
            delete d.metadata;
            b[c.uuid] = d;
            a.geometries.push(d);
          }
          return c.uuid;
        },
        d = {},
        e = function(b) {
          void 0 === a.materials && (a.materials = []);
          if (void 0 === d[b.uuid]) {
            var c = b.toJSON();
            delete c.metadata;
            d[b.uuid] = c;
            a.materials.push(c);
          }
          return b.uuid;
        },
        f = function(a) {
          var b = {};
          b.uuid = a.uuid;
          b.type = a.type;
          "" !== a.name && (b.name = a.name);
          "{}" !== JSON.stringify(a.userData) && (b.userData = a.userData);
          !0 !== a.visible && (b.visible = a.visible);
          a instanceof THREE.PerspectiveCamera ? (b.fov = a.fov, b.aspect = a.aspect, b.near = a.near, b.far = a.far) : a instanceof THREE.OrthographicCamera ? (b.left = a.left, b.right = a.right, b.top = a.top, b.bottom = a.bottom, b.near = a.near, b.far = a.far) : a instanceof THREE.AmbientLight ? b.color = a.color.getHex() : a instanceof THREE.DirectionalLight ? (b.color = a.color.getHex(), b.intensity = a.intensity) : a instanceof THREE.PointLight ? (b.color = a.color.getHex(), b.intensity = a.intensity, b.distance = a.distance) : a instanceof THREE.SpotLight ? (b.color = a.color.getHex(), b.intensity = a.intensity, b.distance = a.distance, b.angle = a.angle, b.exponent = a.exponent) : a instanceof THREE.HemisphereLight ? (b.color = a.color.getHex(), b.groundColor = a.groundColor.getHex()) : a instanceof THREE.Mesh ? (b.geometry = c(a.geometry), b.material = e(a.material)) : a instanceof THREE.Line ? (b.geometry = c(a.geometry), b.material = e(a.material)) : a instanceof THREE.Sprite && (b.material = e(a.material));
          b.matrix = a.matrix.toArray();
          if (0 < a.children.length) {
            b.children = [];
            for (var d = 0; d < a.children.length; d++)
              b.children.push(f(a.children[d]));
          }
          return b;
        };
    a.object = f(this);
    return a;
  },
  clone: function(a, b) {
    void 0 === a && (a = new THREE.Object3D);
    void 0 === b && (b = !0);
    a.name = this.name;
    a.up.copy(this.up);
    a.position.copy(this.position);
    a.quaternion.copy(this.quaternion);
    a.scale.copy(this.scale);
    a.rotationAutoUpdate = this.rotationAutoUpdate;
    a.matrix.copy(this.matrix);
    a.matrixWorld.copy(this.matrixWorld);
    a.matrixAutoUpdate = this.matrixAutoUpdate;
    a.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;
    a.visible = this.visible;
    a.castShadow = this.castShadow;
    a.receiveShadow = this.receiveShadow;
    a.frustumCulled = this.frustumCulled;
    a.userData = JSON.parse(JSON.stringify(this.userData));
    if (!0 === b)
      for (var c = 0; c < this.children.length; c++)
        a.add(this.children[c].clone());
    return a;
  }
};
THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);
THREE.Object3DIdCount = 0;
THREE.Face3 = function(a, b, c, d, e, f) {
  this.a = a;
  this.b = b;
  this.c = c;
  this.normal = d instanceof THREE.Vector3 ? d : new THREE.Vector3;
  this.vertexNormals = d instanceof Array ? d : [];
  this.color = e instanceof THREE.Color ? e : new THREE.Color;
  this.vertexColors = e instanceof Array ? e : [];
  this.vertexTangents = [];
  this.materialIndex = void 0 !== f ? f : 0;
};
THREE.Face3.prototype = {
  constructor: THREE.Face3,
  clone: function() {
    var a = new THREE.Face3(this.a, this.b, this.c);
    a.normal.copy(this.normal);
    a.color.copy(this.color);
    a.materialIndex = this.materialIndex;
    for (var b = 0,
        c = this.vertexNormals.length; b < c; b++)
      a.vertexNormals[b] = this.vertexNormals[b].clone();
    b = 0;
    for (c = this.vertexColors.length; b < c; b++)
      a.vertexColors[b] = this.vertexColors[b].clone();
    b = 0;
    for (c = this.vertexTangents.length; b < c; b++)
      a.vertexTangents[b] = this.vertexTangents[b].clone();
    return a;
  }
};
THREE.Face4 = function(a, b, c, d, e, f, g) {
  console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
  return new THREE.Face3(a, b, c, e, f, g);
};
THREE.BufferAttribute = function(a, b) {
  this.array = a;
  this.itemSize = b;
  this.needsUpdate = !1;
};
THREE.BufferAttribute.prototype = {
  constructor: THREE.BufferAttribute,
  get length() {
    return this.array.length;
  },
  copyAt: function(a, b, c) {
    a *= this.itemSize;
    c *= b.itemSize;
    for (var d = 0,
        e = this.itemSize; d < e; d++)
      this.array[a + d] = b.array[c + d];
  },
  set: function(a) {
    this.array.set(a);
    return this;
  },
  setX: function(a, b) {
    this.array[a * this.itemSize] = b;
    return this;
  },
  setY: function(a, b) {
    this.array[a * this.itemSize + 1] = b;
    return this;
  },
  setZ: function(a, b) {
    this.array[a * this.itemSize + 2] = b;
    return this;
  },
  setXY: function(a, b, c) {
    a *= this.itemSize;
    this.array[a] = b;
    this.array[a + 1] = c;
    return this;
  },
  setXYZ: function(a, b, c, d) {
    a *= this.itemSize;
    this.array[a] = b;
    this.array[a + 1] = c;
    this.array[a + 2] = d;
    return this;
  },
  setXYZW: function(a, b, c, d, e) {
    a *= this.itemSize;
    this.array[a] = b;
    this.array[a + 1] = c;
    this.array[a + 2] = d;
    this.array[a + 3] = e;
    return this;
  },
  clone: function() {
    return new THREE.BufferAttribute(new this.array.constructor(this.array), this.itemSize);
  }
};
THREE.Int8Attribute = function(a, b) {
  console.warn("THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Uint8Attribute = function(a, b) {
  console.warn("THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Uint8ClampedAttribute = function(a, b) {
  console.warn("THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Int16Attribute = function(a, b) {
  console.warn("THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Uint16Attribute = function(a, b) {
  console.warn("THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Int32Attribute = function(a, b) {
  console.warn("THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Uint32Attribute = function(a, b) {
  console.warn("THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Float32Attribute = function(a, b) {
  console.warn("THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.Float64Attribute = function(a, b) {
  console.warn("THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
  return new THREE.BufferAttribute(a, b);
};
THREE.BufferGeometry = function() {
  Object.defineProperty(this, "id", {value: THREE.GeometryIdCount++});
  this.uuid = THREE.Math.generateUUID();
  this.name = "";
  this.type = "BufferGeometry";
  this.attributes = {};
  this.attributesKeys = [];
  this.offsets = this.drawcalls = [];
  this.boundingSphere = this.boundingBox = null;
};
THREE.BufferGeometry.prototype = {
  constructor: THREE.BufferGeometry,
  addAttribute: function(a, b, c) {
    !1 === b instanceof THREE.BufferAttribute ? (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.attributes[a] = {
      array: b,
      itemSize: c
    }) : (this.attributes[a] = b, this.attributesKeys = Object.keys(this.attributes));
  },
  getAttribute: function(a) {
    return this.attributes[a];
  },
  addDrawCall: function(a, b, c) {
    this.drawcalls.push({
      start: a,
      count: b,
      index: void 0 !== c ? c : 0
    });
  },
  applyMatrix: function(a) {
    var b = this.attributes.position;
    void 0 !== b && (a.applyToVector3Array(b.array), b.needsUpdate = !0);
    b = this.attributes.normal;
    void 0 !== b && ((new THREE.Matrix3).getNormalMatrix(a).applyToVector3Array(b.array), b.needsUpdate = !0);
  },
  center: function() {},
  fromGeometry: function(a, b) {
    b = b || {vertexColors: THREE.NoColors};
    var c = a.vertices,
        d = a.faces,
        e = a.faceVertexUvs,
        f = b.vertexColors,
        g = 0 < e[0].length,
        h = 3 == d[0].vertexNormals.length,
        k = new Float32Array(9 * d.length);
    this.addAttribute("position", new THREE.BufferAttribute(k, 3));
    var n = new Float32Array(9 * d.length);
    this.addAttribute("normal", new THREE.BufferAttribute(n, 3));
    if (f !== THREE.NoColors) {
      var p = new Float32Array(9 * d.length);
      this.addAttribute("color", new THREE.BufferAttribute(p, 3));
    }
    if (!0 === g) {
      var q = new Float32Array(6 * d.length);
      this.addAttribute("uv", new THREE.BufferAttribute(q, 2));
    }
    for (var m = 0,
        t = 0,
        s = 0; m < d.length; m++, t += 6, s += 9) {
      var r = d[m],
          u = c[r.a],
          v = c[r.b],
          y = c[r.c];
      k[s] = u.x;
      k[s + 1] = u.y;
      k[s + 2] = u.z;
      k[s + 3] = v.x;
      k[s + 4] = v.y;
      k[s + 5] = v.z;
      k[s + 6] = y.x;
      k[s + 7] = y.y;
      k[s + 8] = y.z;
      !0 === h ? (u = r.vertexNormals[0], v = r.vertexNormals[1], y = r.vertexNormals[2], n[s] = u.x, n[s + 1] = u.y, n[s + 2] = u.z, n[s + 3] = v.x, n[s + 4] = v.y, n[s + 5] = v.z, n[s + 6] = y.x, n[s + 7] = y.y, n[s + 8] = y.z) : (u = r.normal, n[s] = u.x, n[s + 1] = u.y, n[s + 2] = u.z, n[s + 3] = u.x, n[s + 4] = u.y, n[s + 5] = u.z, n[s + 6] = u.x, n[s + 7] = u.y, n[s + 8] = u.z);
      f === THREE.FaceColors ? (r = r.color, p[s] = r.r, p[s + 1] = r.g, p[s + 2] = r.b, p[s + 3] = r.r, p[s + 4] = r.g, p[s + 5] = r.b, p[s + 6] = r.r, p[s + 7] = r.g, p[s + 8] = r.b) : f === THREE.VertexColors && (u = r.vertexColors[0], v = r.vertexColors[1], r = r.vertexColors[2], p[s] = u.r, p[s + 1] = u.g, p[s + 2] = u.b, p[s + 3] = v.r, p[s + 4] = v.g, p[s + 5] = v.b, p[s + 6] = r.r, p[s + 7] = r.g, p[s + 8] = r.b);
      !0 === g && (r = e[0][m][0], u = e[0][m][1], v = e[0][m][2], q[t] = r.x, q[t + 1] = r.y, q[t + 2] = u.x, q[t + 3] = u.y, q[t + 4] = v.x, q[t + 5] = v.y);
    }
    this.computeBoundingSphere();
    return this;
  },
  computeBoundingBox: function() {
    var a = new THREE.Vector3;
    return function() {
      null === this.boundingBox && (this.boundingBox = new THREE.Box3);
      var b = this.attributes.position.array;
      if (b) {
        var c = this.boundingBox;
        c.makeEmpty();
        for (var d = 0,
            e = b.length; d < e; d += 3)
          a.set(b[d], b[d + 1], b[d + 2]), c.expandByPoint(a);
      }
      if (void 0 === b || 0 === b.length)
        this.boundingBox.min.set(0, 0, 0), this.boundingBox.max.set(0, 0, 0);
      (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.');
    };
  }(),
  computeBoundingSphere: function() {
    var a = new THREE.Box3,
        b = new THREE.Vector3;
    return function() {
      null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere);
      var c = this.attributes.position.array;
      if (c) {
        a.makeEmpty();
        for (var d = this.boundingSphere.center,
            e = 0,
            f = c.length; e < f; e += 3)
          b.set(c[e], c[e + 1], c[e + 2]), a.expandByPoint(b);
        a.center(d);
        for (var g = 0,
            e = 0,
            f = c.length; e < f; e += 3)
          b.set(c[e], c[e + 1], c[e + 2]), g = Math.max(g, d.distanceToSquared(b));
        this.boundingSphere.radius = Math.sqrt(g);
        isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.');
      }
    };
  }(),
  computeFaceNormals: function() {},
  computeVertexNormals: function() {
    var a = this.attributes;
    if (a.position) {
      var b = a.position.array;
      if (void 0 === a.normal)
        this.addAttribute("normal", new THREE.BufferAttribute(new Float32Array(b.length), 3));
      else
        for (var c = a.normal.array,
            d = 0,
            e = c.length; d < e; d++)
          c[d] = 0;
      var c = a.normal.array,
          f,
          g,
          h,
          k = new THREE.Vector3,
          n = new THREE.Vector3,
          p = new THREE.Vector3,
          q = new THREE.Vector3,
          m = new THREE.Vector3;
      if (a.index)
        for (var t = a.index.array,
            s = 0 < this.offsets.length ? this.offsets : [{
              start: 0,
              count: t.length,
              index: 0
            }],
            r = 0,
            u = s.length; r < u; ++r) {
          e = s[r].start;
          f = s[r].count;
          for (var v = s[r].index,
              d = e,
              e = e + f; d < e; d += 3)
            f = 3 * (v + t[d]), g = 3 * (v + t[d + 1]), h = 3 * (v + t[d + 2]), k.fromArray(b, f), n.fromArray(b, g), p.fromArray(b, h), q.subVectors(p, n), m.subVectors(k, n), q.cross(m), c[f] += q.x, c[f + 1] += q.y, c[f + 2] += q.z, c[g] += q.x, c[g + 1] += q.y, c[g + 2] += q.z, c[h] += q.x, c[h + 1] += q.y, c[h + 2] += q.z;
        }
      else
        for (d = 0, e = b.length; d < e; d += 9)
          k.fromArray(b, d), n.fromArray(b, d + 3), p.fromArray(b, d + 6), q.subVectors(p, n), m.subVectors(k, n), q.cross(m), c[d] = q.x, c[d + 1] = q.y, c[d + 2] = q.z, c[d + 3] = q.x, c[d + 4] = q.y, c[d + 5] = q.z, c[d + 6] = q.x, c[d + 7] = q.y, c[d + 8] = q.z;
      this.normalizeNormals();
      a.normal.needsUpdate = !0;
    }
  },
  computeTangents: function() {
    function a(a, b, c) {
      q.fromArray(d, 3 * a);
      m.fromArray(d, 3 * b);
      t.fromArray(d, 3 * c);
      s.fromArray(f, 2 * a);
      r.fromArray(f, 2 * b);
      u.fromArray(f, 2 * c);
      v = m.x - q.x;
      y = t.x - q.x;
      C = m.y - q.y;
      x = t.y - q.y;
      F = m.z - q.z;
      z = t.z - q.z;
      G = r.x - s.x;
      E = u.x - s.x;
      w = r.y - s.y;
      D = u.y - s.y;
      A = 1 / (G * D - E * w);
      U.set((D * v - w * y) * A, (D * C - w * x) * A, (D * F - w * z) * A);
      M.set((G * y - E * v) * A, (G * x - E * C) * A, (G * z - E * F) * A);
      k[a].add(U);
      k[b].add(U);
      k[c].add(U);
      n[a].add(M);
      n[b].add(M);
      n[c].add(M);
    }
    function b(a) {
      xa.fromArray(e, 3 * a);
      H.copy(xa);
      qa = k[a];
      ga.copy(qa);
      ga.sub(xa.multiplyScalar(xa.dot(qa))).normalize();
      ea.crossVectors(H, qa);
      ya = ea.dot(n[a]);
      $a = 0 > ya ? -1 : 1;
      h[4 * a] = ga.x;
      h[4 * a + 1] = ga.y;
      h[4 * a + 2] = ga.z;
      h[4 * a + 3] = $a;
    }
    if (void 0 === this.attributes.index || void 0 === this.attributes.position || void 0 === this.attributes.normal || void 0 === this.attributes.uv)
      console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");
    else {
      var c = this.attributes.index.array,
          d = this.attributes.position.array,
          e = this.attributes.normal.array,
          f = this.attributes.uv.array,
          g = d.length / 3;
      void 0 === this.attributes.tangent && this.addAttribute("tangent", new THREE.BufferAttribute(new Float32Array(4 * g), 4));
      for (var h = this.attributes.tangent.array,
          k = [],
          n = [],
          p = 0; p < g; p++)
        k[p] = new THREE.Vector3, n[p] = new THREE.Vector3;
      var q = new THREE.Vector3,
          m = new THREE.Vector3,
          t = new THREE.Vector3,
          s = new THREE.Vector2,
          r = new THREE.Vector2,
          u = new THREE.Vector2,
          v,
          y,
          C,
          x,
          F,
          z,
          G,
          E,
          w,
          D,
          A,
          U = new THREE.Vector3,
          M = new THREE.Vector3,
          K,
          L,
          N,
          T,
          Q;
      0 === this.drawcalls.length && this.addDrawCall(0, c.length, 0);
      var W = this.drawcalls,
          p = 0;
      for (L = W.length; p < L; ++p) {
        K = W[p].start;
        N = W[p].count;
        var O = W[p].index,
            g = K;
        for (K += N; g < K; g += 3)
          N = O + c[g], T = O + c[g + 1], Q = O + c[g + 2], a(N, T, Q);
      }
      var ga = new THREE.Vector3,
          ea = new THREE.Vector3,
          xa = new THREE.Vector3,
          H = new THREE.Vector3,
          $a,
          qa,
          ya,
          p = 0;
      for (L = W.length; p < L; ++p)
        for (K = W[p].start, N = W[p].count, O = W[p].index, g = K, K += N; g < K; g += 3)
          N = O + c[g], T = O + c[g + 1], Q = O + c[g + 2], b(N), b(T), b(Q);
    }
  },
  computeOffsets: function(a) {
    var b = a;
    void 0 === a && (b = 65535);
    Date.now();
    a = this.attributes.index.array;
    for (var c = this.attributes.position.array,
        d = a.length / 3,
        e = new Uint16Array(a.length),
        f = 0,
        g = 0,
        h = [{
          start: 0,
          count: 0,
          index: 0
        }],
        k = h[0],
        n = 0,
        p = 0,
        q = new Int32Array(6),
        m = new Int32Array(c.length),
        t = new Int32Array(c.length),
        s = 0; s < c.length; s++)
      m[s] = -1, t[s] = -1;
    for (c = 0; c < d; c++) {
      for (var r = p = 0; 3 > r; r++)
        s = a[3 * c + r], -1 == m[s] ? (q[2 * r] = s, q[2 * r + 1] = -1, p++) : m[s] < k.index ? (q[2 * r] = s, q[2 * r + 1] = -1, n++) : (q[2 * r] = s, q[2 * r + 1] = m[s]);
      if (g + p > k.index + b)
        for (k = {
          start: f,
          count: 0,
          index: g
        }, h.push(k), p = 0; 6 > p; p += 2)
          r = q[p + 1], -1 < r && r < k.index && (q[p + 1] = -1);
      for (p = 0; 6 > p; p += 2)
        s = q[p], r = q[p + 1], -1 === r && (r = g++), m[s] = r, t[r] = s, e[f++] = r - k.index, k.count++;
    }
    this.reorderBuffers(e, t, g);
    return this.offsets = h;
  },
  merge: function(a, b) {
    if (!1 === a instanceof THREE.BufferGeometry)
      console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
    else {
      void 0 === b && (b = 0);
      var c = this.attributes,
          d;
      for (d in c)
        if (void 0 !== a.attributes[d])
          for (var e = c[d].array,
              f = a.attributes[d],
              g = f.array,
              h = 0,
              f = f.itemSize * b; h < g.length; h++, f++)
            e[f] = g[h];
      return this;
    }
  },
  normalizeNormals: function() {
    for (var a = this.attributes.normal.array,
        b,
        c,
        d,
        e = 0,
        f = a.length; e < f; e += 3)
      b = a[e], c = a[e + 1], d = a[e + 2], b = 1 / Math.sqrt(b * b + c * c + d * d), a[e] *= b, a[e + 1] *= b, a[e + 2] *= b;
  },
  reorderBuffers: function(a, b, c) {
    var d = {},
        e;
    for (e in this.attributes)
      "index" != e && (d[e] = new this.attributes[e].array.constructor(this.attributes[e].itemSize * c));
    for (var f = 0; f < c; f++) {
      var g = b[f];
      for (e in this.attributes)
        if ("index" != e)
          for (var h = this.attributes[e].array,
              k = this.attributes[e].itemSize,
              n = d[e],
              p = 0; p < k; p++)
            n[f * k + p] = h[g * k + p];
    }
    this.attributes.index.array = a;
    for (e in this.attributes)
      "index" != e && (this.attributes[e].array = d[e], this.attributes[e].numItems = this.attributes[e].itemSize * c);
  },
  toJSON: function() {
    var a = {
      metadata: {
        version: 4,
        type: "BufferGeometry",
        generator: "BufferGeometryExporter"
      },
      uuid: this.uuid,
      type: this.type,
      data: {attributes: {}}
    },
        b = this.attributes,
        c = this.offsets,
        d = this.boundingSphere,
        e;
    for (e in b) {
      for (var f = b[e],
          g = [],
          h = f.array,
          k = 0,
          n = h.length; k < n; k++)
        g[k] = h[k];
      a.data.attributes[e] = {
        itemSize: f.itemSize,
        type: f.array.constructor.name,
        array: g
      };
    }
    0 < c.length && (a.data.offsets = JSON.parse(JSON.stringify(c)));
    null !== d && (a.data.boundingSphere = {
      center: d.center.toArray(),
      radius: d.radius
    });
    return a;
  },
  clone: function() {
    var a = new THREE.BufferGeometry,
        b;
    for (b in this.attributes)
      a.addAttribute(b, this.attributes[b].clone());
    b = 0;
    for (var c = this.offsets.length; b < c; b++) {
      var d = this.offsets[b];
      a.offsets.push({
        start: d.start,
        index: d.index,
        count: d.count
      });
    }
    return a;
  },
  dispose: function() {
    this.dispatchEvent({type: "dispose"});
  }
};
THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);
THREE.Geometry = function() {
  Object.defineProperty(this, "id", {value: THREE.GeometryIdCount++});
  this.uuid = THREE.Math.generateUUID();
  this.name = "";
  this.type = "Geometry";
  this.vertices = [];
  this.colors = [];
  this.faces = [];
  this.faceVertexUvs = [[]];
  this.morphTargets = [];
  this.morphColors = [];
  this.morphNormals = [];
  this.skinWeights = [];
  this.skinIndices = [];
  this.lineDistances = [];
  this.boundingSphere = this.boundingBox = null;
  this.hasTangents = !1;
  this.dynamic = !0;
  this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.tangentsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.elementsNeedUpdate = this.verticesNeedUpdate = !1;
};
THREE.Geometry.prototype = {
  constructor: THREE.Geometry,
  applyMatrix: function(a) {
    for (var b = (new THREE.Matrix3).getNormalMatrix(a),
        c = 0,
        d = this.vertices.length; c < d; c++)
      this.vertices[c].applyMatrix4(a);
    c = 0;
    for (d = this.faces.length; c < d; c++) {
      a = this.faces[c];
      a.normal.applyMatrix3(b).normalize();
      for (var e = 0,
          f = a.vertexNormals.length; e < f; e++)
        a.vertexNormals[e].applyMatrix3(b).normalize();
    }
    this.boundingBox instanceof THREE.Box3 && this.computeBoundingBox();
    this.boundingSphere instanceof THREE.Sphere && this.computeBoundingSphere();
  },
  fromBufferGeometry: function(a) {
    for (var b = this,
        c = a.attributes,
        d = c.position.array,
        e = void 0 !== c.index ? c.index.array : void 0,
        f = void 0 !== c.normal ? c.normal.array : void 0,
        g = void 0 !== c.color ? c.color.array : void 0,
        h = void 0 !== c.uv ? c.uv.array : void 0,
        k = [],
        n = [],
        p = c = 0; c < d.length; c += 3, p += 2)
      b.vertices.push(new THREE.Vector3(d[c], d[c + 1], d[c + 2])), void 0 !== f && k.push(new THREE.Vector3(f[c], f[c + 1], f[c + 2])), void 0 !== g && b.colors.push(new THREE.Color(g[c], g[c + 1], g[c + 2])), void 0 !== h && n.push(new THREE.Vector2(h[p], h[p + 1]));
    p = function(a, c, d) {
      var e = void 0 !== f ? [k[a].clone(), k[c].clone(), k[d].clone()] : [],
          p = void 0 !== g ? [b.colors[a].clone(), b.colors[c].clone(), b.colors[d].clone()] : [];
      b.faces.push(new THREE.Face3(a, c, d, e, p));
      void 0 !== h && b.faceVertexUvs[0].push([n[a].clone(), n[c].clone(), n[d].clone()]);
    };
    if (void 0 !== e)
      for (c = 0; c < e.length; c += 3)
        p(e[c], e[c + 1], e[c + 2]);
    else
      for (c = 0; c < d.length / 3; c += 3)
        p(c, c + 1, c + 2);
    this.computeFaceNormals();
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
    null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
    return this;
  },
  center: function() {
    this.computeBoundingBox();
    var a = new THREE.Vector3;
    a.addVectors(this.boundingBox.min, this.boundingBox.max);
    a.multiplyScalar(-.5);
    this.applyMatrix((new THREE.Matrix4).makeTranslation(a.x, a.y, a.z));
    this.computeBoundingBox();
    return a;
  },
  computeFaceNormals: function() {
    for (var a = new THREE.Vector3,
        b = new THREE.Vector3,
        c = 0,
        d = this.faces.length; c < d; c++) {
      var e = this.faces[c],
          f = this.vertices[e.a],
          g = this.vertices[e.b];
      a.subVectors(this.vertices[e.c], g);
      b.subVectors(f, g);
      a.cross(b);
      a.normalize();
      e.normal.copy(a);
    }
  },
  computeVertexNormals: function(a) {
    var b,
        c,
        d;
    d = Array(this.vertices.length);
    b = 0;
    for (c = this.vertices.length; b < c; b++)
      d[b] = new THREE.Vector3;
    if (a) {
      var e,
          f,
          g,
          h = new THREE.Vector3,
          k = new THREE.Vector3;
      new THREE.Vector3;
      new THREE.Vector3;
      new THREE.Vector3;
      a = 0;
      for (b = this.faces.length; a < b; a++)
        c = this.faces[a], e = this.vertices[c.a], f = this.vertices[c.b], g = this.vertices[c.c], h.subVectors(g, f), k.subVectors(e, f), h.cross(k), d[c.a].add(h), d[c.b].add(h), d[c.c].add(h);
    } else
      for (a = 0, b = this.faces.length; a < b; a++)
        c = this.faces[a], d[c.a].add(c.normal), d[c.b].add(c.normal), d[c.c].add(c.normal);
    b = 0;
    for (c = this.vertices.length; b < c; b++)
      d[b].normalize();
    a = 0;
    for (b = this.faces.length; a < b; a++)
      c = this.faces[a], c.vertexNormals[0] = d[c.a].clone(), c.vertexNormals[1] = d[c.b].clone(), c.vertexNormals[2] = d[c.c].clone();
  },
  computeMorphNormals: function() {
    var a,
        b,
        c,
        d,
        e;
    c = 0;
    for (d = this.faces.length; c < d; c++)
      for (e = this.faces[c], e.__originalFaceNormal ? e.__originalFaceNormal.copy(e.normal) : e.__originalFaceNormal = e.normal.clone(), e.__originalVertexNormals || (e.__originalVertexNormals = []), a = 0, b = e.vertexNormals.length; a < b; a++)
        e.__originalVertexNormals[a] ? e.__originalVertexNormals[a].copy(e.vertexNormals[a]) : e.__originalVertexNormals[a] = e.vertexNormals[a].clone();
    var f = new THREE.Geometry;
    f.faces = this.faces;
    a = 0;
    for (b = this.morphTargets.length; a < b; a++) {
      if (!this.morphNormals[a]) {
        this.morphNormals[a] = {};
        this.morphNormals[a].faceNormals = [];
        this.morphNormals[a].vertexNormals = [];
        e = this.morphNormals[a].faceNormals;
        var g = this.morphNormals[a].vertexNormals,
            h,
            k;
        c = 0;
        for (d = this.faces.length; c < d; c++)
          h = new THREE.Vector3, k = {
            a: new THREE.Vector3,
            b: new THREE.Vector3,
            c: new THREE.Vector3
          }, e.push(h), g.push(k);
      }
      g = this.morphNormals[a];
      f.vertices = this.morphTargets[a].vertices;
      f.computeFaceNormals();
      f.computeVertexNormals();
      c = 0;
      for (d = this.faces.length; c < d; c++)
        e = this.faces[c], h = g.faceNormals[c], k = g.vertexNormals[c], h.copy(e.normal), k.a.copy(e.vertexNormals[0]), k.b.copy(e.vertexNormals[1]), k.c.copy(e.vertexNormals[2]);
    }
    c = 0;
    for (d = this.faces.length; c < d; c++)
      e = this.faces[c], e.normal = e.__originalFaceNormal, e.vertexNormals = e.__originalVertexNormals;
  },
  computeTangents: function() {
    var a,
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        k,
        n,
        p,
        q,
        m,
        t,
        s,
        r,
        u,
        v = [],
        y = [];
    c = new THREE.Vector3;
    var C = new THREE.Vector3,
        x = new THREE.Vector3,
        F = new THREE.Vector3,
        z = new THREE.Vector3;
    a = 0;
    for (b = this.vertices.length; a < b; a++)
      v[a] = new THREE.Vector3, y[a] = new THREE.Vector3;
    a = 0;
    for (b = this.faces.length; a < b; a++)
      e = this.faces[a], f = this.faceVertexUvs[0][a], d = e.a, u = e.b, e = e.c, g = this.vertices[d], h = this.vertices[u], k = this.vertices[e], n = f[0], p = f[1], q = f[2], f = h.x - g.x, m = k.x - g.x, t = h.y - g.y, s = k.y - g.y, h = h.z - g.z, g = k.z - g.z, k = p.x - n.x, r = q.x - n.x, p = p.y - n.y, n = q.y - n.y, q = 1 / (k * n - r * p), c.set((n * f - p * m) * q, (n * t - p * s) * q, (n * h - p * g) * q), C.set((k * m - r * f) * q, (k * s - r * t) * q, (k * g - r * h) * q), v[d].add(c), v[u].add(c), v[e].add(c), y[d].add(C), y[u].add(C), y[e].add(C);
    C = ["a", "b", "c", "d"];
    a = 0;
    for (b = this.faces.length; a < b; a++)
      for (e = this.faces[a], c = 0; c < Math.min(e.vertexNormals.length, 3); c++)
        z.copy(e.vertexNormals[c]), d = e[C[c]], u = v[d], x.copy(u), x.sub(z.multiplyScalar(z.dot(u))).normalize(), F.crossVectors(e.vertexNormals[c], u), d = F.dot(y[d]), d = 0 > d ? -1 : 1, e.vertexTangents[c] = new THREE.Vector4(x.x, x.y, x.z, d);
    this.hasTangents = !0;
  },
  computeLineDistances: function() {
    for (var a = 0,
        b = this.vertices,
        c = 0,
        d = b.length; c < d; c++)
      0 < c && (a += b[c].distanceTo(b[c - 1])), this.lineDistances[c] = a;
  },
  computeBoundingBox: function() {
    null === this.boundingBox && (this.boundingBox = new THREE.Box3);
    this.boundingBox.setFromPoints(this.vertices);
  },
  computeBoundingSphere: function() {
    null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere);
    this.boundingSphere.setFromPoints(this.vertices);
  },
  merge: function(a, b, c) {
    if (!1 === a instanceof THREE.Geometry)
      console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
    else {
      var d,
          e = this.vertices.length,
          f = this.vertices,
          g = a.vertices,
          h = this.faces,
          k = a.faces,
          n = this.faceVertexUvs[0];
      a = a.faceVertexUvs[0];
      void 0 === c && (c = 0);
      void 0 !== b && (d = (new THREE.Matrix3).getNormalMatrix(b));
      for (var p = 0,
          q = g.length; p < q; p++) {
        var m = g[p].clone();
        void 0 !== b && m.applyMatrix4(b);
        f.push(m);
      }
      p = 0;
      for (q = k.length; p < q; p++) {
        var g = k[p],
            t,
            s = g.vertexNormals,
            r = g.vertexColors,
            m = new THREE.Face3(g.a + e, g.b + e, g.c + e);
        m.normal.copy(g.normal);
        void 0 !== d && m.normal.applyMatrix3(d).normalize();
        b = 0;
        for (f = s.length; b < f; b++)
          t = s[b].clone(), void 0 !== d && t.applyMatrix3(d).normalize(), m.vertexNormals.push(t);
        m.color.copy(g.color);
        b = 0;
        for (f = r.length; b < f; b++)
          t = r[b], m.vertexColors.push(t.clone());
        m.materialIndex = g.materialIndex + c;
        h.push(m);
      }
      p = 0;
      for (q = a.length; p < q; p++)
        if (c = a[p], d = [], void 0 !== c) {
          b = 0;
          for (f = c.length; b < f; b++)
            d.push(c[b].clone());
          n.push(d);
        }
    }
  },
  mergeMesh: function(a) {
    !1 === a instanceof THREE.Mesh ? console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a) : (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix));
  },
  mergeVertices: function() {
    var a = {},
        b = [],
        c = [],
        d,
        e = Math.pow(10, 4),
        f,
        g;
    f = 0;
    for (g = this.vertices.length; f < g; f++)
      d = this.vertices[f], d = Math.round(d.x * e) + "_" + Math.round(d.y * e) + "_" + Math.round(d.z * e), void 0 === a[d] ? (a[d] = f, b.push(this.vertices[f]), c[f] = b.length - 1) : c[f] = c[a[d]];
    a = [];
    f = 0;
    for (g = this.faces.length; f < g; f++)
      for (e = this.faces[f], e.a = c[e.a], e.b = c[e.b], e.c = c[e.c], e = [e.a, e.b, e.c], d = 0; 3 > d; d++)
        if (e[d] == e[(d + 1) % 3]) {
          a.push(f);
          break;
        }
    for (f = a.length - 1; 0 <= f; f--)
      for (e = a[f], this.faces.splice(e, 1), c = 0, g = this.faceVertexUvs.length; c < g; c++)
        this.faceVertexUvs[c].splice(e, 1);
    f = this.vertices.length - b.length;
    this.vertices = b;
    return f;
  },
  toJSON: function() {
    function a(a, b, c) {
      return c ? a | 1 << b : a & ~(1 << b);
    }
    function b(a) {
      var b = a.x.toString() + a.y.toString() + a.z.toString();
      if (void 0 !== n[b])
        return n[b];
      n[b] = k.length / 3;
      k.push(a.x, a.y, a.z);
      return n[b];
    }
    function c(a) {
      var b = a.r.toString() + a.g.toString() + a.b.toString();
      if (void 0 !== q[b])
        return q[b];
      q[b] = p.length;
      p.push(a.getHex());
      return q[b];
    }
    function d(a) {
      var b = a.x.toString() + a.y.toString();
      if (void 0 !== t[b])
        return t[b];
      t[b] = m.length / 2;
      m.push(a.x, a.y);
      return t[b];
    }
    var e = {
      metadata: {
        version: 4,
        type: "BufferGeometry",
        generator: "BufferGeometryExporter"
      },
      uuid: this.uuid,
      type: this.type
    };
    "" !== this.name && (e.name = this.name);
    if (void 0 !== this.parameters) {
      var f = this.parameters,
          g;
      for (g in f)
        void 0 !== f[g] && (e[g] = f[g]);
      return e;
    }
    f = [];
    for (g = 0; g < this.vertices.length; g++) {
      var h = this.vertices[g];
      f.push(h.x, h.y, h.z);
    }
    var h = [],
        k = [],
        n = {},
        p = [],
        q = {},
        m = [],
        t = {};
    for (g = 0; g < this.faces.length; g++) {
      var s = this.faces[g],
          r = void 0 !== this.faceVertexUvs[0][g],
          u = 0 < s.normal.length(),
          v = 0 < s.vertexNormals.length,
          y = 1 !== s.color.r || 1 !== s.color.g || 1 !== s.color.b,
          C = 0 < s.vertexColors.length,
          x = 0,
          x = a(x, 0, 0),
          x = a(x, 1, !1),
          x = a(x, 2, !1),
          x = a(x, 3, r),
          x = a(x, 4, u),
          x = a(x, 5, v),
          x = a(x, 6, y),
          x = a(x, 7, C);
      h.push(x);
      h.push(s.a, s.b, s.c);
      r && (r = this.faceVertexUvs[0][g], h.push(d(r[0]), d(r[1]), d(r[2])));
      u && h.push(b(s.normal));
      v && (u = s.vertexNormals, h.push(b(u[0]), b(u[1]), b(u[2])));
      y && h.push(c(s.color));
      C && (s = s.vertexColors, h.push(c(s[0]), c(s[1]), c(s[2])));
    }
    e.data = {};
    e.data.vertices = f;
    e.data.normals = k;
    0 < p.length && (e.data.colors = p);
    0 < m.length && (e.data.uvs = [m]);
    e.data.faces = h;
    return e;
  },
  clone: function() {
    for (var a = new THREE.Geometry,
        b = this.vertices,
        c = 0,
        d = b.length; c < d; c++)
      a.vertices.push(b[c].clone());
    b = this.faces;
    c = 0;
    for (d = b.length; c < d; c++)
      a.faces.push(b[c].clone());
    c = 0;
    for (d = this.faceVertexUvs.length; c < d; c++) {
      b = this.faceVertexUvs[c];
      void 0 === a.faceVertexUvs[c] && (a.faceVertexUvs[c] = []);
      for (var e = 0,
          f = b.length; e < f; e++) {
        for (var g = b[e],
            h = [],
            k = 0,
            n = g.length; k < n; k++)
          h.push(g[k].clone());
        a.faceVertexUvs[c].push(h);
      }
    }
    return a;
  },
  dispose: function() {
    this.dispatchEvent({type: "dispose"});
  }
};
THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);
THREE.GeometryIdCount = 0;
THREE.Camera = function() {
  THREE.Object3D.call(this);
  this.type = "Camera";
  this.matrixWorldInverse = new THREE.Matrix4;
  this.projectionMatrix = new THREE.Matrix4;
};
THREE.Camera.prototype = Object.create(THREE.Object3D.prototype);
THREE.Camera.prototype.constructor = THREE.Camera;
THREE.Camera.prototype.getWorldDirection = function() {
  var a = new THREE.Quaternion;
  return function(b) {
    b = b || new THREE.Vector3;
    this.getWorldQuaternion(a);
    return b.set(0, 0, -1).applyQuaternion(a);
  };
}();
THREE.Camera.prototype.lookAt = function() {
  var a = new THREE.Matrix4;
  return function(b) {
    a.lookAt(this.position, b, this.up);
    this.quaternion.setFromRotationMatrix(a);
  };
}();
THREE.Camera.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.Camera);
  THREE.Object3D.prototype.clone.call(this, a);
  a.matrixWorldInverse.copy(this.matrixWorldInverse);
  a.projectionMatrix.copy(this.projectionMatrix);
  return a;
};
THREE.CubeCamera = function(a, b, c) {
  THREE.Object3D.call(this);
  this.type = "CubeCamera";
  var d = new THREE.PerspectiveCamera(90, 1, a, b);
  d.up.set(0, -1, 0);
  d.lookAt(new THREE.Vector3(1, 0, 0));
  this.add(d);
  var e = new THREE.PerspectiveCamera(90, 1, a, b);
  e.up.set(0, -1, 0);
  e.lookAt(new THREE.Vector3(-1, 0, 0));
  this.add(e);
  var f = new THREE.PerspectiveCamera(90, 1, a, b);
  f.up.set(0, 0, 1);
  f.lookAt(new THREE.Vector3(0, 1, 0));
  this.add(f);
  var g = new THREE.PerspectiveCamera(90, 1, a, b);
  g.up.set(0, 0, -1);
  g.lookAt(new THREE.Vector3(0, -1, 0));
  this.add(g);
  var h = new THREE.PerspectiveCamera(90, 1, a, b);
  h.up.set(0, -1, 0);
  h.lookAt(new THREE.Vector3(0, 0, 1));
  this.add(h);
  var k = new THREE.PerspectiveCamera(90, 1, a, b);
  k.up.set(0, -1, 0);
  k.lookAt(new THREE.Vector3(0, 0, -1));
  this.add(k);
  this.renderTarget = new THREE.WebGLRenderTargetCube(c, c, {
    format: THREE.RGBFormat,
    magFilter: THREE.LinearFilter,
    minFilter: THREE.LinearFilter
  });
  this.updateCubeMap = function(a, b) {
    var c = this.renderTarget,
        m = c.generateMipmaps;
    c.generateMipmaps = !1;
    c.activeCubeFace = 0;
    a.render(b, d, c);
    c.activeCubeFace = 1;
    a.render(b, e, c);
    c.activeCubeFace = 2;
    a.render(b, f, c);
    c.activeCubeFace = 3;
    a.render(b, g, c);
    c.activeCubeFace = 4;
    a.render(b, h, c);
    c.generateMipmaps = m;
    c.activeCubeFace = 5;
    a.render(b, k, c);
  };
};
THREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype);
THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;
THREE.OrthographicCamera = function(a, b, c, d, e, f) {
  THREE.Camera.call(this);
  this.type = "OrthographicCamera";
  this.zoom = 1;
  this.left = a;
  this.right = b;
  this.top = c;
  this.bottom = d;
  this.near = void 0 !== e ? e : .1;
  this.far = void 0 !== f ? f : 2E3;
  this.updateProjectionMatrix();
};
THREE.OrthographicCamera.prototype = Object.create(THREE.Camera.prototype);
THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;
THREE.OrthographicCamera.prototype.updateProjectionMatrix = function() {
  var a = (this.right - this.left) / (2 * this.zoom),
      b = (this.top - this.bottom) / (2 * this.zoom),
      c = (this.right + this.left) / 2,
      d = (this.top + this.bottom) / 2;
  this.projectionMatrix.makeOrthographic(c - a, c + a, d + b, d - b, this.near, this.far);
};
THREE.OrthographicCamera.prototype.clone = function() {
  var a = new THREE.OrthographicCamera;
  THREE.Camera.prototype.clone.call(this, a);
  a.zoom = this.zoom;
  a.left = this.left;
  a.right = this.right;
  a.top = this.top;
  a.bottom = this.bottom;
  a.near = this.near;
  a.far = this.far;
  a.projectionMatrix.copy(this.projectionMatrix);
  return a;
};
THREE.PerspectiveCamera = function(a, b, c, d) {
  THREE.Camera.call(this);
  this.type = "PerspectiveCamera";
  this.zoom = 1;
  this.fov = void 0 !== a ? a : 50;
  this.aspect = void 0 !== b ? b : 1;
  this.near = void 0 !== c ? c : .1;
  this.far = void 0 !== d ? d : 2E3;
  this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype = Object.create(THREE.Camera.prototype);
THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;
THREE.PerspectiveCamera.prototype.setLens = function(a, b) {
  void 0 === b && (b = 24);
  this.fov = 2 * THREE.Math.radToDeg(Math.atan(b / (2 * a)));
  this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype.setViewOffset = function(a, b, c, d, e, f) {
  this.fullWidth = a;
  this.fullHeight = b;
  this.x = c;
  this.y = d;
  this.width = e;
  this.height = f;
  this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function() {
  var a = THREE.Math.radToDeg(2 * Math.atan(Math.tan(.5 * THREE.Math.degToRad(this.fov)) / this.zoom));
  if (this.fullWidth) {
    var b = this.fullWidth / this.fullHeight,
        a = Math.tan(THREE.Math.degToRad(.5 * a)) * this.near,
        c = -a,
        d = b * c,
        b = Math.abs(b * a - d),
        c = Math.abs(a - c);
    this.projectionMatrix.makeFrustum(d + this.x * b / this.fullWidth, d + (this.x + this.width) * b / this.fullWidth, a - (this.y + this.height) * c / this.fullHeight, a - this.y * c / this.fullHeight, this.near, this.far);
  } else
    this.projectionMatrix.makePerspective(a, this.aspect, this.near, this.far);
};
THREE.PerspectiveCamera.prototype.clone = function() {
  var a = new THREE.PerspectiveCamera;
  THREE.Camera.prototype.clone.call(this, a);
  a.zoom = this.zoom;
  a.fov = this.fov;
  a.aspect = this.aspect;
  a.near = this.near;
  a.far = this.far;
  a.projectionMatrix.copy(this.projectionMatrix);
  return a;
};
THREE.Light = function(a) {
  THREE.Object3D.call(this);
  this.type = "Light";
  this.color = new THREE.Color(a);
};
THREE.Light.prototype = Object.create(THREE.Object3D.prototype);
THREE.Light.prototype.constructor = THREE.Light;
THREE.Light.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.Light);
  THREE.Object3D.prototype.clone.call(this, a);
  a.color.copy(this.color);
  return a;
};
THREE.AmbientLight = function(a) {
  THREE.Light.call(this, a);
  this.type = "AmbientLight";
};
THREE.AmbientLight.prototype = Object.create(THREE.Light.prototype);
THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;
THREE.AmbientLight.prototype.clone = function() {
  var a = new THREE.AmbientLight;
  THREE.Light.prototype.clone.call(this, a);
  return a;
};
THREE.AreaLight = function(a, b) {
  THREE.Light.call(this, a);
  this.type = "AreaLight";
  this.normal = new THREE.Vector3(0, -1, 0);
  this.right = new THREE.Vector3(1, 0, 0);
  this.intensity = void 0 !== b ? b : 1;
  this.height = this.width = 1;
  this.constantAttenuation = 1.5;
  this.linearAttenuation = .5;
  this.quadraticAttenuation = .1;
};
THREE.AreaLight.prototype = Object.create(THREE.Light.prototype);
THREE.AreaLight.prototype.constructor = THREE.AreaLight;
THREE.DirectionalLight = function(a, b) {
  THREE.Light.call(this, a);
  this.type = "DirectionalLight";
  this.position.set(0, 1, 0);
  this.target = new THREE.Object3D;
  this.intensity = void 0 !== b ? b : 1;
  this.onlyShadow = this.castShadow = !1;
  this.shadowCameraNear = 50;
  this.shadowCameraFar = 5E3;
  this.shadowCameraLeft = -500;
  this.shadowCameraTop = this.shadowCameraRight = 500;
  this.shadowCameraBottom = -500;
  this.shadowCameraVisible = !1;
  this.shadowBias = 0;
  this.shadowDarkness = .5;
  this.shadowMapHeight = this.shadowMapWidth = 512;
  this.shadowCascade = !1;
  this.shadowCascadeOffset = new THREE.Vector3(0, 0, -1E3);
  this.shadowCascadeCount = 2;
  this.shadowCascadeBias = [0, 0, 0];
  this.shadowCascadeWidth = [512, 512, 512];
  this.shadowCascadeHeight = [512, 512, 512];
  this.shadowCascadeNearZ = [-1, .99, .998];
  this.shadowCascadeFarZ = [.99, .998, 1];
  this.shadowCascadeArray = [];
  this.shadowMatrix = this.shadowCamera = this.shadowMapSize = this.shadowMap = null;
};
THREE.DirectionalLight.prototype = Object.create(THREE.Light.prototype);
THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;
THREE.DirectionalLight.prototype.clone = function() {
  var a = new THREE.DirectionalLight;
  THREE.Light.prototype.clone.call(this, a);
  a.target = this.target.clone();
  a.intensity = this.intensity;
  a.castShadow = this.castShadow;
  a.onlyShadow = this.onlyShadow;
  a.shadowCameraNear = this.shadowCameraNear;
  a.shadowCameraFar = this.shadowCameraFar;
  a.shadowCameraLeft = this.shadowCameraLeft;
  a.shadowCameraRight = this.shadowCameraRight;
  a.shadowCameraTop = this.shadowCameraTop;
  a.shadowCameraBottom = this.shadowCameraBottom;
  a.shadowCameraVisible = this.shadowCameraVisible;
  a.shadowBias = this.shadowBias;
  a.shadowDarkness = this.shadowDarkness;
  a.shadowMapWidth = this.shadowMapWidth;
  a.shadowMapHeight = this.shadowMapHeight;
  a.shadowCascade = this.shadowCascade;
  a.shadowCascadeOffset.copy(this.shadowCascadeOffset);
  a.shadowCascadeCount = this.shadowCascadeCount;
  a.shadowCascadeBias = this.shadowCascadeBias.slice(0);
  a.shadowCascadeWidth = this.shadowCascadeWidth.slice(0);
  a.shadowCascadeHeight = this.shadowCascadeHeight.slice(0);
  a.shadowCascadeNearZ = this.shadowCascadeNearZ.slice(0);
  a.shadowCascadeFarZ = this.shadowCascadeFarZ.slice(0);
  return a;
};
THREE.HemisphereLight = function(a, b, c) {
  THREE.Light.call(this, a);
  this.type = "HemisphereLight";
  this.position.set(0, 100, 0);
  this.groundColor = new THREE.Color(b);
  this.intensity = void 0 !== c ? c : 1;
};
THREE.HemisphereLight.prototype = Object.create(THREE.Light.prototype);
THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;
THREE.HemisphereLight.prototype.clone = function() {
  var a = new THREE.HemisphereLight;
  THREE.Light.prototype.clone.call(this, a);
  a.groundColor.copy(this.groundColor);
  a.intensity = this.intensity;
  return a;
};
THREE.PointLight = function(a, b, c) {
  THREE.Light.call(this, a);
  this.type = "PointLight";
  this.intensity = void 0 !== b ? b : 1;
  this.distance = void 0 !== c ? c : 0;
};
THREE.PointLight.prototype = Object.create(THREE.Light.prototype);
THREE.PointLight.prototype.constructor = THREE.PointLight;
THREE.PointLight.prototype.clone = function() {
  var a = new THREE.PointLight;
  THREE.Light.prototype.clone.call(this, a);
  a.intensity = this.intensity;
  a.distance = this.distance;
  return a;
};
THREE.SpotLight = function(a, b, c, d, e) {
  THREE.Light.call(this, a);
  this.type = "SpotLight";
  this.position.set(0, 1, 0);
  this.target = new THREE.Object3D;
  this.intensity = void 0 !== b ? b : 1;
  this.distance = void 0 !== c ? c : 0;
  this.angle = void 0 !== d ? d : Math.PI / 3;
  this.exponent = void 0 !== e ? e : 10;
  this.onlyShadow = this.castShadow = !1;
  this.shadowCameraNear = 50;
  this.shadowCameraFar = 5E3;
  this.shadowCameraFov = 50;
  this.shadowCameraVisible = !1;
  this.shadowBias = 0;
  this.shadowDarkness = .5;
  this.shadowMapHeight = this.shadowMapWidth = 512;
  this.shadowMatrix = this.shadowCamera = this.shadowMapSize = this.shadowMap = null;
};
THREE.SpotLight.prototype = Object.create(THREE.Light.prototype);
THREE.SpotLight.prototype.constructor = THREE.SpotLight;
THREE.SpotLight.prototype.clone = function() {
  var a = new THREE.SpotLight;
  THREE.Light.prototype.clone.call(this, a);
  a.target = this.target.clone();
  a.intensity = this.intensity;
  a.distance = this.distance;
  a.angle = this.angle;
  a.exponent = this.exponent;
  a.castShadow = this.castShadow;
  a.onlyShadow = this.onlyShadow;
  a.shadowCameraNear = this.shadowCameraNear;
  a.shadowCameraFar = this.shadowCameraFar;
  a.shadowCameraFov = this.shadowCameraFov;
  a.shadowCameraVisible = this.shadowCameraVisible;
  a.shadowBias = this.shadowBias;
  a.shadowDarkness = this.shadowDarkness;
  a.shadowMapWidth = this.shadowMapWidth;
  a.shadowMapHeight = this.shadowMapHeight;
  return a;
};
THREE.Cache = function() {
  this.files = {};
};
THREE.Cache.prototype = {
  constructor: THREE.Cache,
  add: function(a, b) {
    this.files[a] = b;
  },
  get: function(a) {
    return this.files[a];
  },
  remove: function(a) {
    delete this.files[a];
  },
  clear: function() {
    this.files = {};
  }
};
THREE.Loader = function(a) {
  this.statusDomElement = (this.showStatus = a) ? THREE.Loader.prototype.addStatusElement() : null;
  this.imageLoader = new THREE.ImageLoader;
  this.onLoadStart = function() {};
  this.onLoadProgress = function() {};
  this.onLoadComplete = function() {};
};
THREE.Loader.prototype = {
  constructor: THREE.Loader,
  crossOrigin: void 0,
  addStatusElement: function() {
    var a = document.createElement("div");
    a.style.position = "absolute";
    a.style.right = "0px";
    a.style.top = "0px";
    a.style.fontSize = "0.8em";
    a.style.textAlign = "left";
    a.style.background = "rgba(0,0,0,0.25)";
    a.style.color = "#fff";
    a.style.width = "120px";
    a.style.padding = "0.5em 0.5em 0.5em 0.5em";
    a.style.zIndex = 1E3;
    a.innerHTML = "Loading ...";
    return a;
  },
  updateProgress: function(a) {
    var b = "Loaded ",
        b = a.total ? b + ((100 * a.loaded / a.total).toFixed(0) + "%") : b + ((a.loaded / 1024).toFixed(2) + " KB");
    this.statusDomElement.innerHTML = b;
  },
  extractUrlBase: function(a) {
    a = a.split("/");
    if (1 === a.length)
      return "./";
    a.pop();
    return a.join("/") + "/";
  },
  initMaterials: function(a, b) {
    for (var c = [],
        d = 0; d < a.length; ++d)
      c[d] = this.createMaterial(a[d], b);
    return c;
  },
  needsTangents: function(a) {
    for (var b = 0,
        c = a.length; b < c; b++)
      if (a[b] instanceof THREE.ShaderMaterial)
        return !0;
    return !1;
  },
  createMaterial: function(a, b) {
    function c(a) {
      a = Math.log(a) / Math.LN2;
      return Math.pow(2, Math.round(a));
    }
    function d(a, d, e, g, h, k, r) {
      var u = b + e,
          v,
          y = THREE.Loader.Handlers.get(u);
      null !== y ? v = y.load(u) : (v = new THREE.Texture, y = f.imageLoader, y.crossOrigin = f.crossOrigin, y.load(u, function(a) {
        if (!1 === THREE.Math.isPowerOfTwo(a.width) || !1 === THREE.Math.isPowerOfTwo(a.height)) {
          var b = c(a.width),
              d = c(a.height),
              e = document.createElement("canvas");
          e.width = b;
          e.height = d;
          e.getContext("2d").drawImage(a, 0, 0, b, d);
          v.image = e;
        } else
          v.image = a;
        v.needsUpdate = !0;
      }));
      v.sourceFile = e;
      g && (v.repeat.set(g[0], g[1]), 1 !== g[0] && (v.wrapS = THREE.RepeatWrapping), 1 !== g[1] && (v.wrapT = THREE.RepeatWrapping));
      h && v.offset.set(h[0], h[1]);
      k && (e = {
        repeat: THREE.RepeatWrapping,
        mirror: THREE.MirroredRepeatWrapping
      }, void 0 !== e[k[0]] && (v.wrapS = e[k[0]]), void 0 !== e[k[1]] && (v.wrapT = e[k[1]]));
      r && (v.anisotropy = r);
      a[d] = v;
    }
    function e(a) {
      return (255 * a[0] << 16) + (255 * a[1] << 8) + 255 * a[2];
    }
    var f = this,
        g = "MeshLambertMaterial",
        h = {
          color: 15658734,
          opacity: 1,
          map: null,
          lightMap: null,
          normalMap: null,
          bumpMap: null,
          wireframe: !1
        };
    if (a.shading) {
      var k = a.shading.toLowerCase();
      "phong" === k ? g = "MeshPhongMaterial" : "basic" === k && (g = "MeshBasicMaterial");
    }
    void 0 !== a.blending && void 0 !== THREE[a.blending] && (h.blending = THREE[a.blending]);
    if (void 0 !== a.transparent || 1 > a.opacity)
      h.transparent = a.transparent;
    void 0 !== a.depthTest && (h.depthTest = a.depthTest);
    void 0 !== a.depthWrite && (h.depthWrite = a.depthWrite);
    void 0 !== a.visible && (h.visible = a.visible);
    void 0 !== a.flipSided && (h.side = THREE.BackSide);
    void 0 !== a.doubleSided && (h.side = THREE.DoubleSide);
    void 0 !== a.wireframe && (h.wireframe = a.wireframe);
    void 0 !== a.vertexColors && ("face" === a.vertexColors ? h.vertexColors = THREE.FaceColors : a.vertexColors && (h.vertexColors = THREE.VertexColors));
    a.colorDiffuse ? h.color = e(a.colorDiffuse) : a.DbgColor && (h.color = a.DbgColor);
    a.colorSpecular && (h.specular = e(a.colorSpecular));
    a.colorAmbient && (h.ambient = e(a.colorAmbient));
    a.colorEmissive && (h.emissive = e(a.colorEmissive));
    a.transparency && (h.opacity = a.transparency);
    a.specularCoef && (h.shininess = a.specularCoef);
    a.mapDiffuse && b && d(h, "map", a.mapDiffuse, a.mapDiffuseRepeat, a.mapDiffuseOffset, a.mapDiffuseWrap, a.mapDiffuseAnisotropy);
    a.mapLight && b && d(h, "lightMap", a.mapLight, a.mapLightRepeat, a.mapLightOffset, a.mapLightWrap, a.mapLightAnisotropy);
    a.mapBump && b && d(h, "bumpMap", a.mapBump, a.mapBumpRepeat, a.mapBumpOffset, a.mapBumpWrap, a.mapBumpAnisotropy);
    a.mapNormal && b && d(h, "normalMap", a.mapNormal, a.mapNormalRepeat, a.mapNormalOffset, a.mapNormalWrap, a.mapNormalAnisotropy);
    a.mapSpecular && b && d(h, "specularMap", a.mapSpecular, a.mapSpecularRepeat, a.mapSpecularOffset, a.mapSpecularWrap, a.mapSpecularAnisotropy);
    a.mapAlpha && b && d(h, "alphaMap", a.mapAlpha, a.mapAlphaRepeat, a.mapAlphaOffset, a.mapAlphaWrap, a.mapAlphaAnisotropy);
    a.mapBumpScale && (h.bumpScale = a.mapBumpScale);
    a.mapNormalFactor && (h.normalScale = new THREE.Vector2(a.mapNormalFactor, a.mapNormalFactor));
    g = new THREE[g](h);
    void 0 !== a.DbgName && (g.name = a.DbgName);
    return g;
  }
};
THREE.Loader.Handlers = {
  handlers: [],
  add: function(a, b) {
    this.handlers.push(a, b);
  },
  get: function(a) {
    for (var b = 0,
        c = this.handlers.length; b < c; b += 2) {
      var d = this.handlers[b + 1];
      if (this.handlers[b].test(a))
        return d;
    }
    return null;
  }
};
THREE.XHRLoader = function(a) {
  this.cache = new THREE.Cache;
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.XHRLoader.prototype = {
  constructor: THREE.XHRLoader,
  load: function(a, b, c, d) {
    var e = this,
        f = e.cache.get(a);
    void 0 !== f ? b && b(f) : (f = new XMLHttpRequest, f.open("GET", a, !0), f.addEventListener("load", function(c) {
      e.cache.add(a, this.response);
      b && b(this.response);
      e.manager.itemEnd(a);
    }, !1), void 0 !== c && f.addEventListener("progress", function(a) {
      c(a);
    }, !1), void 0 !== d && f.addEventListener("error", function(a) {
      d(a);
    }, !1), void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin), void 0 !== this.responseType && (f.responseType = this.responseType), f.send(null), e.manager.itemStart(a));
  },
  setResponseType: function(a) {
    this.responseType = a;
  },
  setCrossOrigin: function(a) {
    this.crossOrigin = a;
  }
};
THREE.ImageLoader = function(a) {
  this.cache = new THREE.Cache;
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.ImageLoader.prototype = {
  constructor: THREE.ImageLoader,
  load: function(a, b, c, d) {
    var e = this,
        f = e.cache.get(a);
    if (void 0 !== f)
      b(f);
    else
      return f = document.createElement("img"), void 0 !== b && f.addEventListener("load", function(c) {
        e.cache.add(a, this);
        b(this);
        e.manager.itemEnd(a);
      }, !1), void 0 !== c && f.addEventListener("progress", function(a) {
        c(a);
      }, !1), void 0 !== d && f.addEventListener("error", function(a) {
        d(a);
      }, !1), void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin), f.src = a, e.manager.itemStart(a), f;
  },
  setCrossOrigin: function(a) {
    this.crossOrigin = a;
  }
};
THREE.JSONLoader = function(a) {
  THREE.Loader.call(this, a);
  this.withCredentials = !1;
};
THREE.JSONLoader.prototype = Object.create(THREE.Loader.prototype);
THREE.JSONLoader.prototype.constructor = THREE.JSONLoader;
THREE.JSONLoader.prototype.load = function(a, b, c) {
  c = c && "string" === typeof c ? c : this.extractUrlBase(a);
  this.onLoadStart();
  this.loadAjaxJSON(this, a, b, c);
};
THREE.JSONLoader.prototype.loadAjaxJSON = function(a, b, c, d, e) {
  var f = new XMLHttpRequest,
      g = 0;
  f.onreadystatechange = function() {
    if (f.readyState === f.DONE)
      if (200 === f.status || 0 === f.status) {
        if (f.responseText) {
          var h = JSON.parse(f.responseText);
          if (void 0 !== h.metadata && "scene" === h.metadata.type) {
            console.error('THREE.JSONLoader: "' + b + '" seems to be a Scene. Use THREE.SceneLoader instead.');
            return;
          }
          h = a.parse(h, d);
          c(h.geometry, h.materials);
        } else
          console.error('THREE.JSONLoader: "' + b + '" seems to be unreachable or the file is empty.');
        a.onLoadComplete();
      } else
        console.error("THREE.JSONLoader: Couldn't load \"" + b + '" (' + f.status + ")");
    else
      f.readyState === f.LOADING ? e && (0 === g && (g = f.getResponseHeader("Content-Length")), e({
        total: g,
        loaded: f.responseText.length
      })) : f.readyState === f.HEADERS_RECEIVED && void 0 !== e && (g = f.getResponseHeader("Content-Length"));
  };
  f.open("GET", b, !0);
  f.withCredentials = this.withCredentials;
  f.send(null);
};
THREE.JSONLoader.prototype.parse = function(a, b) {
  var c = new THREE.Geometry,
      d = void 0 !== a.scale ? 1 / a.scale : 1;
  (function(b) {
    var d,
        g,
        h,
        k,
        n,
        p,
        q,
        m,
        t,
        s,
        r,
        u,
        v,
        y = a.faces;
    p = a.vertices;
    var C = a.normals,
        x = a.colors,
        F = 0;
    if (void 0 !== a.uvs) {
      for (d = 0; d < a.uvs.length; d++)
        a.uvs[d].length && F++;
      for (d = 0; d < F; d++)
        c.faceVertexUvs[d] = [];
    }
    k = 0;
    for (n = p.length; k < n; )
      d = new THREE.Vector3, d.x = p[k++] * b, d.y = p[k++] * b, d.z = p[k++] * b, c.vertices.push(d);
    k = 0;
    for (n = y.length; k < n; )
      if (b = y[k++], t = b & 1, h = b & 2, d = b & 8, q = b & 16, s = b & 32, p = b & 64, b &= 128, t) {
        t = new THREE.Face3;
        t.a = y[k];
        t.b = y[k + 1];
        t.c = y[k + 3];
        r = new THREE.Face3;
        r.a = y[k + 1];
        r.b = y[k + 2];
        r.c = y[k + 3];
        k += 4;
        h && (h = y[k++], t.materialIndex = h, r.materialIndex = h);
        h = c.faces.length;
        if (d)
          for (d = 0; d < F; d++)
            for (u = a.uvs[d], c.faceVertexUvs[d][h] = [], c.faceVertexUvs[d][h + 1] = [], g = 0; 4 > g; g++)
              m = y[k++], v = u[2 * m], m = u[2 * m + 1], v = new THREE.Vector2(v, m), 2 !== g && c.faceVertexUvs[d][h].push(v), 0 !== g && c.faceVertexUvs[d][h + 1].push(v);
        q && (q = 3 * y[k++], t.normal.set(C[q++], C[q++], C[q]), r.normal.copy(t.normal));
        if (s)
          for (d = 0; 4 > d; d++)
            q = 3 * y[k++], s = new THREE.Vector3(C[q++], C[q++], C[q]), 2 !== d && t.vertexNormals.push(s), 0 !== d && r.vertexNormals.push(s);
        p && (p = y[k++], p = x[p], t.color.setHex(p), r.color.setHex(p));
        if (b)
          for (d = 0; 4 > d; d++)
            p = y[k++], p = x[p], 2 !== d && t.vertexColors.push(new THREE.Color(p)), 0 !== d && r.vertexColors.push(new THREE.Color(p));
        c.faces.push(t);
        c.faces.push(r);
      } else {
        t = new THREE.Face3;
        t.a = y[k++];
        t.b = y[k++];
        t.c = y[k++];
        h && (h = y[k++], t.materialIndex = h);
        h = c.faces.length;
        if (d)
          for (d = 0; d < F; d++)
            for (u = a.uvs[d], c.faceVertexUvs[d][h] = [], g = 0; 3 > g; g++)
              m = y[k++], v = u[2 * m], m = u[2 * m + 1], v = new THREE.Vector2(v, m), c.faceVertexUvs[d][h].push(v);
        q && (q = 3 * y[k++], t.normal.set(C[q++], C[q++], C[q]));
        if (s)
          for (d = 0; 3 > d; d++)
            q = 3 * y[k++], s = new THREE.Vector3(C[q++], C[q++], C[q]), t.vertexNormals.push(s);
        p && (p = y[k++], t.color.setHex(x[p]));
        if (b)
          for (d = 0; 3 > d; d++)
            p = y[k++], t.vertexColors.push(new THREE.Color(x[p]));
        c.faces.push(t);
      }
  })(d);
  (function() {
    var b = void 0 !== a.influencesPerVertex ? a.influencesPerVertex : 2;
    if (a.skinWeights)
      for (var d = 0,
          g = a.skinWeights.length; d < g; d += b)
        c.skinWeights.push(new THREE.Vector4(a.skinWeights[d], 1 < b ? a.skinWeights[d + 1] : 0, 2 < b ? a.skinWeights[d + 2] : 0, 3 < b ? a.skinWeights[d + 3] : 0));
    if (a.skinIndices)
      for (d = 0, g = a.skinIndices.length; d < g; d += b)
        c.skinIndices.push(new THREE.Vector4(a.skinIndices[d], 1 < b ? a.skinIndices[d + 1] : 0, 2 < b ? a.skinIndices[d + 2] : 0, 3 < b ? a.skinIndices[d + 3] : 0));
    c.bones = a.bones;
    c.bones && 0 < c.bones.length && (c.skinWeights.length !== c.skinIndices.length || c.skinIndices.length !== c.vertices.length) && console.warn("When skinning, number of vertices (" + c.vertices.length + "), skinIndices (" + c.skinIndices.length + "), and skinWeights (" + c.skinWeights.length + ") should match.");
    c.animation = a.animation;
    c.animations = a.animations;
  })();
  (function(b) {
    if (void 0 !== a.morphTargets) {
      var d,
          g,
          h,
          k,
          n,
          p;
      d = 0;
      for (g = a.morphTargets.length; d < g; d++)
        for (c.morphTargets[d] = {}, c.morphTargets[d].name = a.morphTargets[d].name, c.morphTargets[d].vertices = [], n = c.morphTargets[d].vertices, p = a.morphTargets[d].vertices, h = 0, k = p.length; h < k; h += 3) {
          var q = new THREE.Vector3;
          q.x = p[h] * b;
          q.y = p[h + 1] * b;
          q.z = p[h + 2] * b;
          n.push(q);
        }
    }
    if (void 0 !== a.morphColors)
      for (d = 0, g = a.morphColors.length; d < g; d++)
        for (c.morphColors[d] = {}, c.morphColors[d].name = a.morphColors[d].name, c.morphColors[d].colors = [], k = c.morphColors[d].colors, n = a.morphColors[d].colors, b = 0, h = n.length; b < h; b += 3)
          p = new THREE.Color(16755200), p.setRGB(n[b], n[b + 1], n[b + 2]), k.push(p);
  })(d);
  c.computeFaceNormals();
  c.computeBoundingSphere();
  if (void 0 === a.materials || 0 === a.materials.length)
    return {geometry: c};
  d = this.initMaterials(a.materials, b);
  this.needsTangents(d) && c.computeTangents();
  return {
    geometry: c,
    materials: d
  };
};
THREE.LoadingManager = function(a, b, c) {
  var d = this,
      e = 0,
      f = 0;
  this.onLoad = a;
  this.onProgress = b;
  this.onError = c;
  this.itemStart = function(a) {
    f++;
  };
  this.itemEnd = function(a) {
    e++;
    if (void 0 !== d.onProgress)
      d.onProgress(a, e, f);
    if (e === f && void 0 !== d.onLoad)
      d.onLoad();
  };
};
THREE.DefaultLoadingManager = new THREE.LoadingManager;
THREE.BufferGeometryLoader = function(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.BufferGeometryLoader.prototype = {
  constructor: THREE.BufferGeometryLoader,
  load: function(a, b, c, d) {
    var e = this,
        f = new THREE.XHRLoader(e.manager);
    f.setCrossOrigin(this.crossOrigin);
    f.load(a, function(a) {
      b(e.parse(JSON.parse(a)));
    }, c, d);
  },
  setCrossOrigin: function(a) {
    this.crossOrigin = a;
  },
  parse: function(a) {
    var b = new THREE.BufferGeometry,
        c = a.attributes,
        d;
    for (d in c) {
      var e = c[d],
          f = new self[e.type](e.array);
      b.addAttribute(d, new THREE.BufferAttribute(f, e.itemSize));
    }
    c = a.offsets;
    void 0 !== c && (b.offsets = JSON.parse(JSON.stringify(c)));
    a = a.boundingSphere;
    void 0 !== a && (c = new THREE.Vector3, void 0 !== a.center && c.fromArray(a.center), b.boundingSphere = new THREE.Sphere(c, a.radius));
    return b;
  }
};
THREE.MaterialLoader = function(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.MaterialLoader.prototype = {
  constructor: THREE.MaterialLoader,
  load: function(a, b, c, d) {
    var e = this,
        f = new THREE.XHRLoader(e.manager);
    f.setCrossOrigin(this.crossOrigin);
    f.load(a, function(a) {
      b(e.parse(JSON.parse(a)));
    }, c, d);
  },
  setCrossOrigin: function(a) {
    this.crossOrigin = a;
  },
  parse: function(a) {
    var b = new THREE[a.type];
    void 0 !== a.color && b.color.setHex(a.color);
    void 0 !== a.ambient && b.ambient.setHex(a.ambient);
    void 0 !== a.emissive && b.emissive.setHex(a.emissive);
    void 0 !== a.specular && b.specular.setHex(a.specular);
    void 0 !== a.shininess && (b.shininess = a.shininess);
    void 0 !== a.uniforms && (b.uniforms = a.uniforms);
    void 0 !== a.vertexShader && (b.vertexShader = a.vertexShader);
    void 0 !== a.fragmentShader && (b.fragmentShader = a.fragmentShader);
    void 0 !== a.vertexColors && (b.vertexColors = a.vertexColors);
    void 0 !== a.shading && (b.shading = a.shading);
    void 0 !== a.blending && (b.blending = a.blending);
    void 0 !== a.side && (b.side = a.side);
    void 0 !== a.opacity && (b.opacity = a.opacity);
    void 0 !== a.transparent && (b.transparent = a.transparent);
    void 0 !== a.wireframe && (b.wireframe = a.wireframe);
    if (void 0 !== a.materials)
      for (var c = 0,
          d = a.materials.length; c < d; c++)
        b.materials.push(this.parse(a.materials[c]));
    return b;
  }
};
THREE.ObjectLoader = function(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.ObjectLoader.prototype = {
  constructor: THREE.ObjectLoader,
  load: function(a, b, c, d) {
    var e = this,
        f = new THREE.XHRLoader(e.manager);
    f.setCrossOrigin(this.crossOrigin);
    f.load(a, function(a) {
      b(e.parse(JSON.parse(a)));
    }, c, d);
  },
  setCrossOrigin: function(a) {
    this.crossOrigin = a;
  },
  parse: function(a) {
    var b = this.parseGeometries(a.geometries),
        c = this.parseMaterials(a.materials);
    return this.parseObject(a.object, b, c);
  },
  parseGeometries: function(a) {
    var b = {};
    if (void 0 !== a)
      for (var c = new THREE.JSONLoader,
          d = new THREE.BufferGeometryLoader,
          e = 0,
          f = a.length; e < f; e++) {
        var g,
            h = a[e];
        switch (h.type) {
          case "PlaneGeometry":
            g = new THREE.PlaneGeometry(h.width, h.height, h.widthSegments, h.heightSegments);
            break;
          case "BoxGeometry":
          case "CubeGeometry":
            g = new THREE.BoxGeometry(h.width, h.height, h.depth, h.widthSegments, h.heightSegments, h.depthSegments);
            break;
          case "CircleGeometry":
            g = new THREE.CircleGeometry(h.radius, h.segments);
            break;
          case "CylinderGeometry":
            g = new THREE.CylinderGeometry(h.radiusTop, h.radiusBottom, h.height, h.radialSegments, h.heightSegments, h.openEnded);
            break;
          case "SphereGeometry":
            g = new THREE.SphereGeometry(h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);
            break;
          case "IcosahedronGeometry":
            g = new THREE.IcosahedronGeometry(h.radius, h.detail);
            break;
          case "TorusGeometry":
            g = new THREE.TorusGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.arc);
            break;
          case "TorusKnotGeometry":
            g = new THREE.TorusKnotGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.p, h.q, h.heightScale);
            break;
          case "BufferGeometry":
            g = d.parse(h.data);
            break;
          case "Geometry":
            g = c.parse(h.data).geometry;
        }
        g.uuid = h.uuid;
        void 0 !== h.name && (g.name = h.name);
        b[h.uuid] = g;
      }
    return b;
  },
  parseMaterials: function(a) {
    var b = {};
    if (void 0 !== a)
      for (var c = new THREE.MaterialLoader,
          d = 0,
          e = a.length; d < e; d++) {
        var f = a[d],
            g = c.parse(f);
        g.uuid = f.uuid;
        void 0 !== f.name && (g.name = f.name);
        b[f.uuid] = g;
      }
    return b;
  },
  parseObject: function() {
    var a = new THREE.Matrix4;
    return function(b, c, d) {
      var e;
      switch (b.type) {
        case "Scene":
          e = new THREE.Scene;
          break;
        case "PerspectiveCamera":
          e = new THREE.PerspectiveCamera(b.fov, b.aspect, b.near, b.far);
          break;
        case "OrthographicCamera":
          e = new THREE.OrthographicCamera(b.left, b.right, b.top, b.bottom, b.near, b.far);
          break;
        case "AmbientLight":
          e = new THREE.AmbientLight(b.color);
          break;
        case "DirectionalLight":
          e = new THREE.DirectionalLight(b.color, b.intensity);
          break;
        case "PointLight":
          e = new THREE.PointLight(b.color, b.intensity, b.distance);
          break;
        case "SpotLight":
          e = new THREE.SpotLight(b.color, b.intensity, b.distance, b.angle, b.exponent);
          break;
        case "HemisphereLight":
          e = new THREE.HemisphereLight(b.color, b.groundColor, b.intensity);
          break;
        case "Mesh":
          e = c[b.geometry];
          var f = d[b.material];
          void 0 === e && console.warn("THREE.ObjectLoader: Undefined geometry", b.geometry);
          void 0 === f && console.warn("THREE.ObjectLoader: Undefined material", b.material);
          e = new THREE.Mesh(e, f);
          break;
        case "Line":
          e = c[b.geometry];
          f = d[b.material];
          void 0 === e && console.warn("THREE.ObjectLoader: Undefined geometry", b.geometry);
          void 0 === f && console.warn("THREE.ObjectLoader: Undefined material", b.material);
          e = new THREE.Line(e, f);
          break;
        case "Sprite":
          f = d[b.material];
          void 0 === f && console.warn("THREE.ObjectLoader: Undefined material", b.material);
          e = new THREE.Sprite(f);
          break;
        case "Group":
          e = new THREE.Group;
          break;
        default:
          e = new THREE.Object3D;
      }
      e.uuid = b.uuid;
      void 0 !== b.name && (e.name = b.name);
      void 0 !== b.matrix ? (a.fromArray(b.matrix), a.decompose(e.position, e.quaternion, e.scale)) : (void 0 !== b.position && e.position.fromArray(b.position), void 0 !== b.rotation && e.rotation.fromArray(b.rotation), void 0 !== b.scale && e.scale.fromArray(b.scale));
      void 0 !== b.visible && (e.visible = b.visible);
      void 0 !== b.userData && (e.userData = b.userData);
      if (void 0 !== b.children)
        for (var g in b.children)
          e.add(this.parseObject(b.children[g], c, d));
      return e;
    };
  }()
};
THREE.TextureLoader = function(a) {
  this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.TextureLoader.prototype = {
  constructor: THREE.TextureLoader,
  load: function(a, b, c, d) {
    var e = new THREE.ImageLoader(this.manager);
    e.setCrossOrigin(this.crossOrigin);
    e.load(a, function(a) {
      a = new THREE.Texture(a);
      a.needsUpdate = !0;
      void 0 !== b && b(a);
    }, c, d);
  },
  setCrossOrigin: function(a) {
    this.crossOrigin = a;
  }
};
THREE.DataTextureLoader = THREE.BinaryTextureLoader = function() {
  this._parser = null;
};
THREE.BinaryTextureLoader.prototype = {
  constructor: THREE.BinaryTextureLoader,
  load: function(a, b, c, d) {
    var e = this,
        f = new THREE.DataTexture,
        g = new THREE.XHRLoader;
    g.setResponseType("arraybuffer");
    g.load(a, function(a) {
      if (a = e._parser(a))
        void 0 !== a.image ? f.image = a.image : void 0 !== a.data && (f.image.width = a.width, f.image.height = a.height, f.image.data = a.data), f.wrapS = void 0 !== a.wrapS ? a.wrapS : THREE.ClampToEdgeWrapping, f.wrapT = void 0 !== a.wrapT ? a.wrapT : THREE.ClampToEdgeWrapping, f.magFilter = void 0 !== a.magFilter ? a.magFilter : THREE.LinearFilter, f.minFilter = void 0 !== a.minFilter ? a.minFilter : THREE.LinearMipMapLinearFilter, f.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (f.format = a.format), void 0 !== a.type && (f.type = a.type), void 0 !== a.mipmaps && (f.mipmaps = a.mipmaps), 1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter), f.needsUpdate = !0, b && b(f, a);
    }, c, d);
    return f;
  }
};
THREE.CompressedTextureLoader = function() {
  this._parser = null;
};
THREE.CompressedTextureLoader.prototype = {
  constructor: THREE.CompressedTextureLoader,
  load: function(a, b, c) {
    var d = this,
        e = [],
        f = new THREE.CompressedTexture;
    f.image = e;
    var g = new THREE.XHRLoader;
    g.setResponseType("arraybuffer");
    if (a instanceof Array) {
      var h = 0;
      c = function(c) {
        g.load(a[c], function(a) {
          a = d._parser(a, !0);
          e[c] = {
            width: a.width,
            height: a.height,
            format: a.format,
            mipmaps: a.mipmaps
          };
          h += 1;
          6 === h && (1 == a.mipmapCount && (f.minFilter = THREE.LinearFilter), f.format = a.format, f.needsUpdate = !0, b && b(f));
        });
      };
      for (var k = 0,
          n = a.length; k < n; ++k)
        c(k);
    } else
      g.load(a, function(a) {
        a = d._parser(a, !0);
        if (a.isCubemap)
          for (var c = a.mipmaps.length / a.mipmapCount,
              g = 0; g < c; g++) {
            e[g] = {mipmaps: []};
            for (var h = 0; h < a.mipmapCount; h++)
              e[g].mipmaps.push(a.mipmaps[g * a.mipmapCount + h]), e[g].format = a.format, e[g].width = a.width, e[g].height = a.height;
          }
        else
          f.image.width = a.width, f.image.height = a.height, f.mipmaps = a.mipmaps;
        1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter);
        f.format = a.format;
        f.needsUpdate = !0;
        b && b(f);
      });
    return f;
  }
};
THREE.Material = function() {
  Object.defineProperty(this, "id", {value: THREE.MaterialIdCount++});
  this.uuid = THREE.Math.generateUUID();
  this.name = "";
  this.type = "Material";
  this.side = THREE.FrontSide;
  this.opacity = 1;
  this.transparent = !1;
  this.blending = THREE.NormalBlending;
  this.blendSrc = THREE.SrcAlphaFactor;
  this.blendDst = THREE.OneMinusSrcAlphaFactor;
  this.blendEquation = THREE.AddEquation;
  this.depthWrite = this.depthTest = !0;
  this.polygonOffset = !1;
  this.overdraw = this.alphaTest = this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
  this.needsUpdate = this.visible = !0;
};
THREE.Material.prototype = {
  constructor: THREE.Material,
  setValues: function(a) {
    if (void 0 !== a)
      for (var b in a) {
        var c = a[b];
        if (void 0 === c)
          console.warn("THREE.Material: '" + b + "' parameter is undefined.");
        else if (b in this) {
          var d = this[b];
          d instanceof THREE.Color ? d.set(c) : d instanceof THREE.Vector3 && c instanceof THREE.Vector3 ? d.copy(c) : this[b] = "overdraw" == b ? Number(c) : c;
        }
      }
  },
  toJSON: function() {
    var a = {
      metadata: {
        version: 4.2,
        type: "material",
        generator: "MaterialExporter"
      },
      uuid: this.uuid,
      type: this.type
    };
    "" !== this.name && (a.name = this.name);
    this instanceof THREE.MeshBasicMaterial ? (a.color = this.color.getHex(), this.vertexColors !== THREE.NoColors && (a.vertexColors = this.vertexColors), this.blending !== THREE.NormalBlending && (a.blending = this.blending), this.side !== THREE.FrontSide && (a.side = this.side)) : this instanceof THREE.MeshLambertMaterial ? (a.color = this.color.getHex(), a.ambient = this.ambient.getHex(), a.emissive = this.emissive.getHex(), this.vertexColors !== THREE.NoColors && (a.vertexColors = this.vertexColors), this.blending !== THREE.NormalBlending && (a.blending = this.blending), this.side !== THREE.FrontSide && (a.side = this.side)) : this instanceof THREE.MeshPhongMaterial ? (a.color = this.color.getHex(), a.ambient = this.ambient.getHex(), a.emissive = this.emissive.getHex(), a.specular = this.specular.getHex(), a.shininess = this.shininess, this.vertexColors !== THREE.NoColors && (a.vertexColors = this.vertexColors), this.blending !== THREE.NormalBlending && (a.blending = this.blending), this.side !== THREE.FrontSide && (a.side = this.side)) : this instanceof THREE.MeshNormalMaterial ? (this.shading !== THREE.FlatShading && (a.shading = this.shading), this.blending !== THREE.NormalBlending && (a.blending = this.blending), this.side !== THREE.FrontSide && (a.side = this.side)) : this instanceof THREE.MeshDepthMaterial ? (this.blending !== THREE.NormalBlending && (a.blending = this.blending), this.side !== THREE.FrontSide && (a.side = this.side)) : this instanceof THREE.ShaderMaterial ? (a.uniforms = this.uniforms, a.vertexShader = this.vertexShader, a.fragmentShader = this.fragmentShader) : this instanceof THREE.SpriteMaterial && (a.color = this.color.getHex());
    1 > this.opacity && (a.opacity = this.opacity);
    !1 !== this.transparent && (a.transparent = this.transparent);
    !1 !== this.wireframe && (a.wireframe = this.wireframe);
    return a;
  },
  clone: function(a) {
    void 0 === a && (a = new THREE.Material);
    a.name = this.name;
    a.side = this.side;
    a.opacity = this.opacity;
    a.transparent = this.transparent;
    a.blending = this.blending;
    a.blendSrc = this.blendSrc;
    a.blendDst = this.blendDst;
    a.blendEquation = this.blendEquation;
    a.depthTest = this.depthTest;
    a.depthWrite = this.depthWrite;
    a.polygonOffset = this.polygonOffset;
    a.polygonOffsetFactor = this.polygonOffsetFactor;
    a.polygonOffsetUnits = this.polygonOffsetUnits;
    a.alphaTest = this.alphaTest;
    a.overdraw = this.overdraw;
    a.visible = this.visible;
    return a;
  },
  dispose: function() {
    this.dispatchEvent({type: "dispose"});
  }
};
THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);
THREE.MaterialIdCount = 0;
THREE.LineBasicMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "LineBasicMaterial";
  this.color = new THREE.Color(16777215);
  this.linewidth = 1;
  this.linejoin = this.linecap = "round";
  this.vertexColors = THREE.NoColors;
  this.fog = !0;
  this.setValues(a);
};
THREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;
THREE.LineBasicMaterial.prototype.clone = function() {
  var a = new THREE.LineBasicMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.color.copy(this.color);
  a.linewidth = this.linewidth;
  a.linecap = this.linecap;
  a.linejoin = this.linejoin;
  a.vertexColors = this.vertexColors;
  a.fog = this.fog;
  return a;
};
THREE.LineDashedMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "LineDashedMaterial";
  this.color = new THREE.Color(16777215);
  this.scale = this.linewidth = 1;
  this.dashSize = 3;
  this.gapSize = 1;
  this.vertexColors = !1;
  this.fog = !0;
  this.setValues(a);
};
THREE.LineDashedMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;
THREE.LineDashedMaterial.prototype.clone = function() {
  var a = new THREE.LineDashedMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.color.copy(this.color);
  a.linewidth = this.linewidth;
  a.scale = this.scale;
  a.dashSize = this.dashSize;
  a.gapSize = this.gapSize;
  a.vertexColors = this.vertexColors;
  a.fog = this.fog;
  return a;
};
THREE.MeshBasicMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "MeshBasicMaterial";
  this.color = new THREE.Color(16777215);
  this.envMap = this.alphaMap = this.specularMap = this.lightMap = this.map = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = .98;
  this.fog = !0;
  this.shading = THREE.SmoothShading;
  this.wireframe = !1;
  this.wireframeLinewidth = 1;
  this.wireframeLinejoin = this.wireframeLinecap = "round";
  this.vertexColors = THREE.NoColors;
  this.morphTargets = this.skinning = !1;
  this.setValues(a);
};
THREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;
THREE.MeshBasicMaterial.prototype.clone = function() {
  var a = new THREE.MeshBasicMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.color.copy(this.color);
  a.map = this.map;
  a.lightMap = this.lightMap;
  a.specularMap = this.specularMap;
  a.alphaMap = this.alphaMap;
  a.envMap = this.envMap;
  a.combine = this.combine;
  a.reflectivity = this.reflectivity;
  a.refractionRatio = this.refractionRatio;
  a.fog = this.fog;
  a.shading = this.shading;
  a.wireframe = this.wireframe;
  a.wireframeLinewidth = this.wireframeLinewidth;
  a.wireframeLinecap = this.wireframeLinecap;
  a.wireframeLinejoin = this.wireframeLinejoin;
  a.vertexColors = this.vertexColors;
  a.skinning = this.skinning;
  a.morphTargets = this.morphTargets;
  return a;
};
THREE.MeshLambertMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "MeshLambertMaterial";
  this.color = new THREE.Color(16777215);
  this.ambient = new THREE.Color(16777215);
  this.emissive = new THREE.Color(0);
  this.wrapAround = !1;
  this.wrapRGB = new THREE.Vector3(1, 1, 1);
  this.envMap = this.alphaMap = this.specularMap = this.lightMap = this.map = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = .98;
  this.fog = !0;
  this.shading = THREE.SmoothShading;
  this.wireframe = !1;
  this.wireframeLinewidth = 1;
  this.wireframeLinejoin = this.wireframeLinecap = "round";
  this.vertexColors = THREE.NoColors;
  this.morphNormals = this.morphTargets = this.skinning = !1;
  this.setValues(a);
};
THREE.MeshLambertMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;
THREE.MeshLambertMaterial.prototype.clone = function() {
  var a = new THREE.MeshLambertMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.color.copy(this.color);
  a.ambient.copy(this.ambient);
  a.emissive.copy(this.emissive);
  a.wrapAround = this.wrapAround;
  a.wrapRGB.copy(this.wrapRGB);
  a.map = this.map;
  a.lightMap = this.lightMap;
  a.specularMap = this.specularMap;
  a.alphaMap = this.alphaMap;
  a.envMap = this.envMap;
  a.combine = this.combine;
  a.reflectivity = this.reflectivity;
  a.refractionRatio = this.refractionRatio;
  a.fog = this.fog;
  a.shading = this.shading;
  a.wireframe = this.wireframe;
  a.wireframeLinewidth = this.wireframeLinewidth;
  a.wireframeLinecap = this.wireframeLinecap;
  a.wireframeLinejoin = this.wireframeLinejoin;
  a.vertexColors = this.vertexColors;
  a.skinning = this.skinning;
  a.morphTargets = this.morphTargets;
  a.morphNormals = this.morphNormals;
  return a;
};
THREE.MeshPhongMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "MeshPhongMaterial";
  this.color = new THREE.Color(16777215);
  this.ambient = new THREE.Color(16777215);
  this.emissive = new THREE.Color(0);
  this.specular = new THREE.Color(1118481);
  this.shininess = 30;
  this.wrapAround = this.metal = !1;
  this.wrapRGB = new THREE.Vector3(1, 1, 1);
  this.bumpMap = this.lightMap = this.map = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalScale = new THREE.Vector2(1, 1);
  this.envMap = this.alphaMap = this.specularMap = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = .98;
  this.fog = !0;
  this.shading = THREE.SmoothShading;
  this.wireframe = !1;
  this.wireframeLinewidth = 1;
  this.wireframeLinejoin = this.wireframeLinecap = "round";
  this.vertexColors = THREE.NoColors;
  this.morphNormals = this.morphTargets = this.skinning = !1;
  this.setValues(a);
};
THREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;
THREE.MeshPhongMaterial.prototype.clone = function() {
  var a = new THREE.MeshPhongMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.color.copy(this.color);
  a.ambient.copy(this.ambient);
  a.emissive.copy(this.emissive);
  a.specular.copy(this.specular);
  a.shininess = this.shininess;
  a.metal = this.metal;
  a.wrapAround = this.wrapAround;
  a.wrapRGB.copy(this.wrapRGB);
  a.map = this.map;
  a.lightMap = this.lightMap;
  a.bumpMap = this.bumpMap;
  a.bumpScale = this.bumpScale;
  a.normalMap = this.normalMap;
  a.normalScale.copy(this.normalScale);
  a.specularMap = this.specularMap;
  a.alphaMap = this.alphaMap;
  a.envMap = this.envMap;
  a.combine = this.combine;
  a.reflectivity = this.reflectivity;
  a.refractionRatio = this.refractionRatio;
  a.fog = this.fog;
  a.shading = this.shading;
  a.wireframe = this.wireframe;
  a.wireframeLinewidth = this.wireframeLinewidth;
  a.wireframeLinecap = this.wireframeLinecap;
  a.wireframeLinejoin = this.wireframeLinejoin;
  a.vertexColors = this.vertexColors;
  a.skinning = this.skinning;
  a.morphTargets = this.morphTargets;
  a.morphNormals = this.morphNormals;
  return a;
};
THREE.MeshDepthMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "MeshDepthMaterial";
  this.wireframe = this.morphTargets = !1;
  this.wireframeLinewidth = 1;
  this.setValues(a);
};
THREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;
THREE.MeshDepthMaterial.prototype.clone = function() {
  var a = new THREE.MeshDepthMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.wireframe = this.wireframe;
  a.wireframeLinewidth = this.wireframeLinewidth;
  return a;
};
THREE.MeshNormalMaterial = function(a) {
  THREE.Material.call(this, a);
  this.type = "MeshNormalMaterial";
  this.shading = THREE.FlatShading;
  this.wireframe = !1;
  this.wireframeLinewidth = 1;
  this.morphTargets = !1;
  this.setValues(a);
};
THREE.MeshNormalMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;
THREE.MeshNormalMaterial.prototype.clone = function() {
  var a = new THREE.MeshNormalMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.shading = this.shading;
  a.wireframe = this.wireframe;
  a.wireframeLinewidth = this.wireframeLinewidth;
  return a;
};
THREE.MeshFaceMaterial = function(a) {
  this.uuid = THREE.Math.generateUUID();
  this.type = "MeshFaceMaterial";
  this.materials = a instanceof Array ? a : [];
};
THREE.MeshFaceMaterial.prototype = {
  constructor: THREE.MeshFaceMaterial,
  toJSON: function() {
    for (var a = {
      metadata: {
        version: 4.2,
        type: "material",
        generator: "MaterialExporter"
      },
      uuid: this.uuid,
      type: this.type,
      materials: []
    },
        b = 0,
        c = this.materials.length; b < c; b++)
      a.materials.push(this.materials[b].toJSON());
    return a;
  },
  clone: function() {
    for (var a = new THREE.MeshFaceMaterial,
        b = 0; b < this.materials.length; b++)
      a.materials.push(this.materials[b].clone());
    return a;
  }
};
THREE.PointCloudMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "PointCloudMaterial";
  this.color = new THREE.Color(16777215);
  this.map = null;
  this.size = 1;
  this.sizeAttenuation = !0;
  this.vertexColors = THREE.NoColors;
  this.fog = !0;
  this.setValues(a);
};
THREE.PointCloudMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.PointCloudMaterial.prototype.constructor = THREE.PointCloudMaterial;
THREE.PointCloudMaterial.prototype.clone = function() {
  var a = new THREE.PointCloudMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.color.copy(this.color);
  a.map = this.map;
  a.size = this.size;
  a.sizeAttenuation = this.sizeAttenuation;
  a.vertexColors = this.vertexColors;
  a.fog = this.fog;
  return a;
};
THREE.ParticleBasicMaterial = function(a) {
  console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.");
  return new THREE.PointCloudMaterial(a);
};
THREE.ParticleSystemMaterial = function(a) {
  console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.");
  return new THREE.PointCloudMaterial(a);
};
THREE.ShaderMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "ShaderMaterial";
  this.defines = {};
  this.uniforms = {};
  this.attributes = null;
  this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  this.shading = THREE.SmoothShading;
  this.linewidth = 1;
  this.wireframe = !1;
  this.wireframeLinewidth = 1;
  this.lights = this.fog = !1;
  this.vertexColors = THREE.NoColors;
  this.morphNormals = this.morphTargets = this.skinning = !1;
  this.defaultAttributeValues = {
    color: [1, 1, 1],
    uv: [0, 0],
    uv2: [0, 0]
  };
  this.index0AttributeName = void 0;
  this.setValues(a);
};
THREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;
THREE.ShaderMaterial.prototype.clone = function() {
  var a = new THREE.ShaderMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.fragmentShader = this.fragmentShader;
  a.vertexShader = this.vertexShader;
  a.uniforms = THREE.UniformsUtils.clone(this.uniforms);
  a.attributes = this.attributes;
  a.defines = this.defines;
  a.shading = this.shading;
  a.wireframe = this.wireframe;
  a.wireframeLinewidth = this.wireframeLinewidth;
  a.fog = this.fog;
  a.lights = this.lights;
  a.vertexColors = this.vertexColors;
  a.skinning = this.skinning;
  a.morphTargets = this.morphTargets;
  a.morphNormals = this.morphNormals;
  return a;
};
THREE.RawShaderMaterial = function(a) {
  THREE.ShaderMaterial.call(this, a);
  this.type = "RawShaderMaterial";
};
THREE.RawShaderMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);
THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;
THREE.RawShaderMaterial.prototype.clone = function() {
  var a = new THREE.RawShaderMaterial;
  THREE.ShaderMaterial.prototype.clone.call(this, a);
  return a;
};
THREE.SpriteMaterial = function(a) {
  THREE.Material.call(this);
  this.type = "SpriteMaterial";
  this.color = new THREE.Color(16777215);
  this.map = null;
  this.rotation = 0;
  this.fog = !1;
  this.setValues(a);
};
THREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;
THREE.SpriteMaterial.prototype.clone = function() {
  var a = new THREE.SpriteMaterial;
  THREE.Material.prototype.clone.call(this, a);
  a.color.copy(this.color);
  a.map = this.map;
  a.rotation = this.rotation;
  a.fog = this.fog;
  return a;
};
THREE.Texture = function(a, b, c, d, e, f, g, h, k) {
  Object.defineProperty(this, "id", {value: THREE.TextureIdCount++});
  this.uuid = THREE.Math.generateUUID();
  this.name = "";
  this.image = void 0 !== a ? a : THREE.Texture.DEFAULT_IMAGE;
  this.mipmaps = [];
  this.mapping = void 0 !== b ? b : THREE.Texture.DEFAULT_MAPPING;
  this.wrapS = void 0 !== c ? c : THREE.ClampToEdgeWrapping;
  this.wrapT = void 0 !== d ? d : THREE.ClampToEdgeWrapping;
  this.magFilter = void 0 !== e ? e : THREE.LinearFilter;
  this.minFilter = void 0 !== f ? f : THREE.LinearMipMapLinearFilter;
  this.anisotropy = void 0 !== k ? k : 1;
  this.format = void 0 !== g ? g : THREE.RGBAFormat;
  this.type = void 0 !== h ? h : THREE.UnsignedByteType;
  this.offset = new THREE.Vector2(0, 0);
  this.repeat = new THREE.Vector2(1, 1);
  this.generateMipmaps = !0;
  this.premultiplyAlpha = !1;
  this.flipY = !0;
  this.unpackAlignment = 4;
  this._needsUpdate = !1;
  this.onUpdate = null;
};
THREE.Texture.DEFAULT_IMAGE = void 0;
THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;
THREE.Texture.prototype = {
  constructor: THREE.Texture,
  get needsUpdate() {
    return this._needsUpdate;
  },
  set needsUpdate(a) {
    !0 === a && this.update();
    this._needsUpdate = a;
  },
  clone: function(a) {
    void 0 === a && (a = new THREE.Texture);
    a.image = this.image;
    a.mipmaps = this.mipmaps.slice(0);
    a.mapping = this.mapping;
    a.wrapS = this.wrapS;
    a.wrapT = this.wrapT;
    a.magFilter = this.magFilter;
    a.minFilter = this.minFilter;
    a.anisotropy = this.anisotropy;
    a.format = this.format;
    a.type = this.type;
    a.offset.copy(this.offset);
    a.repeat.copy(this.repeat);
    a.generateMipmaps = this.generateMipmaps;
    a.premultiplyAlpha = this.premultiplyAlpha;
    a.flipY = this.flipY;
    a.unpackAlignment = this.unpackAlignment;
    return a;
  },
  update: function() {
    this.dispatchEvent({type: "update"});
  },
  dispose: function() {
    this.dispatchEvent({type: "dispose"});
  }
};
THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);
THREE.TextureIdCount = 0;
THREE.CubeTexture = function(a, b, c, d, e, f, g, h, k) {
  b = void 0 !== b ? b : THREE.CubeReflectionMapping;
  THREE.Texture.call(this, a, b, c, d, e, f, g, h, k);
  this.images = a;
};
THREE.CubeTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;
THREE.CubeTexture.clone = function(a) {
  void 0 === a && (a = new THREE.CubeTexture);
  THREE.Texture.prototype.clone.call(this, a);
  a.images = this.images;
  return a;
};
THREE.CompressedTexture = function(a, b, c, d, e, f, g, h, k, n, p) {
  THREE.Texture.call(this, null, f, g, h, k, n, d, e, p);
  this.image = {
    width: b,
    height: c
  };
  this.mipmaps = a;
  this.generateMipmaps = this.flipY = !1;
};
THREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;
THREE.CompressedTexture.prototype.clone = function() {
  var a = new THREE.CompressedTexture;
  THREE.Texture.prototype.clone.call(this, a);
  return a;
};
THREE.DataTexture = function(a, b, c, d, e, f, g, h, k, n, p) {
  THREE.Texture.call(this, null, f, g, h, k, n, d, e, p);
  this.image = {
    data: a,
    width: b,
    height: c
  };
};
THREE.DataTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.DataTexture.prototype.constructor = THREE.DataTexture;
THREE.DataTexture.prototype.clone = function() {
  var a = new THREE.DataTexture;
  THREE.Texture.prototype.clone.call(this, a);
  return a;
};
THREE.VideoTexture = function(a, b, c, d, e, f, g, h, k) {
  THREE.Texture.call(this, a, b, c, d, e, f, g, h, k);
  this.generateMipmaps = !1;
  var n = this,
      p = function() {
        requestAnimationFrame(p);
        a.readyState === a.HAVE_ENOUGH_DATA && (n.needsUpdate = !0);
      };
  p();
};
THREE.VideoTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;
THREE.Group = function() {
  THREE.Object3D.call(this);
  this.type = "Group";
};
THREE.Group.prototype = Object.create(THREE.Object3D.prototype);
THREE.Group.prototype.constructor = THREE.Group;
THREE.PointCloud = function(a, b) {
  THREE.Object3D.call(this);
  this.type = "PointCloud";
  this.geometry = void 0 !== a ? a : new THREE.Geometry;
  this.material = void 0 !== b ? b : new THREE.PointCloudMaterial({color: 16777215 * Math.random()});
};
THREE.PointCloud.prototype = Object.create(THREE.Object3D.prototype);
THREE.PointCloud.prototype.constructor = THREE.PointCloud;
THREE.PointCloud.prototype.raycast = function() {
  var a = new THREE.Matrix4,
      b = new THREE.Ray;
  return function(c, d) {
    var e = this,
        f = e.geometry,
        g = c.params.PointCloud.threshold;
    a.getInverse(this.matrixWorld);
    b.copy(c.ray).applyMatrix4(a);
    if (null === f.boundingBox || !1 !== b.isIntersectionBox(f.boundingBox)) {
      var h = g / ((this.scale.x + this.scale.y + this.scale.z) / 3),
          k = new THREE.Vector3,
          g = function(a, f) {
            var g = b.distanceToPoint(a);
            if (g < h) {
              var k = b.closestPointToPoint(a);
              k.applyMatrix4(e.matrixWorld);
              var m = c.ray.origin.distanceTo(k);
              d.push({
                distance: m,
                distanceToRay: g,
                point: k.clone(),
                index: f,
                face: null,
                object: e
              });
            }
          };
      if (f instanceof THREE.BufferGeometry) {
        var n = f.attributes,
            p = n.position.array;
        if (void 0 !== n.index) {
          var n = n.index.array,
              q = f.offsets;
          0 === q.length && (q = [{
            start: 0,
            count: n.length,
            index: 0
          }]);
          for (var m = 0,
              t = q.length; m < t; ++m)
            for (var s = q[m].start,
                r = q[m].index,
                f = s,
                s = s + q[m].count; f < s; f++) {
              var u = r + n[f];
              k.fromArray(p, 3 * u);
              g(k, u);
            }
        } else
          for (n = p.length / 3, f = 0; f < n; f++)
            k.set(p[3 * f], p[3 * f + 1], p[3 * f + 2]), g(k, f);
      } else
        for (k = this.geometry.vertices, f = 0; f < k.length; f++)
          g(k[f], f);
    }
  };
}();
THREE.PointCloud.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.PointCloud(this.geometry, this.material));
  THREE.Object3D.prototype.clone.call(this, a);
  return a;
};
THREE.ParticleSystem = function(a, b) {
  console.warn("THREE.ParticleSystem has been renamed to THREE.PointCloud.");
  return new THREE.PointCloud(a, b);
};
THREE.Line = function(a, b, c) {
  THREE.Object3D.call(this);
  this.type = "Line";
  this.geometry = void 0 !== a ? a : new THREE.Geometry;
  this.material = void 0 !== b ? b : new THREE.LineBasicMaterial({color: 16777215 * Math.random()});
  this.mode = void 0 !== c ? c : THREE.LineStrip;
};
THREE.LineStrip = 0;
THREE.LinePieces = 1;
THREE.Line.prototype = Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.constructor = THREE.Line;
THREE.Line.prototype.raycast = function() {
  var a = new THREE.Matrix4,
      b = new THREE.Ray,
      c = new THREE.Sphere;
  return function(d, e) {
    var f = d.linePrecision,
        f = f * f,
        g = this.geometry;
    null === g.boundingSphere && g.computeBoundingSphere();
    c.copy(g.boundingSphere);
    c.applyMatrix4(this.matrixWorld);
    if (!1 !== d.ray.isIntersectionSphere(c)) {
      a.getInverse(this.matrixWorld);
      b.copy(d.ray).applyMatrix4(a);
      var h = new THREE.Vector3,
          k = new THREE.Vector3,
          n = new THREE.Vector3,
          p = new THREE.Vector3,
          q = this.mode === THREE.LineStrip ? 1 : 2;
      if (g instanceof THREE.BufferGeometry) {
        var m = g.attributes;
        if (void 0 !== m.index) {
          var t = m.index.array,
              m = m.position.array,
              s = g.offsets;
          0 === s.length && (s = [{
            start: 0,
            count: t.length,
            index: 0
          }]);
          for (var r = 0; r < s.length; r++)
            for (var u = s[r].start,
                v = s[r].count,
                y = s[r].index,
                g = u; g < u + v - 1; g += q) {
              var C = y + t[g + 1];
              h.fromArray(m, 3 * (y + t[g]));
              k.fromArray(m, 3 * C);
              C = b.distanceSqToSegment(h, k, p, n);
              C > f || (C = b.origin.distanceTo(p), C < d.near || C > d.far || e.push({
                distance: C,
                point: n.clone().applyMatrix4(this.matrixWorld),
                face: null,
                faceIndex: null,
                object: this
              }));
            }
        } else
          for (m = m.position.array, g = 0; g < m.length / 3 - 1; g += q)
            h.fromArray(m, 3 * g), k.fromArray(m, 3 * g + 3), C = b.distanceSqToSegment(h, k, p, n), C > f || (C = b.origin.distanceTo(p), C < d.near || C > d.far || e.push({
              distance: C,
              point: n.clone().applyMatrix4(this.matrixWorld),
              face: null,
              faceIndex: null,
              object: this
            }));
      } else if (g instanceof THREE.Geometry)
        for (h = g.vertices, k = h.length, g = 0; g < k - 1; g += q)
          C = b.distanceSqToSegment(h[g], h[g + 1], p, n), C > f || (C = b.origin.distanceTo(p), C < d.near || C > d.far || e.push({
            distance: C,
            point: n.clone().applyMatrix4(this.matrixWorld),
            face: null,
            faceIndex: null,
            object: this
          }));
    }
  };
}();
THREE.Line.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.Line(this.geometry, this.material, this.mode));
  THREE.Object3D.prototype.clone.call(this, a);
  return a;
};
THREE.Mesh = function(a, b) {
  THREE.Object3D.call(this);
  this.type = "Mesh";
  this.geometry = void 0 !== a ? a : new THREE.Geometry;
  this.material = void 0 !== b ? b : new THREE.MeshBasicMaterial({color: 16777215 * Math.random()});
  this.updateMorphTargets();
};
THREE.Mesh.prototype = Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.constructor = THREE.Mesh;
THREE.Mesh.prototype.updateMorphTargets = function() {
  if (void 0 !== this.geometry.morphTargets && 0 < this.geometry.morphTargets.length) {
    this.morphTargetBase = -1;
    this.morphTargetForcedOrder = [];
    this.morphTargetInfluences = [];
    this.morphTargetDictionary = {};
    for (var a = 0,
        b = this.geometry.morphTargets.length; a < b; a++)
      this.morphTargetInfluences.push(0), this.morphTargetDictionary[this.geometry.morphTargets[a].name] = a;
  }
};
THREE.Mesh.prototype.getMorphTargetIndexByName = function(a) {
  if (void 0 !== this.morphTargetDictionary[a])
    return this.morphTargetDictionary[a];
  console.log("THREE.Mesh.getMorphTargetIndexByName: morph target " + a + " does not exist. Returning 0.");
  return 0;
};
THREE.Mesh.prototype.raycast = function() {
  var a = new THREE.Matrix4,
      b = new THREE.Ray,
      c = new THREE.Sphere,
      d = new THREE.Vector3,
      e = new THREE.Vector3,
      f = new THREE.Vector3;
  return function(g, h) {
    var k = this.geometry;
    null === k.boundingSphere && k.computeBoundingSphere();
    c.copy(k.boundingSphere);
    c.applyMatrix4(this.matrixWorld);
    if (!1 !== g.ray.isIntersectionSphere(c) && (a.getInverse(this.matrixWorld), b.copy(g.ray).applyMatrix4(a), null === k.boundingBox || !1 !== b.isIntersectionBox(k.boundingBox)))
      if (k instanceof THREE.BufferGeometry) {
        var n = this.material;
        if (void 0 !== n) {
          var p = k.attributes,
              q,
              m,
              t = g.precision;
          if (void 0 !== p.index) {
            var s = p.index.array,
                r = p.position.array,
                u = k.offsets;
            0 === u.length && (u = [{
              start: 0,
              count: s.length,
              index: 0
            }]);
            for (var v = 0,
                y = u.length; v < y; ++v)
              for (var p = u[v].start,
                  C = u[v].index,
                  k = p,
                  x = p + u[v].count; k < x; k += 3) {
                p = C + s[k];
                q = C + s[k + 1];
                m = C + s[k + 2];
                d.fromArray(r, 3 * p);
                e.fromArray(r, 3 * q);
                f.fromArray(r, 3 * m);
                var F = n.side === THREE.BackSide ? b.intersectTriangle(f, e, d, !0) : b.intersectTriangle(d, e, f, n.side !== THREE.DoubleSide);
                if (null !== F) {
                  F.applyMatrix4(this.matrixWorld);
                  var z = g.ray.origin.distanceTo(F);
                  z < t || z < g.near || z > g.far || h.push({
                    distance: z,
                    point: F,
                    face: new THREE.Face3(p, q, m, THREE.Triangle.normal(d, e, f)),
                    faceIndex: null,
                    object: this
                  });
                }
              }
          } else
            for (r = p.position.array, s = k = 0, x = r.length; k < x; k += 3, s += 9)
              p = k, q = k + 1, m = k + 2, d.fromArray(r, s), e.fromArray(r, s + 3), f.fromArray(r, s + 6), F = n.side === THREE.BackSide ? b.intersectTriangle(f, e, d, !0) : b.intersectTriangle(d, e, f, n.side !== THREE.DoubleSide), null !== F && (F.applyMatrix4(this.matrixWorld), z = g.ray.origin.distanceTo(F), z < t || z < g.near || z > g.far || h.push({
                distance: z,
                point: F,
                face: new THREE.Face3(p, q, m, THREE.Triangle.normal(d, e, f)),
                faceIndex: null,
                object: this
              }));
        }
      } else if (k instanceof THREE.Geometry)
        for (s = this.material instanceof THREE.MeshFaceMaterial, r = !0 === s ? this.material.materials : null, t = g.precision, u = k.vertices, v = 0, y = k.faces.length; v < y; v++)
          if (C = k.faces[v], n = !0 === s ? r[C.materialIndex] : this.material, void 0 !== n) {
            p = u[C.a];
            q = u[C.b];
            m = u[C.c];
            if (!0 === n.morphTargets) {
              F = k.morphTargets;
              z = this.morphTargetInfluences;
              d.set(0, 0, 0);
              e.set(0, 0, 0);
              f.set(0, 0, 0);
              for (var x = 0,
                  G = F.length; x < G; x++) {
                var E = z[x];
                if (0 !== E) {
                  var w = F[x].vertices;
                  d.x += (w[C.a].x - p.x) * E;
                  d.y += (w[C.a].y - p.y) * E;
                  d.z += (w[C.a].z - p.z) * E;
                  e.x += (w[C.b].x - q.x) * E;
                  e.y += (w[C.b].y - q.y) * E;
                  e.z += (w[C.b].z - q.z) * E;
                  f.x += (w[C.c].x - m.x) * E;
                  f.y += (w[C.c].y - m.y) * E;
                  f.z += (w[C.c].z - m.z) * E;
                }
              }
              d.add(p);
              e.add(q);
              f.add(m);
              p = d;
              q = e;
              m = f;
            }
            F = n.side === THREE.BackSide ? b.intersectTriangle(m, q, p, !0) : b.intersectTriangle(p, q, m, n.side !== THREE.DoubleSide);
            null !== F && (F.applyMatrix4(this.matrixWorld), z = g.ray.origin.distanceTo(F), z < t || z < g.near || z > g.far || h.push({
              distance: z,
              point: F,
              face: C,
              faceIndex: v,
              object: this
            }));
          }
  };
}();
THREE.Mesh.prototype.clone = function(a, b) {
  void 0 === a && (a = new THREE.Mesh(this.geometry, this.material));
  THREE.Object3D.prototype.clone.call(this, a, b);
  return a;
};
THREE.Bone = function(a) {
  THREE.Object3D.call(this);
  this.skin = a;
};
THREE.Bone.prototype = Object.create(THREE.Object3D.prototype);
THREE.Bone.prototype.constructor = THREE.Bone;
THREE.Skeleton = function(a, b, c) {
  this.useVertexTexture = void 0 !== c ? c : !0;
  this.identityMatrix = new THREE.Matrix4;
  a = a || [];
  this.bones = a.slice(0);
  this.useVertexTexture ? (this.boneTextureHeight = this.boneTextureWidth = a = 256 < this.bones.length ? 64 : 64 < this.bones.length ? 32 : 16 < this.bones.length ? 16 : 8, this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4), this.boneTexture = new THREE.DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType), this.boneTexture.minFilter = THREE.NearestFilter, this.boneTexture.magFilter = THREE.NearestFilter, this.boneTexture.generateMipmaps = !1, this.boneTexture.flipY = !1) : this.boneMatrices = new Float32Array(16 * this.bones.length);
  if (void 0 === b)
    this.calculateInverses();
  else if (this.bones.length === b.length)
    this.boneInverses = b.slice(0);
  else
    for (console.warn("THREE.Skeleton bonInverses is the wrong length."), this.boneInverses = [], b = 0, a = this.bones.length; b < a; b++)
      this.boneInverses.push(new THREE.Matrix4);
};
THREE.Skeleton.prototype.calculateInverses = function() {
  this.boneInverses = [];
  for (var a = 0,
      b = this.bones.length; a < b; a++) {
    var c = new THREE.Matrix4;
    this.bones[a] && c.getInverse(this.bones[a].matrixWorld);
    this.boneInverses.push(c);
  }
};
THREE.Skeleton.prototype.pose = function() {
  for (var a,
      b = 0,
      c = this.bones.length; b < c; b++)
    (a = this.bones[b]) && a.matrixWorld.getInverse(this.boneInverses[b]);
  b = 0;
  for (c = this.bones.length; b < c; b++)
    if (a = this.bones[b])
      a.parent ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
};
THREE.Skeleton.prototype.update = function() {
  var a = new THREE.Matrix4;
  return function() {
    for (var b = 0,
        c = this.bones.length; b < c; b++)
      a.multiplyMatrices(this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix, this.boneInverses[b]), a.flattenToArrayOffset(this.boneMatrices, 16 * b);
    this.useVertexTexture && (this.boneTexture.needsUpdate = !0);
  };
}();
THREE.SkinnedMesh = function(a, b, c) {
  THREE.Mesh.call(this, a, b);
  this.type = "SkinnedMesh";
  this.bindMode = "attached";
  this.bindMatrix = new THREE.Matrix4;
  this.bindMatrixInverse = new THREE.Matrix4;
  a = [];
  if (this.geometry && void 0 !== this.geometry.bones) {
    for (var d,
        e,
        f,
        g,
        h = 0,
        k = this.geometry.bones.length; h < k; ++h)
      d = this.geometry.bones[h], e = d.pos, f = d.rotq, g = d.scl, b = new THREE.Bone(this), a.push(b), b.name = d.name, b.position.set(e[0], e[1], e[2]), b.quaternion.set(f[0], f[1], f[2], f[3]), void 0 !== g ? b.scale.set(g[0], g[1], g[2]) : b.scale.set(1, 1, 1);
    h = 0;
    for (k = this.geometry.bones.length; h < k; ++h)
      d = this.geometry.bones[h], -1 !== d.parent ? a[d.parent].add(a[h]) : this.add(a[h]);
  }
  this.normalizeSkinWeights();
  this.updateMatrixWorld(!0);
  this.bind(new THREE.Skeleton(a, void 0, c));
};
THREE.SkinnedMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;
THREE.SkinnedMesh.prototype.bind = function(a, b) {
  this.skeleton = a;
  void 0 === b && (this.updateMatrixWorld(!0), b = this.matrixWorld);
  this.bindMatrix.copy(b);
  this.bindMatrixInverse.getInverse(b);
};
THREE.SkinnedMesh.prototype.pose = function() {
  this.skeleton.pose();
};
THREE.SkinnedMesh.prototype.normalizeSkinWeights = function() {
  if (this.geometry instanceof THREE.Geometry)
    for (var a = 0; a < this.geometry.skinIndices.length; a++) {
      var b = this.geometry.skinWeights[a],
          c = 1 / b.lengthManhattan();
      Infinity !== c ? b.multiplyScalar(c) : b.set(1);
    }
};
THREE.SkinnedMesh.prototype.updateMatrixWorld = function(a) {
  THREE.Mesh.prototype.updateMatrixWorld.call(this, !0);
  "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh unreckognized bindMode: " + this.bindMode);
};
THREE.SkinnedMesh.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.SkinnedMesh(this.geometry, this.material, this.useVertexTexture));
  THREE.Mesh.prototype.clone.call(this, a);
  return a;
};
THREE.MorphAnimMesh = function(a, b) {
  THREE.Mesh.call(this, a, b);
  this.type = "MorphAnimMesh";
  this.duration = 1E3;
  this.mirroredLoop = !1;
  this.currentKeyframe = this.lastKeyframe = this.time = 0;
  this.direction = 1;
  this.directionBackwards = !1;
  this.setFrameRange(0, this.geometry.morphTargets.length - 1);
};
THREE.MorphAnimMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.MorphAnimMesh.prototype.constructor = THREE.MorphAnimMesh;
THREE.MorphAnimMesh.prototype.setFrameRange = function(a, b) {
  this.startKeyframe = a;
  this.endKeyframe = b;
  this.length = this.endKeyframe - this.startKeyframe + 1;
};
THREE.MorphAnimMesh.prototype.setDirectionForward = function() {
  this.direction = 1;
  this.directionBackwards = !1;
};
THREE.MorphAnimMesh.prototype.setDirectionBackward = function() {
  this.direction = -1;
  this.directionBackwards = !0;
};
THREE.MorphAnimMesh.prototype.parseAnimations = function() {
  var a = this.geometry;
  a.animations || (a.animations = {});
  for (var b,
      c = a.animations,
      d = /([a-z]+)_?(\d+)/,
      e = 0,
      f = a.morphTargets.length; e < f; e++) {
    var g = a.morphTargets[e].name.match(d);
    if (g && 1 < g.length) {
      g = g[1];
      c[g] || (c[g] = {
        start: Infinity,
        end: -Infinity
      });
      var h = c[g];
      e < h.start && (h.start = e);
      e > h.end && (h.end = e);
      b || (b = g);
    }
  }
  a.firstAnimation = b;
};
THREE.MorphAnimMesh.prototype.setAnimationLabel = function(a, b, c) {
  this.geometry.animations || (this.geometry.animations = {});
  this.geometry.animations[a] = {
    start: b,
    end: c
  };
};
THREE.MorphAnimMesh.prototype.playAnimation = function(a, b) {
  var c = this.geometry.animations[a];
  c ? (this.setFrameRange(c.start, c.end), this.duration = (c.end - c.start) / b * 1E3, this.time = 0) : console.warn("animation[" + a + "] undefined");
};
THREE.MorphAnimMesh.prototype.updateAnimation = function(a) {
  var b = this.duration / this.length;
  this.time += this.direction * a;
  if (this.mirroredLoop) {
    if (this.time > this.duration || 0 > this.time)
      this.direction *= -1, this.time > this.duration && (this.time = this.duration, this.directionBackwards = !0), 0 > this.time && (this.time = 0, this.directionBackwards = !1);
  } else
    this.time %= this.duration, 0 > this.time && (this.time += this.duration);
  a = this.startKeyframe + THREE.Math.clamp(Math.floor(this.time / b), 0, this.length - 1);
  a !== this.currentKeyframe && (this.morphTargetInfluences[this.lastKeyframe] = 0, this.morphTargetInfluences[this.currentKeyframe] = 1, this.morphTargetInfluences[a] = 0, this.lastKeyframe = this.currentKeyframe, this.currentKeyframe = a);
  b = this.time % b / b;
  this.directionBackwards && (b = 1 - b);
  this.morphTargetInfluences[this.currentKeyframe] = b;
  this.morphTargetInfluences[this.lastKeyframe] = 1 - b;
};
THREE.MorphAnimMesh.prototype.interpolateTargets = function(a, b, c) {
  for (var d = this.morphTargetInfluences,
      e = 0,
      f = d.length; e < f; e++)
    d[e] = 0;
  -1 < a && (d[a] = 1 - c);
  -1 < b && (d[b] = c);
};
THREE.MorphAnimMesh.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.MorphAnimMesh(this.geometry, this.material));
  a.duration = this.duration;
  a.mirroredLoop = this.mirroredLoop;
  a.time = this.time;
  a.lastKeyframe = this.lastKeyframe;
  a.currentKeyframe = this.currentKeyframe;
  a.direction = this.direction;
  a.directionBackwards = this.directionBackwards;
  THREE.Mesh.prototype.clone.call(this, a);
  return a;
};
THREE.LOD = function() {
  THREE.Object3D.call(this);
  this.objects = [];
};
THREE.LOD.prototype = Object.create(THREE.Object3D.prototype);
THREE.LOD.prototype.constructor = THREE.LOD;
THREE.LOD.prototype.addLevel = function(a, b) {
  void 0 === b && (b = 0);
  b = Math.abs(b);
  for (var c = 0; c < this.objects.length && !(b < this.objects[c].distance); c++)
    ;
  this.objects.splice(c, 0, {
    distance: b,
    object: a
  });
  this.add(a);
};
THREE.LOD.prototype.getObjectForDistance = function(a) {
  for (var b = 1,
      c = this.objects.length; b < c && !(a < this.objects[b].distance); b++)
    ;
  return this.objects[b - 1].object;
};
THREE.LOD.prototype.raycast = function() {
  var a = new THREE.Vector3;
  return function(b, c) {
    a.setFromMatrixPosition(this.matrixWorld);
    var d = b.ray.origin.distanceTo(a);
    this.getObjectForDistance(d).raycast(b, c);
  };
}();
THREE.LOD.prototype.update = function() {
  var a = new THREE.Vector3,
      b = new THREE.Vector3;
  return function(c) {
    if (1 < this.objects.length) {
      a.setFromMatrixPosition(c.matrixWorld);
      b.setFromMatrixPosition(this.matrixWorld);
      c = a.distanceTo(b);
      this.objects[0].object.visible = !0;
      for (var d = 1,
          e = this.objects.length; d < e; d++)
        if (c >= this.objects[d].distance)
          this.objects[d - 1].object.visible = !1, this.objects[d].object.visible = !0;
        else
          break;
      for (; d < e; d++)
        this.objects[d].object.visible = !1;
    }
  };
}();
THREE.LOD.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.LOD);
  THREE.Object3D.prototype.clone.call(this, a);
  for (var b = 0,
      c = this.objects.length; b < c; b++) {
    var d = this.objects[b].object.clone();
    d.visible = 0 === b;
    a.addLevel(d, this.objects[b].distance);
  }
  return a;
};
THREE.Sprite = function() {
  var a = new Uint16Array([0, 1, 2, 0, 2, 3]),
      b = new Float32Array([-.5, -.5, 0, .5, -.5, 0, .5, .5, 0, -.5, .5, 0]),
      c = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),
      d = new THREE.BufferGeometry;
  d.addAttribute("index", new THREE.BufferAttribute(a, 1));
  d.addAttribute("position", new THREE.BufferAttribute(b, 3));
  d.addAttribute("uv", new THREE.BufferAttribute(c, 2));
  return function(a) {
    THREE.Object3D.call(this);
    this.type = "Sprite";
    this.geometry = d;
    this.material = void 0 !== a ? a : new THREE.SpriteMaterial;
  };
}();
THREE.Sprite.prototype = Object.create(THREE.Object3D.prototype);
THREE.Sprite.prototype.constructor = THREE.Sprite;
THREE.Sprite.prototype.raycast = function() {
  var a = new THREE.Vector3;
  return function(b, c) {
    a.setFromMatrixPosition(this.matrixWorld);
    var d = b.ray.distanceToPoint(a);
    d > this.scale.x || c.push({
      distance: d,
      point: this.position,
      face: null,
      object: this
    });
  };
}();
THREE.Sprite.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.Sprite(this.material));
  THREE.Object3D.prototype.clone.call(this, a);
  return a;
};
THREE.Particle = THREE.Sprite;
THREE.LensFlare = function(a, b, c, d, e) {
  THREE.Object3D.call(this);
  this.lensFlares = [];
  this.positionScreen = new THREE.Vector3;
  this.customUpdateCallback = void 0;
  void 0 !== a && this.add(a, b, c, d, e);
};
THREE.LensFlare.prototype = Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.constructor = THREE.LensFlare;
THREE.LensFlare.prototype.add = function(a, b, c, d, e, f) {
  void 0 === b && (b = -1);
  void 0 === c && (c = 0);
  void 0 === f && (f = 1);
  void 0 === e && (e = new THREE.Color(16777215));
  void 0 === d && (d = THREE.NormalBlending);
  c = Math.min(c, Math.max(0, c));
  this.lensFlares.push({
    texture: a,
    size: b,
    distance: c,
    x: 0,
    y: 0,
    z: 0,
    scale: 1,
    rotation: 1,
    opacity: f,
    color: e,
    blending: d
  });
};
THREE.LensFlare.prototype.updateLensFlares = function() {
  var a,
      b = this.lensFlares.length,
      c,
      d = 2 * -this.positionScreen.x,
      e = 2 * -this.positionScreen.y;
  for (a = 0; a < b; a++)
    c = this.lensFlares[a], c.x = this.positionScreen.x + d * c.distance, c.y = this.positionScreen.y + e * c.distance, c.wantedRotation = c.x * Math.PI * .25, c.rotation += .25 * (c.wantedRotation - c.rotation);
};
THREE.Scene = function() {
  THREE.Object3D.call(this);
  this.type = "Scene";
  this.overrideMaterial = this.fog = null;
  this.autoUpdate = !0;
};
THREE.Scene.prototype = Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.constructor = THREE.Scene;
THREE.Scene.prototype.clone = function(a) {
  void 0 === a && (a = new THREE.Scene);
  THREE.Object3D.prototype.clone.call(this, a);
  null !== this.fog && (a.fog = this.fog.clone());
  null !== this.overrideMaterial && (a.overrideMaterial = this.overrideMaterial.clone());
  a.autoUpdate = this.autoUpdate;
  a.matrixAutoUpdate = this.matrixAutoUpdate;
  return a;
};
THREE.Fog = function(a, b, c) {
  this.name = "";
  this.color = new THREE.Color(a);
  this.near = void 0 !== b ? b : 1;
  this.far = void 0 !== c ? c : 1E3;
};
THREE.Fog.prototype.clone = function() {
  return new THREE.Fog(this.color.getHex(), this.near, this.far);
};
THREE.FogExp2 = function(a, b) {
  this.name = "";
  this.color = new THREE.Color(a);
  this.density = void 0 !== b ? b : 2.5E-4;
};
THREE.FogExp2.prototype.clone = function() {
  return new THREE.FogExp2(this.color.getHex(), this.density);
};
THREE.ShaderChunk = {};
THREE.ShaderChunk.alphatest_fragment = "#ifdef ALPHATEST\n\n\tif ( gl_FragColor.a < ALPHATEST ) discard;\n\n#endif\n";
THREE.ShaderChunk.lights_lambert_vertex = "vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\tvec3 dirVector = normalize( lDirection.xyz );\n\n\tfloat dotProduct = dot( transformedNormal, dirVector );\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t#endif\n\n\t#endif\n\n\t#ifdef WRAP_AROUND\n\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n\t\t#endif\n\n\t#endif\n\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n\t#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\tfloat lDistance = 1.0;\n\t\t\tif ( spotLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n\t\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n\n#endif";
THREE.ShaderChunk.map_particle_pars_fragment = "#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";
THREE.ShaderChunk.default_vertex = "#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#elif defined( USE_MORPHTARGETS )\n\n\tvec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n";
THREE.ShaderChunk.map_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";
THREE.ShaderChunk.skinnormal_vertex = "#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\t#ifdef USE_MORPHNORMALS\n\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n\t#else\n\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif";
THREE.ShaderChunk.lightmap_pars_vertex = "#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\n#endif";
THREE.ShaderChunk.lights_phong_fragment = "vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef DOUBLE_SIDED\n\n\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tvec3 pointDiffuse = vec3( 0.0 );\n\tvec3 pointSpecular = vec3( 0.0 );\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\n\t\t\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\n\n\t\t\t\t// specular\n\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tvec3 spotDiffuse = vec3( 0.0 );\n\tvec3 spotSpecular = vec3( 0.0 );\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat lDistance = 1.0;\n\t\tif ( spotLightDistance[ i ] > 0.0 )\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n\t\tlVector = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t#else\n\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t#endif\n\n\t\t\tspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\n\n\t\t\t\t\t// specular\n\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n\t\t\tspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tvec3 dirDiffuse = vec3( 0.0 );\n\tvec3 dirSpecular = vec3( 0.0 );\n\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t// specular\n\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t/*\n\t\t// fresnel term from skin shader\n\t\tconst float F0 = 0.128;\n\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\n\t\tfloat exponential = pow( base, 5.0 );\n\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\n\t\t*/\n\n\t\t/*\n\t\t// fresnel term from fresnel shader\n\t\tconst float mFresnelBias = 0.08;\n\t\tconst float mFresnelScale = 0.3;\n\t\tconst float mFresnelPower = 5.0;\n\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n\t\t*/\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tvec3 hemiDiffuse = vec3( 0.0 );\n\tvec3 hemiSpecular = vec3( 0.0 );\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\themiDiffuse += diffuse * hemiColor;\n\n\t\t// specular (sky light)\n\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n\t\t// specular (ground light)\n\n\t\tvec3 lVectorGround = -lVector;\n\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n\t\themiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n\t}\n\n#endif\n\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n\n#if MAX_DIR_LIGHTS > 0\n\n\ttotalDiffuse += dirDiffuse;\n\ttotalSpecular += dirSpecular;\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\ttotalDiffuse += hemiDiffuse;\n\ttotalSpecular += hemiSpecular;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\ttotalDiffuse += pointDiffuse;\n\ttotalSpecular += pointSpecular;\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\ttotalDiffuse += spotDiffuse;\n\ttotalSpecular += spotSpecular;\n\n#endif\n\n#ifdef METAL\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n\n#else\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\n#endif";
THREE.ShaderChunk.fog_pars_fragment = "#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif";
THREE.ShaderChunk.morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\n\tvec3 morphedNormal = vec3( 0.0 );\n\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n\tmorphedNormal += normal;\n\n#endif";
THREE.ShaderChunk.envmap_pars_fragment = "#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";
THREE.ShaderChunk.normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t\t\t// Per-Pixel Tangent Space Normal Mapping\n\t\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.lights_phong_pars_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n";
THREE.ShaderChunk.lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\tuniform sampler2D lightMap;\n\n#endif";
THREE.ShaderChunk.shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif";
THREE.ShaderChunk.lights_phong_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif";
THREE.ShaderChunk.map_fragment = "#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\t#ifdef GAMMA_INPUT\n\n\t\ttexelColor.xyz *= texelColor.xyz;\n\n\t#endif\n\n\tgl_FragColor = gl_FragColor * texelColor;\n\n#endif";
THREE.ShaderChunk.lightmap_vertex = "#ifdef USE_LIGHTMAP\n\n\tvUv2 = uv2;\n\n#endif";
THREE.ShaderChunk.map_particle_fragment = "#ifdef USE_MAP\n\n\tgl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n\n#endif";
THREE.ShaderChunk.color_pars_fragment = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n";
THREE.ShaderChunk.color_vertex = "#ifdef USE_COLOR\n\n\t#ifdef GAMMA_INPUT\n\n\t\tvColor = color * color;\n\n\t#else\n\n\t\tvColor = color;\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.skinning_vertex = "#ifdef USE_SKINNING\n\n\t#ifdef USE_MORPHTARGETS\n\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n";
THREE.ShaderChunk.envmap_pars_vertex = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n";
THREE.ShaderChunk.linear_to_gamma_fragment = "#ifdef GAMMA_OUTPUT\n\n\tgl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n\n#endif";
THREE.ShaderChunk.color_pars_vertex = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif";
THREE.ShaderChunk.lights_lambert_pars_vertex = "uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n";
THREE.ShaderChunk.map_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n";
THREE.ShaderChunk.envmap_fragment = "#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\n\t\tvec3 worldNormal = normalize( vec3( vec4( normal, 0.0 ) * viewMatrix ) );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = clamp( flipNormal * reflectVec.y * 0.5 + 0.5, 0.0, 1.0);\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * 0.15915494309189533576888376337251 + 0.5; // reciprocal( 2 PI ) + 0.5\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t\t\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\t#ifdef GAMMA_INPUT\n\n\t\tenvColor.xyz *= envColor.xyz;\n\n\t#endif\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\tgl_FragColor.xyz += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif";
THREE.ShaderChunk.logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.specularmap_fragment = "float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif";
THREE.ShaderChunk.fog_fragment = "#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tconst float LOG2 = 1.442695;\n\t\tfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\n\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\n#endif";
THREE.ShaderChunk.bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t\t\t//\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif";
THREE.ShaderChunk.defaultnormal_vertex = "#ifdef USE_SKINNING\n\n\tvec3 objectNormal = skinnedNormal.xyz;\n\n#elif defined( USE_MORPHNORMALS )\n\n\tvec3 objectNormal = morphedNormal;\n\n#else\n\n\tvec3 objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n";
THREE.ShaderChunk.lights_phong_pars_fragment = "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;";
THREE.ShaderChunk.skinbase_vertex = "#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";
THREE.ShaderChunk.map_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
THREE.ShaderChunk.lightmap_fragment = "#ifdef USE_LIGHTMAP\n\n\tgl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n\n#endif";
THREE.ShaderChunk.shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif";
THREE.ShaderChunk.color_fragment = "#ifdef USE_COLOR\n\n\tgl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\n\n#endif";
THREE.ShaderChunk.morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\n\tvec3 morphed = vec3( 0.0 );\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n\tmorphed += position;\n\n#endif";
THREE.ShaderChunk.envmap_vertex = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\n\tworldNormal = normalize( worldNormal );\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.shadowmap_fragment = "#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\t#ifdef SHADOWMAP_CASCADE\n\n\t\tint inFrustumCount = 0;\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\t\t// don't shadow pixels outside of light frustum\n\t\t\t\t// use just first frustum (for cascades)\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\n\n\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\tinFrustumCount += int( inFrustum );\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n\t\t#else\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t#endif\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t}\n\n\t#ifdef GAMMA_OUTPUT\n\n\t\tshadowColor *= shadowColor;\n\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n\n#endif\n";
THREE.ShaderChunk.worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#elif defined( USE_MORPHTARGETS )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n#endif";
THREE.ShaderChunk.skinning_pars_vertex = "#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t#extension GL_EXT_frag_depth : enable\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.alphamap_fragment = "#ifdef USE_ALPHAMAP\n\n\tgl_FragColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";
THREE.ShaderChunk.alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n";
THREE.UniformsUtils = {
  merge: function(a) {
    for (var b = {},
        c = 0; c < a.length; c++) {
      var d = this.clone(a[c]),
          e;
      for (e in d)
        b[e] = d[e];
    }
    return b;
  },
  clone: function(a) {
    var b = {},
        c;
    for (c in a) {
      b[c] = {};
      for (var d in a[c]) {
        var e = a[c][d];
        b[c][d] = e instanceof THREE.Color || e instanceof THREE.Vector2 || e instanceof THREE.Vector3 || e instanceof THREE.Vector4 || e instanceof THREE.Matrix4 || e instanceof THREE.Texture ? e.clone() : e instanceof Array ? e.slice() : e;
      }
    }
    return b;
  }
};
THREE.UniformsLib = {
  common: {
    diffuse: {
      type: "c",
      value: new THREE.Color(15658734)
    },
    opacity: {
      type: "f",
      value: 1
    },
    map: {
      type: "t",
      value: null
    },
    offsetRepeat: {
      type: "v4",
      value: new THREE.Vector4(0, 0, 1, 1)
    },
    lightMap: {
      type: "t",
      value: null
    },
    specularMap: {
      type: "t",
      value: null
    },
    alphaMap: {
      type: "t",
      value: null
    },
    envMap: {
      type: "t",
      value: null
    },
    flipEnvMap: {
      type: "f",
      value: -1
    },
    reflectivity: {
      type: "f",
      value: 1
    },
    refractionRatio: {
      type: "f",
      value: .98
    },
    morphTargetInfluences: {
      type: "f",
      value: 0
    }
  },
  bump: {
    bumpMap: {
      type: "t",
      value: null
    },
    bumpScale: {
      type: "f",
      value: 1
    }
  },
  normalmap: {
    normalMap: {
      type: "t",
      value: null
    },
    normalScale: {
      type: "v2",
      value: new THREE.Vector2(1, 1)
    }
  },
  fog: {
    fogDensity: {
      type: "f",
      value: 2.5E-4
    },
    fogNear: {
      type: "f",
      value: 1
    },
    fogFar: {
      type: "f",
      value: 2E3
    },
    fogColor: {
      type: "c",
      value: new THREE.Color(16777215)
    }
  },
  lights: {
    ambientLightColor: {
      type: "fv",
      value: []
    },
    directionalLightDirection: {
      type: "fv",
      value: []
    },
    directionalLightColor: {
      type: "fv",
      value: []
    },
    hemisphereLightDirection: {
      type: "fv",
      value: []
    },
    hemisphereLightSkyColor: {
      type: "fv",
      value: []
    },
    hemisphereLightGroundColor: {
      type: "fv",
      value: []
    },
    pointLightColor: {
      type: "fv",
      value: []
    },
    pointLightPosition: {
      type: "fv",
      value: []
    },
    pointLightDistance: {
      type: "fv1",
      value: []
    },
    spotLightColor: {
      type: "fv",
      value: []
    },
    spotLightPosition: {
      type: "fv",
      value: []
    },
    spotLightDirection: {
      type: "fv",
      value: []
    },
    spotLightDistance: {
      type: "fv1",
      value: []
    },
    spotLightAngleCos: {
      type: "fv1",
      value: []
    },
    spotLightExponent: {
      type: "fv1",
      value: []
    }
  },
  particle: {
    psColor: {
      type: "c",
      value: new THREE.Color(15658734)
    },
    opacity: {
      type: "f",
      value: 1
    },
    size: {
      type: "f",
      value: 1
    },
    scale: {
      type: "f",
      value: 1
    },
    map: {
      type: "t",
      value: null
    },
    fogDensity: {
      type: "f",
      value: 2.5E-4
    },
    fogNear: {
      type: "f",
      value: 1
    },
    fogFar: {
      type: "f",
      value: 2E3
    },
    fogColor: {
      type: "c",
      value: new THREE.Color(16777215)
    }
  },
  shadowmap: {
    shadowMap: {
      type: "tv",
      value: []
    },
    shadowMapSize: {
      type: "v2v",
      value: []
    },
    shadowBias: {
      type: "fv1",
      value: []
    },
    shadowDarkness: {
      type: "fv1",
      value: []
    },
    shadowMatrix: {
      type: "m4v",
      value: []
    }
  }
};
THREE.ShaderLib = {
  basic: {
    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.shadowmap]),
    vertexShader: [THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.skinbase_vertex, "\t#ifdef USE_ENVMAP", THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, "\t#endif", THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"),
    fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = vec4( diffuse, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n")
  },
  lambert: {
    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
      ambient: {
        type: "c",
        value: new THREE.Color(16777215)
      },
      emissive: {
        type: "c",
        value: new THREE.Color(0)
      },
      wrapRGB: {
        type: "v3",
        value: new THREE.Vector3(1, 1, 1)
      }
    }]),
    vertexShader: ["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif", THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_lambert_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.lights_lambert_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"),
    fragmentShader: ["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, "\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\tgl_FragColor.xyz *= vLightFront;\n\t\telse\n\t\t\tgl_FragColor.xyz *= vLightBack;\n\t#else\n\t\tgl_FragColor.xyz *= vLightFront;\n\t#endif", THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n")
  },
  phong: {
    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.bump, THREE.UniformsLib.normalmap, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
      ambient: {
        type: "c",
        value: new THREE.Color(16777215)
      },
      emissive: {
        type: "c",
        value: new THREE.Color(0)
      },
      specular: {
        type: "c",
        value: new THREE.Color(1118481)
      },
      shininess: {
        type: "f",
        value: 30
      },
      wrapRGB: {
        type: "v3",
        value: new THREE.Vector3(1, 1, 1)
      }
    }]),
    vertexShader: ["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;", THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_phong_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.morphnormal_vertex, THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.skinnormal_vertex, THREE.ShaderChunk.defaultnormal_vertex, "\tvNormal = normalize( transformedNormal );", THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "\tvViewPosition = -mvPosition.xyz;", THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.lights_phong_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"),
    fragmentShader: ["#define PHONG\nuniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.alphamap_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.lights_phong_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.bumpmap_pars_fragment, THREE.ShaderChunk.normalmap_pars_fragment, THREE.ShaderChunk.specularmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphamap_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.specularmap_fragment, THREE.ShaderChunk.lights_phong_fragment, THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.linear_to_gamma_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n")
  },
  particle_basic: {
    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.particle, THREE.UniformsLib.shadowmap]),
    vertexShader: ["uniform float size;\nuniform float scale;", THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.worldpos_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n"),
    fragmentShader: ["uniform vec3 psColor;\nuniform float opacity;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_particle_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = vec4( psColor, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.map_particle_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n")
  },
  dashed: {
    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, {
      scale: {
        type: "f",
        value: 1
      },
      dashSize: {
        type: "f",
        value: 1
      },
      totalSize: {
        type: "f",
        value: 2
      }
    }]),
    vertexShader: ["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;", THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"),
    fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tgl_FragColor = vec4( diffuse, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n")
  },
  depth: {
    uniforms: {
      mNear: {
        type: "f",
        value: 1
      },
      mFar: {
        type: "f",
        value: 2E3
      },
      opacity: {
        type: "f",
        value: 1
      }
    },
    vertexShader: [THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"),
    fragmentShader: ["uniform float mNear;\nuniform float mFar;\nuniform float opacity;", THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {", THREE.ShaderChunk.logdepthbuf_fragment, "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}"].join("\n")
  },
  normal: {
    uniforms: {opacity: {
        type: "f",
        value: 1
      }},
    vertexShader: ["varying vec3 vNormal;", THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvNormal = normalize( normalMatrix * normal );", THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"),
    fragmentShader: ["uniform float opacity;\nvarying vec3 vNormal;", THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n")
  },
  cube: {
    uniforms: {
      tCube: {
        type: "t",
        value: null
      },
      tFlip: {
        type: "f",
        value: -1
      }
    },
    vertexShader: ["varying vec3 vWorldPosition;", THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"),
    fragmentShader: ["uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;", THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n")
  },
  equirect: {
    uniforms: {
      tEquirect: {
        type: "t",
        value: null
      },
      tFlip: {
        type: "f",
        value: -1
      }
    },
    vertexShader: ["varying vec3 vWorldPosition;", THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"),
    fragmentShader: ["uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;", THREE.ShaderChunk.logdepthbuf_pars_fragment, "void main() {\nvec3 direction = normalize( vWorldPosition );\nvec2 sampleUV;\nsampleUV.y = clamp( tFlip * direction.y * -0.5 + 0.5, 0.0, 1.0);\nsampleUV.x = atan( direction.z, direction.x ) * 0.15915494309189533576888376337251 + 0.5;\ngl_FragColor = texture2D( tEquirect, sampleUV );", THREE.ShaderChunk.logdepthbuf_fragment, "}"].join("\n")
  },
  depthRGBA: {
    uniforms: {},
    vertexShader: [THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.logdepthbuf_pars_vertex, "void main() {", THREE.ShaderChunk.skinbase_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.logdepthbuf_vertex, "}"].join("\n"),
    fragmentShader: [THREE.ShaderChunk.logdepthbuf_pars_fragment, "vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {", THREE.ShaderChunk.logdepthbuf_fragment, "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}"].join("\n")
  }
};
THREE.WebGLRenderer = function(a) {
  function b(a) {
    var b = a.geometry;
    a = a.material;
    var c = b.vertices.length;
    if (a.attributes) {
      void 0 === b.__webglCustomAttributesList && (b.__webglCustomAttributesList = []);
      for (var d in a.attributes) {
        var e = a.attributes[d];
        if (!e.__webglInitialized || e.createUniqueBuffers) {
          e.__webglInitialized = !0;
          var f = 1;
          "v2" === e.type ? f = 2 : "v3" === e.type ? f = 3 : "v4" === e.type ? f = 4 : "c" === e.type && (f = 3);
          e.size = f;
          e.array = new Float32Array(c * f);
          e.buffer = l.createBuffer();
          e.buffer.belongsToAttribute = d;
          e.needsUpdate = !0;
        }
        b.__webglCustomAttributesList.push(e);
      }
    }
  }
  function c(a, b) {
    var c = b.geometry,
        e = a.faces3,
        f = 3 * e.length,
        g = 1 * e.length,
        h = 3 * e.length,
        e = d(b, a);
    a.__vertexArray = new Float32Array(3 * f);
    a.__normalArray = new Float32Array(3 * f);
    a.__colorArray = new Float32Array(3 * f);
    a.__uvArray = new Float32Array(2 * f);
    1 < c.faceVertexUvs.length && (a.__uv2Array = new Float32Array(2 * f));
    c.hasTangents && (a.__tangentArray = new Float32Array(4 * f));
    b.geometry.skinWeights.length && b.geometry.skinIndices.length && (a.__skinIndexArray = new Float32Array(4 * f), a.__skinWeightArray = new Float32Array(4 * f));
    c = null !== aa.get("OES_element_index_uint") && 21845 < g ? Uint32Array : Uint16Array;
    a.__typeArray = c;
    a.__faceArray = new c(3 * g);
    a.__lineArray = new c(2 * h);
    var k = a.numMorphTargets;
    if (k)
      for (a.__morphTargetsArrays = [], c = 0; c < k; c++)
        a.__morphTargetsArrays.push(new Float32Array(3 * f));
    if (k = a.numMorphNormals)
      for (a.__morphNormalsArrays = [], c = 0; c < k; c++)
        a.__morphNormalsArrays.push(new Float32Array(3 * f));
    a.__webglFaceCount = 3 * g;
    a.__webglLineCount = 2 * h;
    if (e.attributes) {
      void 0 === a.__webglCustomAttributesList && (a.__webglCustomAttributesList = []);
      for (var m in e.attributes) {
        var g = e.attributes[m],
            h = {},
            n;
        for (n in g)
          h[n] = g[n];
        if (!h.__webglInitialized || h.createUniqueBuffers)
          h.__webglInitialized = !0, c = 1, "v2" === h.type ? c = 2 : "v3" === h.type ? c = 3 : "v4" === h.type ? c = 4 : "c" === h.type && (c = 3), h.size = c, h.array = new Float32Array(f * c), h.buffer = l.createBuffer(), h.buffer.belongsToAttribute = m, g.needsUpdate = !0, h.__original = g;
        a.__webglCustomAttributesList.push(h);
      }
    }
    a.__inittedArrays = !0;
  }
  function d(a, b) {
    return a.material instanceof THREE.MeshFaceMaterial ? a.material.materials[b.materialIndex] : a.material;
  }
  function e(a, b, c, d) {
    c = c.attributes;
    var e = b.attributes;
    b = b.attributesKeys;
    for (var f = 0,
        k = b.length; f < k; f++) {
      var m = b[f],
          n = e[m];
      if (0 <= n) {
        var p = c[m];
        void 0 !== p ? (m = p.itemSize, l.bindBuffer(l.ARRAY_BUFFER, p.buffer), g(n), l.vertexAttribPointer(n, m, l.FLOAT, !1, 0, d * m * 4)) : void 0 !== a.defaultAttributeValues && (2 === a.defaultAttributeValues[m].length ? l.vertexAttrib2fv(n, a.defaultAttributeValues[m]) : 3 === a.defaultAttributeValues[m].length && l.vertexAttrib3fv(n, a.defaultAttributeValues[m]));
      }
    }
    h();
  }
  function f() {
    for (var a = 0,
        b = kb.length; a < b; a++)
      kb[a] = 0;
  }
  function g(a) {
    kb[a] = 1;
    0 === Ma[a] && (l.enableVertexAttribArray(a), Ma[a] = 1);
  }
  function h() {
    for (var a = 0,
        b = Ma.length; a < b; a++)
      Ma[a] !== kb[a] && (l.disableVertexAttribArray(a), Ma[a] = 0);
  }
  function k(a, b) {
    return a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
  }
  function n(a, b) {
    return a.z !== b.z ? b.z - a.z : a.id - b.id;
  }
  function p(a, b) {
    return b[0] - a[0];
  }
  function q(a) {
    if (!1 !== a.visible) {
      if (!(a instanceof THREE.Scene || a instanceof THREE.Group)) {
        void 0 === a.__webglInit && (a.__webglInit = !0, a._modelViewMatrix = new THREE.Matrix4, a._normalMatrix = new THREE.Matrix3, a.addEventListener("removed", ic));
        var c = a.geometry;
        if (void 0 !== c && void 0 === c.__webglInit)
          if (c.__webglInit = !0, c.addEventListener("dispose", jc), c instanceof THREE.BufferGeometry)
            I.info.memory.geometries++;
          else if (a instanceof THREE.Mesh)
            r(a, c);
          else if (a instanceof THREE.Line) {
            if (void 0 === c.__webglVertexBuffer) {
              c.__webglVertexBuffer = l.createBuffer();
              c.__webglColorBuffer = l.createBuffer();
              c.__webglLineDistanceBuffer = l.createBuffer();
              I.info.memory.geometries++;
              var d = c.vertices.length;
              c.__vertexArray = new Float32Array(3 * d);
              c.__colorArray = new Float32Array(3 * d);
              c.__lineDistanceArray = new Float32Array(1 * d);
              c.__webglLineCount = d;
              b(a);
              c.verticesNeedUpdate = !0;
              c.colorsNeedUpdate = !0;
              c.lineDistancesNeedUpdate = !0;
            }
          } else
            a instanceof THREE.PointCloud && void 0 === c.__webglVertexBuffer && (c.__webglVertexBuffer = l.createBuffer(), c.__webglColorBuffer = l.createBuffer(), I.info.memory.geometries++, d = c.vertices.length, c.__vertexArray = new Float32Array(3 * d), c.__colorArray = new Float32Array(3 * d), c.__sortArray = [], c.__webglParticleCount = d, b(a), c.verticesNeedUpdate = !0, c.colorsNeedUpdate = !0);
        if (void 0 === a.__webglActive)
          if (a.__webglActive = !0, a instanceof THREE.Mesh)
            if (c instanceof THREE.BufferGeometry)
              u(Fa, c, a);
            else {
              if (c instanceof THREE.Geometry)
                for (var c = sb[c.id],
                    d = 0,
                    e = c.length; d < e; d++)
                  u(Fa, c[d], a);
            }
          else
            a instanceof THREE.Line || a instanceof THREE.PointCloud ? u(Fa, c, a) : (a instanceof THREE.ImmediateRenderObject || a.immediateRenderCallback) && Ga.push({
              id: null,
              object: a,
              opaque: null,
              transparent: null,
              z: 0
            });
        if (a instanceof THREE.Light)
          pa.push(a);
        else if (a instanceof THREE.Sprite)
          tb.push(a);
        else if (a instanceof THREE.LensFlare)
          eb.push(a);
        else if ((c = Fa[a.id]) && (!1 === a.frustumCulled || !0 === ub.intersectsObject(a)))
          for (d = 0, e = c.length; d < e; d++) {
            var f = c[d],
                g = f,
                h = g.object,
                k = g.buffer,
                m = h.geometry,
                h = h.material;
            h instanceof THREE.MeshFaceMaterial ? (h = h.materials[m instanceof THREE.BufferGeometry ? 0 : k.materialIndex], g.material = h, h.transparent ? za.push(g) : Ta.push(g)) : h && (g.material = h, h.transparent ? za.push(g) : Ta.push(g));
            f.render = !0;
            !0 === I.sortObjects && (Da.setFromMatrixPosition(a.matrixWorld), Da.applyProjection(vb), f.z = Da.z);
          }
      }
      d = 0;
      for (e = a.children.length; d < e; d++)
        q(a.children[d]);
    }
  }
  function m(a, b, c, d, e, f) {
    for (var g,
        h = 0,
        l = a.length; h < l; h++) {
      g = a[h];
      var k = g.object,
          m = g.buffer;
      G(k, b);
      if (f)
        g = f;
      else {
        g = g.material;
        if (!g)
          continue;
        e && I.setBlending(g.blending, g.blendEquation, g.blendSrc, g.blendDst);
        I.setDepthTest(g.depthTest);
        I.setDepthWrite(g.depthWrite);
        A(g.polygonOffset, g.polygonOffsetFactor, g.polygonOffsetUnits);
      }
      I.setMaterialFaces(g);
      m instanceof THREE.BufferGeometry ? I.renderBufferDirect(b, c, d, g, m, k) : I.renderBuffer(b, c, d, g, m, k);
    }
  }
  function t(a, b, c, d, e, f, g) {
    for (var h,
        l = 0,
        k = a.length; l < k; l++) {
      h = a[l];
      var m = h.object;
      if (m.visible) {
        if (g)
          h = g;
        else {
          h = h[b];
          if (!h)
            continue;
          f && I.setBlending(h.blending, h.blendEquation, h.blendSrc, h.blendDst);
          I.setDepthTest(h.depthTest);
          I.setDepthWrite(h.depthWrite);
          A(h.polygonOffset, h.polygonOffsetFactor, h.polygonOffsetUnits);
        }
        I.renderImmediateObject(c, d, e, h, m);
      }
    }
  }
  function s(a) {
    var b = a.object.material;
    b.transparent ? (a.transparent = b, a.opaque = null) : (a.opaque = b, a.transparent = null);
  }
  function r(a, b) {
    var d = a.material,
        e = !1;
    if (void 0 === sb[b.id] || !0 === b.groupsNeedUpdate) {
      delete Fa[a.id];
      for (var f = sb,
          g = b.id,
          d = d instanceof THREE.MeshFaceMaterial,
          h = aa.get("OES_element_index_uint") ? 4294967296 : 65535,
          k,
          e = {},
          m = b.morphTargets.length,
          n = b.morphNormals.length,
          p,
          q = {},
          r = [],
          t = 0,
          s = b.faces.length; t < s; t++) {
        k = b.faces[t];
        var v = d ? k.materialIndex : 0;
        v in e || (e[v] = {
          hash: v,
          counter: 0
        });
        k = e[v].hash + "_" + e[v].counter;
        k in q || (p = {
          id: kc++,
          faces3: [],
          materialIndex: v,
          vertices: 0,
          numMorphTargets: m,
          numMorphNormals: n
        }, q[k] = p, r.push(p));
        q[k].vertices + 3 > h && (e[v].counter += 1, k = e[v].hash + "_" + e[v].counter, k in q || (p = {
          id: kc++,
          faces3: [],
          materialIndex: v,
          vertices: 0,
          numMorphTargets: m,
          numMorphNormals: n
        }, q[k] = p, r.push(p)));
        q[k].faces3.push(t);
        q[k].vertices += 3;
      }
      f[g] = r;
      b.groupsNeedUpdate = !1;
    }
    f = sb[b.id];
    g = 0;
    for (d = f.length; g < d; g++) {
      h = f[g];
      if (void 0 === h.__webglVertexBuffer) {
        e = h;
        e.__webglVertexBuffer = l.createBuffer();
        e.__webglNormalBuffer = l.createBuffer();
        e.__webglTangentBuffer = l.createBuffer();
        e.__webglColorBuffer = l.createBuffer();
        e.__webglUVBuffer = l.createBuffer();
        e.__webglUV2Buffer = l.createBuffer();
        e.__webglSkinIndicesBuffer = l.createBuffer();
        e.__webglSkinWeightsBuffer = l.createBuffer();
        e.__webglFaceBuffer = l.createBuffer();
        e.__webglLineBuffer = l.createBuffer();
        if (n = e.numMorphTargets)
          for (e.__webglMorphTargetsBuffers = [], m = 0; m < n; m++)
            e.__webglMorphTargetsBuffers.push(l.createBuffer());
        if (n = e.numMorphNormals)
          for (e.__webglMorphNormalsBuffers = [], m = 0; m < n; m++)
            e.__webglMorphNormalsBuffers.push(l.createBuffer());
        I.info.memory.geometries++;
        c(h, a);
        b.verticesNeedUpdate = !0;
        b.morphTargetsNeedUpdate = !0;
        b.elementsNeedUpdate = !0;
        b.uvsNeedUpdate = !0;
        b.normalsNeedUpdate = !0;
        b.tangentsNeedUpdate = !0;
        e = b.colorsNeedUpdate = !0;
      } else
        e = !1;
      (e || void 0 === a.__webglActive) && u(Fa, h, a);
    }
    a.__webglActive = !0;
  }
  function u(a, b, c) {
    var d = c.id;
    a[d] = a[d] || [];
    a[d].push({
      id: d,
      buffer: b,
      object: c,
      material: null,
      z: 0
    });
  }
  function v(a) {
    var b = a.geometry;
    if (b instanceof THREE.BufferGeometry)
      for (var e = b.attributes,
          f = b.attributesKeys,
          g = 0,
          h = f.length; g < h; g++) {
        var k = f[g],
            m = e[k];
        void 0 === m.buffer && (m.buffer = l.createBuffer(), m.needsUpdate = !0);
        if (!0 === m.needsUpdate) {
          var n = "index" === k ? l.ELEMENT_ARRAY_BUFFER : l.ARRAY_BUFFER;
          l.bindBuffer(n, m.buffer);
          l.bufferData(n, m.array, l.STATIC_DRAW);
          m.needsUpdate = !1;
        }
      }
    else if (a instanceof THREE.Mesh) {
      !0 === b.groupsNeedUpdate && r(a, b);
      for (var p = sb[b.id],
          g = 0,
          q = p.length; g < q; g++) {
        var t = p[g],
            s = d(a, t);
        !0 === b.groupsNeedUpdate && c(t, a);
        var u = s.attributes && y(s);
        if (b.verticesNeedUpdate || b.morphTargetsNeedUpdate || b.elementsNeedUpdate || b.uvsNeedUpdate || b.normalsNeedUpdate || b.colorsNeedUpdate || b.tangentsNeedUpdate || u) {
          var v = t,
              x = a,
              z = l.DYNAMIC_DRAW,
              G = !b.dynamic,
              E = s;
          if (v.__inittedArrays) {
            var D = E && void 0 !== E.shading && E.shading === THREE.SmoothShading,
                w = void 0,
                F = void 0,
                I = void 0,
                A = void 0,
                Q = void 0,
                M = void 0,
                K = void 0,
                N = void 0,
                O = void 0,
                T = void 0,
                U = void 0,
                H = void 0,
                L = void 0,
                X = void 0,
                W = void 0,
                pa = void 0,
                ta = void 0,
                Za = void 0,
                Fa = void 0,
                ga = void 0,
                Ta = void 0,
                aa = void 0,
                Ga = void 0,
                za = void 0,
                ha = void 0,
                P = void 0,
                ea = void 0,
                fa = void 0,
                ma = void 0,
                Y = void 0,
                tb = void 0,
                qa = void 0,
                Da = void 0,
                Aa = void 0,
                Ha = void 0,
                xa = void 0,
                na = void 0,
                ab = void 0,
                eb = void 0,
                la = void 0,
                Na = 0,
                Ua = 0,
                mb = 0,
                ya = 0,
                Xa = 0,
                Va = 0,
                Ia = 0,
                nb = 0,
                Oa = 0,
                ia = 0,
                ra = 0,
                J = 0,
                Ba = void 0,
                bb = v.__vertexArray,
                wb = v.__uvArray,
                ob = v.__uv2Array,
                Pa = v.__normalArray,
                Ca = v.__tangentArray,
                cb = v.__colorArray,
                Ka = v.__skinIndexArray,
                La = v.__skinWeightArray,
                $a = v.__morphTargetsArrays,
                xb = v.__morphNormalsArrays,
                pb = v.__webglCustomAttributesList,
                B = void 0,
                db = v.__faceArray,
                sa = v.__lineArray,
                oa = x.geometry,
                Sa = oa.elementsNeedUpdate,
                Ma = oa.uvsNeedUpdate,
                Ab = oa.normalsNeedUpdate,
                Hb = oa.tangentsNeedUpdate,
                Ib = oa.colorsNeedUpdate,
                lb = oa.morphTargetsNeedUpdate,
                Cb = oa.vertices,
                V = v.faces3,
                Ja = oa.faces,
                Wa = oa.faceVertexUvs[0],
                Db = oa.faceVertexUvs[1],
                Pb = oa.skinIndices,
                $ = oa.skinWeights,
                Eb = oa.morphTargets,
                R = oa.morphNormals;
            if (oa.verticesNeedUpdate) {
              w = 0;
              for (F = V.length; w < F; w++)
                A = Ja[V[w]], H = Cb[A.a], L = Cb[A.b], X = Cb[A.c], bb[Ua] = H.x, bb[Ua + 1] = H.y, bb[Ua + 2] = H.z, bb[Ua + 3] = L.x, bb[Ua + 4] = L.y, bb[Ua + 5] = L.z, bb[Ua + 6] = X.x, bb[Ua + 7] = X.y, bb[Ua + 8] = X.z, Ua += 9;
              l.bindBuffer(l.ARRAY_BUFFER, v.__webglVertexBuffer);
              l.bufferData(l.ARRAY_BUFFER, bb, z);
            }
            if (lb)
              for (Ha = 0, xa = Eb.length; Ha < xa; Ha++) {
                w = ra = 0;
                for (F = V.length; w < F; w++)
                  eb = V[w], A = Ja[eb], H = Eb[Ha].vertices[A.a], L = Eb[Ha].vertices[A.b], X = Eb[Ha].vertices[A.c], na = $a[Ha], na[ra] = H.x, na[ra + 1] = H.y, na[ra + 2] = H.z, na[ra + 3] = L.x, na[ra + 4] = L.y, na[ra + 5] = L.z, na[ra + 6] = X.x, na[ra + 7] = X.y, na[ra + 8] = X.z, E.morphNormals && (D ? (la = R[Ha].vertexNormals[eb], Za = la.a, Fa = la.b, ga = la.c) : ga = Fa = Za = R[Ha].faceNormals[eb], ab = xb[Ha], ab[ra] = Za.x, ab[ra + 1] = Za.y, ab[ra + 2] = Za.z, ab[ra + 3] = Fa.x, ab[ra + 4] = Fa.y, ab[ra + 5] = Fa.z, ab[ra + 6] = ga.x, ab[ra + 7] = ga.y, ab[ra + 8] = ga.z), ra += 9;
                l.bindBuffer(l.ARRAY_BUFFER, v.__webglMorphTargetsBuffers[Ha]);
                l.bufferData(l.ARRAY_BUFFER, $a[Ha], z);
                E.morphNormals && (l.bindBuffer(l.ARRAY_BUFFER, v.__webglMorphNormalsBuffers[Ha]), l.bufferData(l.ARRAY_BUFFER, xb[Ha], z));
              }
            if ($.length) {
              w = 0;
              for (F = V.length; w < F; w++)
                A = Ja[V[w]], za = $[A.a], ha = $[A.b], P = $[A.c], La[ia] = za.x, La[ia + 1] = za.y, La[ia + 2] = za.z, La[ia + 3] = za.w, La[ia + 4] = ha.x, La[ia + 5] = ha.y, La[ia + 6] = ha.z, La[ia + 7] = ha.w, La[ia + 8] = P.x, La[ia + 9] = P.y, La[ia + 10] = P.z, La[ia + 11] = P.w, ea = Pb[A.a], fa = Pb[A.b], ma = Pb[A.c], Ka[ia] = ea.x, Ka[ia + 1] = ea.y, Ka[ia + 2] = ea.z, Ka[ia + 3] = ea.w, Ka[ia + 4] = fa.x, Ka[ia + 5] = fa.y, Ka[ia + 6] = fa.z, Ka[ia + 7] = fa.w, Ka[ia + 8] = ma.x, Ka[ia + 9] = ma.y, Ka[ia + 10] = ma.z, Ka[ia + 11] = ma.w, ia += 12;
              0 < ia && (l.bindBuffer(l.ARRAY_BUFFER, v.__webglSkinIndicesBuffer), l.bufferData(l.ARRAY_BUFFER, Ka, z), l.bindBuffer(l.ARRAY_BUFFER, v.__webglSkinWeightsBuffer), l.bufferData(l.ARRAY_BUFFER, La, z));
            }
            if (Ib) {
              w = 0;
              for (F = V.length; w < F; w++)
                A = Ja[V[w]], K = A.vertexColors, N = A.color, 3 === K.length && E.vertexColors === THREE.VertexColors ? (Ta = K[0], aa = K[1], Ga = K[2]) : Ga = aa = Ta = N, cb[Oa] = Ta.r, cb[Oa + 1] = Ta.g, cb[Oa + 2] = Ta.b, cb[Oa + 3] = aa.r, cb[Oa + 4] = aa.g, cb[Oa + 5] = aa.b, cb[Oa + 6] = Ga.r, cb[Oa + 7] = Ga.g, cb[Oa + 8] = Ga.b, Oa += 9;
              0 < Oa && (l.bindBuffer(l.ARRAY_BUFFER, v.__webglColorBuffer), l.bufferData(l.ARRAY_BUFFER, cb, z));
            }
            if (Hb && oa.hasTangents) {
              w = 0;
              for (F = V.length; w < F; w++)
                A = Ja[V[w]], O = A.vertexTangents, W = O[0], pa = O[1], ta = O[2], Ca[Ia] = W.x, Ca[Ia + 1] = W.y, Ca[Ia + 2] = W.z, Ca[Ia + 3] = W.w, Ca[Ia + 4] = pa.x, Ca[Ia + 5] = pa.y, Ca[Ia + 6] = pa.z, Ca[Ia + 7] = pa.w, Ca[Ia + 8] = ta.x, Ca[Ia + 9] = ta.y, Ca[Ia + 10] = ta.z, Ca[Ia + 11] = ta.w, Ia += 12;
              l.bindBuffer(l.ARRAY_BUFFER, v.__webglTangentBuffer);
              l.bufferData(l.ARRAY_BUFFER, Ca, z);
            }
            if (Ab) {
              w = 0;
              for (F = V.length; w < F; w++)
                if (A = Ja[V[w]], Q = A.vertexNormals, M = A.normal, 3 === Q.length && D)
                  for (Y = 0; 3 > Y; Y++)
                    qa = Q[Y], Pa[Va] = qa.x, Pa[Va + 1] = qa.y, Pa[Va + 2] = qa.z, Va += 3;
                else
                  for (Y = 0; 3 > Y; Y++)
                    Pa[Va] = M.x, Pa[Va + 1] = M.y, Pa[Va + 2] = M.z, Va += 3;
              l.bindBuffer(l.ARRAY_BUFFER, v.__webglNormalBuffer);
              l.bufferData(l.ARRAY_BUFFER, Pa, z);
            }
            if (Ma && Wa) {
              w = 0;
              for (F = V.length; w < F; w++)
                if (I = V[w], T = Wa[I], void 0 !== T)
                  for (Y = 0; 3 > Y; Y++)
                    Da = T[Y], wb[mb] = Da.x, wb[mb + 1] = Da.y, mb += 2;
              0 < mb && (l.bindBuffer(l.ARRAY_BUFFER, v.__webglUVBuffer), l.bufferData(l.ARRAY_BUFFER, wb, z));
            }
            if (Ma && Db) {
              w = 0;
              for (F = V.length; w < F; w++)
                if (I = V[w], U = Db[I], void 0 !== U)
                  for (Y = 0; 3 > Y; Y++)
                    Aa = U[Y], ob[ya] = Aa.x, ob[ya + 1] = Aa.y, ya += 2;
              0 < ya && (l.bindBuffer(l.ARRAY_BUFFER, v.__webglUV2Buffer), l.bufferData(l.ARRAY_BUFFER, ob, z));
            }
            if (Sa) {
              w = 0;
              for (F = V.length; w < F; w++)
                db[Xa] = Na, db[Xa + 1] = Na + 1, db[Xa + 2] = Na + 2, Xa += 3, sa[nb] = Na, sa[nb + 1] = Na + 1, sa[nb + 2] = Na, sa[nb + 3] = Na + 2, sa[nb + 4] = Na + 1, sa[nb + 5] = Na + 2, nb += 6, Na += 3;
              l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, v.__webglFaceBuffer);
              l.bufferData(l.ELEMENT_ARRAY_BUFFER, db, z);
              l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, v.__webglLineBuffer);
              l.bufferData(l.ELEMENT_ARRAY_BUFFER, sa, z);
            }
            if (pb)
              for (Y = 0, tb = pb.length; Y < tb; Y++)
                if (B = pb[Y], B.__original.needsUpdate) {
                  J = 0;
                  if (1 === B.size)
                    if (void 0 === B.boundTo || "vertices" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        A = Ja[V[w]], B.array[J] = B.value[A.a], B.array[J + 1] = B.value[A.b], B.array[J + 2] = B.value[A.c], J += 3;
                    else {
                      if ("faces" === B.boundTo)
                        for (w = 0, F = V.length; w < F; w++)
                          Ba = B.value[V[w]], B.array[J] = Ba, B.array[J + 1] = Ba, B.array[J + 2] = Ba, J += 3;
                    }
                  else if (2 === B.size)
                    if (void 0 === B.boundTo || "vertices" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        A = Ja[V[w]], H = B.value[A.a], L = B.value[A.b], X = B.value[A.c], B.array[J] = H.x, B.array[J + 1] = H.y, B.array[J + 2] = L.x, B.array[J + 3] = L.y, B.array[J + 4] = X.x, B.array[J + 5] = X.y, J += 6;
                    else {
                      if ("faces" === B.boundTo)
                        for (w = 0, F = V.length; w < F; w++)
                          X = L = H = Ba = B.value[V[w]], B.array[J] = H.x, B.array[J + 1] = H.y, B.array[J + 2] = L.x, B.array[J + 3] = L.y, B.array[J + 4] = X.x, B.array[J + 5] = X.y, J += 6;
                    }
                  else if (3 === B.size) {
                    var S;
                    S = "c" === B.type ? ["r", "g", "b"] : ["x", "y", "z"];
                    if (void 0 === B.boundTo || "vertices" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        A = Ja[V[w]], H = B.value[A.a], L = B.value[A.b], X = B.value[A.c], B.array[J] = H[S[0]], B.array[J + 1] = H[S[1]], B.array[J + 2] = H[S[2]], B.array[J + 3] = L[S[0]], B.array[J + 4] = L[S[1]], B.array[J + 5] = L[S[2]], B.array[J + 6] = X[S[0]], B.array[J + 7] = X[S[1]], B.array[J + 8] = X[S[2]], J += 9;
                    else if ("faces" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        X = L = H = Ba = B.value[V[w]], B.array[J] = H[S[0]], B.array[J + 1] = H[S[1]], B.array[J + 2] = H[S[2]], B.array[J + 3] = L[S[0]], B.array[J + 4] = L[S[1]], B.array[J + 5] = L[S[2]], B.array[J + 6] = X[S[0]], B.array[J + 7] = X[S[1]], B.array[J + 8] = X[S[2]], J += 9;
                    else if ("faceVertices" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        Ba = B.value[V[w]], H = Ba[0], L = Ba[1], X = Ba[2], B.array[J] = H[S[0]], B.array[J + 1] = H[S[1]], B.array[J + 2] = H[S[2]], B.array[J + 3] = L[S[0]], B.array[J + 4] = L[S[1]], B.array[J + 5] = L[S[2]], B.array[J + 6] = X[S[0]], B.array[J + 7] = X[S[1]], B.array[J + 8] = X[S[2]], J += 9;
                  } else if (4 === B.size)
                    if (void 0 === B.boundTo || "vertices" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        A = Ja[V[w]], H = B.value[A.a], L = B.value[A.b], X = B.value[A.c], B.array[J] = H.x, B.array[J + 1] = H.y, B.array[J + 2] = H.z, B.array[J + 3] = H.w, B.array[J + 4] = L.x, B.array[J + 5] = L.y, B.array[J + 6] = L.z, B.array[J + 7] = L.w, B.array[J + 8] = X.x, B.array[J + 9] = X.y, B.array[J + 10] = X.z, B.array[J + 11] = X.w, J += 12;
                    else if ("faces" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        X = L = H = Ba = B.value[V[w]], B.array[J] = H.x, B.array[J + 1] = H.y, B.array[J + 2] = H.z, B.array[J + 3] = H.w, B.array[J + 4] = L.x, B.array[J + 5] = L.y, B.array[J + 6] = L.z, B.array[J + 7] = L.w, B.array[J + 8] = X.x, B.array[J + 9] = X.y, B.array[J + 10] = X.z, B.array[J + 11] = X.w, J += 12;
                    else if ("faceVertices" === B.boundTo)
                      for (w = 0, F = V.length; w < F; w++)
                        Ba = B.value[V[w]], H = Ba[0], L = Ba[1], X = Ba[2], B.array[J] = H.x, B.array[J + 1] = H.y, B.array[J + 2] = H.z, B.array[J + 3] = H.w, B.array[J + 4] = L.x, B.array[J + 5] = L.y, B.array[J + 6] = L.z, B.array[J + 7] = L.w, B.array[J + 8] = X.x, B.array[J + 9] = X.y, B.array[J + 10] = X.z, B.array[J + 11] = X.w, J += 12;
                  l.bindBuffer(l.ARRAY_BUFFER, B.buffer);
                  l.bufferData(l.ARRAY_BUFFER, B.array, z);
                }
            G && (delete v.__inittedArrays, delete v.__colorArray, delete v.__normalArray, delete v.__tangentArray, delete v.__uvArray, delete v.__uv2Array, delete v.__faceArray, delete v.__vertexArray, delete v.__lineArray, delete v.__skinIndexArray, delete v.__skinWeightArray);
          }
        }
      }
      b.verticesNeedUpdate = !1;
      b.morphTargetsNeedUpdate = !1;
      b.elementsNeedUpdate = !1;
      b.uvsNeedUpdate = !1;
      b.normalsNeedUpdate = !1;
      b.colorsNeedUpdate = !1;
      b.tangentsNeedUpdate = !1;
      s.attributes && C(s);
    } else if (a instanceof THREE.Line) {
      s = d(a, b);
      u = s.attributes && y(s);
      if (b.verticesNeedUpdate || b.colorsNeedUpdate || b.lineDistancesNeedUpdate || u) {
        var Z = l.DYNAMIC_DRAW,
            Ea,
            ka,
            Bb,
            Fb,
            ba,
            gb,
            ua = b.vertices,
            Qb = b.colors,
            Rb = b.lineDistances,
            qb = ua.length,
            Sb = Qb.length,
            yb = Rb.length,
            Gb = b.__vertexArray,
            rb = b.__colorArray,
            kb = b.__lineDistanceArray,
            Mb = b.colorsNeedUpdate,
            Ob = b.lineDistancesNeedUpdate,
            hb = b.__webglCustomAttributesList,
            Ya,
            ib,
            va,
            Kb,
            Qa,
            ca;
        if (b.verticesNeedUpdate) {
          for (Ea = 0; Ea < qb; Ea++)
            Fb = ua[Ea], ba = 3 * Ea, Gb[ba] = Fb.x, Gb[ba + 1] = Fb.y, Gb[ba + 2] = Fb.z;
          l.bindBuffer(l.ARRAY_BUFFER, b.__webglVertexBuffer);
          l.bufferData(l.ARRAY_BUFFER, Gb, Z);
        }
        if (Mb) {
          for (ka = 0; ka < Sb; ka++)
            gb = Qb[ka], ba = 3 * ka, rb[ba] = gb.r, rb[ba + 1] = gb.g, rb[ba + 2] = gb.b;
          l.bindBuffer(l.ARRAY_BUFFER, b.__webglColorBuffer);
          l.bufferData(l.ARRAY_BUFFER, rb, Z);
        }
        if (Ob) {
          for (Bb = 0; Bb < yb; Bb++)
            kb[Bb] = Rb[Bb];
          l.bindBuffer(l.ARRAY_BUFFER, b.__webglLineDistanceBuffer);
          l.bufferData(l.ARRAY_BUFFER, kb, Z);
        }
        if (hb)
          for (Ya = 0, ib = hb.length; Ya < ib; Ya++)
            if (ca = hb[Ya], ca.needsUpdate && (void 0 === ca.boundTo || "vertices" === ca.boundTo)) {
              ba = 0;
              Kb = ca.value.length;
              if (1 === ca.size)
                for (va = 0; va < Kb; va++)
                  ca.array[va] = ca.value[va];
              else if (2 === ca.size)
                for (va = 0; va < Kb; va++)
                  Qa = ca.value[va], ca.array[ba] = Qa.x, ca.array[ba + 1] = Qa.y, ba += 2;
              else if (3 === ca.size)
                if ("c" === ca.type)
                  for (va = 0; va < Kb; va++)
                    Qa = ca.value[va], ca.array[ba] = Qa.r, ca.array[ba + 1] = Qa.g, ca.array[ba + 2] = Qa.b, ba += 3;
                else
                  for (va = 0; va < Kb; va++)
                    Qa = ca.value[va], ca.array[ba] = Qa.x, ca.array[ba + 1] = Qa.y, ca.array[ba + 2] = Qa.z, ba += 3;
              else if (4 === ca.size)
                for (va = 0; va < Kb; va++)
                  Qa = ca.value[va], ca.array[ba] = Qa.x, ca.array[ba + 1] = Qa.y, ca.array[ba + 2] = Qa.z, ca.array[ba + 3] = Qa.w, ba += 4;
              l.bindBuffer(l.ARRAY_BUFFER, ca.buffer);
              l.bufferData(l.ARRAY_BUFFER, ca.array, Z);
              ca.needsUpdate = !1;
            }
      }
      b.verticesNeedUpdate = !1;
      b.colorsNeedUpdate = !1;
      b.lineDistancesNeedUpdate = !1;
      s.attributes && C(s);
    } else if (a instanceof THREE.PointCloud) {
      s = d(a, b);
      u = s.attributes && y(s);
      if (b.verticesNeedUpdate || b.colorsNeedUpdate || u) {
        var jb = l.DYNAMIC_DRAW,
            Tb,
            Ub,
            $b,
            ja,
            ac,
            ub = b.vertices,
            vb = ub.length,
            Nb = b.colors,
            Vb = Nb.length,
            bc = b.__vertexArray,
            cc = b.__colorArray,
            Wb = b.colorsNeedUpdate,
            Jb = b.__webglCustomAttributesList,
            dc,
            zb,
            wa,
            Lb,
            Ra,
            da;
        if (b.verticesNeedUpdate) {
          for (Tb = 0; Tb < vb; Tb++)
            $b = ub[Tb], ja = 3 * Tb, bc[ja] = $b.x, bc[ja + 1] = $b.y, bc[ja + 2] = $b.z;
          l.bindBuffer(l.ARRAY_BUFFER, b.__webglVertexBuffer);
          l.bufferData(l.ARRAY_BUFFER, bc, jb);
        }
        if (Wb) {
          for (Ub = 0; Ub < Vb; Ub++)
            ac = Nb[Ub], ja = 3 * Ub, cc[ja] = ac.r, cc[ja + 1] = ac.g, cc[ja + 2] = ac.b;
          l.bindBuffer(l.ARRAY_BUFFER, b.__webglColorBuffer);
          l.bufferData(l.ARRAY_BUFFER, cc, jb);
        }
        if (Jb)
          for (dc = 0, zb = Jb.length; dc < zb; dc++) {
            da = Jb[dc];
            if (da.needsUpdate && (void 0 === da.boundTo || "vertices" === da.boundTo))
              if (Lb = da.value.length, ja = 0, 1 === da.size)
                for (wa = 0; wa < Lb; wa++)
                  da.array[wa] = da.value[wa];
              else if (2 === da.size)
                for (wa = 0; wa < Lb; wa++)
                  Ra = da.value[wa], da.array[ja] = Ra.x, da.array[ja + 1] = Ra.y, ja += 2;
              else if (3 === da.size)
                if ("c" === da.type)
                  for (wa = 0; wa < Lb; wa++)
                    Ra = da.value[wa], da.array[ja] = Ra.r, da.array[ja + 1] = Ra.g, da.array[ja + 2] = Ra.b, ja += 3;
                else
                  for (wa = 0; wa < Lb; wa++)
                    Ra = da.value[wa], da.array[ja] = Ra.x, da.array[ja + 1] = Ra.y, da.array[ja + 2] = Ra.z, ja += 3;
              else if (4 === da.size)
                for (wa = 0; wa < Lb; wa++)
                  Ra = da.value[wa], da.array[ja] = Ra.x, da.array[ja + 1] = Ra.y, da.array[ja + 2] = Ra.z, da.array[ja + 3] = Ra.w, ja += 4;
            l.bindBuffer(l.ARRAY_BUFFER, da.buffer);
            l.bufferData(l.ARRAY_BUFFER, da.array, jb);
            da.needsUpdate = !1;
          }
      }
      b.verticesNeedUpdate = !1;
      b.colorsNeedUpdate = !1;
      s.attributes && C(s);
    }
  }
  function y(a) {
    for (var b in a.attributes)
      if (a.attributes[b].needsUpdate)
        return !0;
    return !1;
  }
  function C(a) {
    for (var b in a.attributes)
      a.attributes[b].needsUpdate = !1;
  }
  function x(a, b, c, d, e) {
    var f,
        g,
        h,
        k;
    Mb = 0;
    if (d.needsUpdate) {
      d.program && lc(d);
      d.addEventListener("dispose", mc);
      var m = Dc[d.type];
      if (m) {
        var n = THREE.ShaderLib[m];
        d.__webglShader = {
          uniforms: THREE.UniformsUtils.clone(n.uniforms),
          vertexShader: n.vertexShader,
          fragmentShader: n.fragmentShader
        };
      } else
        d.__webglShader = {
          uniforms: d.uniforms,
          vertexShader: d.vertexShader,
          fragmentShader: d.fragmentShader
        };
      for (var p = 0,
          q = 0,
          r = 0,
          t = 0,
          s = 0,
          v = b.length; s < v; s++) {
        var u = b[s];
        u.onlyShadow || !1 === u.visible || (u instanceof THREE.DirectionalLight && p++, u instanceof THREE.PointLight && q++, u instanceof THREE.SpotLight && r++, u instanceof THREE.HemisphereLight && t++);
      }
      f = p;
      g = q;
      h = r;
      k = t;
      for (var x,
          y = 0,
          C = 0,
          G = b.length; C < G; C++) {
        var A = b[C];
        A.castShadow && (A instanceof THREE.SpotLight && y++, A instanceof THREE.DirectionalLight && !A.shadowCascade && y++);
      }
      x = y;
      var D;
      if (Nb && e && e.skeleton && e.skeleton.useVertexTexture)
        D = 1024;
      else {
        var H = l.getParameter(l.MAX_VERTEX_UNIFORM_VECTORS),
            L = Math.floor((H - 20) / 4);
        void 0 !== e && e instanceof THREE.SkinnedMesh && (L = Math.min(e.skeleton.bones.length, L), L < e.skeleton.bones.length && console.warn("WebGLRenderer: too many bones - " + e.skeleton.bones.length + ", this GPU supports just " + L + " (try OpenGL instead of ANGLE)"));
        D = L;
      }
      var K = {
        precision: ga,
        supportsVertexTextures: Vb,
        map: !!d.map,
        envMap: !!d.envMap,
        envMapMode: d.envMap && d.envMap.mapping,
        lightMap: !!d.lightMap,
        bumpMap: !!d.bumpMap,
        normalMap: !!d.normalMap,
        specularMap: !!d.specularMap,
        alphaMap: !!d.alphaMap,
        combine: d.combine,
        vertexColors: d.vertexColors,
        fog: c,
        useFog: d.fog,
        fogExp: c instanceof THREE.FogExp2,
        sizeAttenuation: d.sizeAttenuation,
        logarithmicDepthBuffer: X,
        skinning: d.skinning,
        maxBones: D,
        useVertexTexture: Nb && e && e.skeleton && e.skeleton.useVertexTexture,
        morphTargets: d.morphTargets,
        morphNormals: d.morphNormals,
        maxMorphTargets: I.maxMorphTargets,
        maxMorphNormals: I.maxMorphNormals,
        maxDirLights: f,
        maxPointLights: g,
        maxSpotLights: h,
        maxHemiLights: k,
        maxShadows: x,
        shadowMapEnabled: I.shadowMapEnabled && e.receiveShadow && 0 < x,
        shadowMapType: I.shadowMapType,
        shadowMapDebug: I.shadowMapDebug,
        shadowMapCascade: I.shadowMapCascade,
        alphaTest: d.alphaTest,
        metal: d.metal,
        wrapAround: d.wrapAround,
        doubleSided: d.side === THREE.DoubleSide,
        flipSided: d.side === THREE.BackSide
      },
          N = [];
      m ? N.push(m) : (N.push(d.fragmentShader), N.push(d.vertexShader));
      if (void 0 !== d.defines)
        for (var O in d.defines)
          N.push(O), N.push(d.defines[O]);
      for (O in K)
        N.push(O), N.push(K[O]);
      for (var W = N.join(),
          pa,
          ta = 0,
          Za = Xa.length; ta < Za; ta++) {
        var Fa = Xa[ta];
        if (Fa.code === W) {
          pa = Fa;
          pa.usedTimes++;
          break;
        }
      }
      void 0 === pa && (pa = new THREE.WebGLProgram(I, W, d, K), Xa.push(pa), I.info.memory.programs = Xa.length);
      d.program = pa;
      var Ta = pa.attributes;
      if (d.morphTargets) {
        d.numSupportedMorphTargets = 0;
        for (var aa,
            Ga = "morphTarget",
            za = 0; za < I.maxMorphTargets; za++)
          aa = Ga + za, 0 <= Ta[aa] && d.numSupportedMorphTargets++;
      }
      if (d.morphNormals)
        for (d.numSupportedMorphNormals = 0, Ga = "morphNormal", za = 0; za < I.maxMorphNormals; za++)
          aa = Ga + za, 0 <= Ta[aa] && d.numSupportedMorphNormals++;
      d.uniformsList = [];
      for (var ea in d.__webglShader.uniforms) {
        var tb = d.program.uniforms[ea];
        tb && d.uniformsList.push([d.__webglShader.uniforms[ea], tb]);
      }
      d.needsUpdate = !1;
    }
    d.morphTargets && !e.__webglMorphTargetInfluences && (e.__webglMorphTargetInfluences = new Float32Array(I.maxMorphTargets));
    var qa = !1,
        eb = !1,
        ya = !1,
        xa = d.program,
        ha = xa.uniforms,
        P = d.__webglShader.uniforms;
    xa.id !== Wb && (l.useProgram(xa.program), Wb = xa.id, ya = eb = qa = !0);
    d.id !== Hb && (-1 === Hb && (ya = !0), Hb = d.id, eb = !0);
    if (qa || a !== Ib)
      l.uniformMatrix4fv(ha.projectionMatrix, !1, a.projectionMatrix.elements), X && l.uniform1f(ha.logDepthBufFC, 2 / (Math.log(a.far + 1) / Math.LN2)), a !== Ib && (Ib = a), (d instanceof THREE.ShaderMaterial || d instanceof THREE.MeshPhongMaterial || d.envMap) && null !== ha.cameraPosition && (Da.setFromMatrixPosition(a.matrixWorld), l.uniform3f(ha.cameraPosition, Da.x, Da.y, Da.z)), (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshBasicMaterial || d instanceof THREE.ShaderMaterial || d.skinning) && null !== ha.viewMatrix && l.uniformMatrix4fv(ha.viewMatrix, !1, a.matrixWorldInverse.elements);
    if (d.skinning)
      if (e.bindMatrix && null !== ha.bindMatrix && l.uniformMatrix4fv(ha.bindMatrix, !1, e.bindMatrix.elements), e.bindMatrixInverse && null !== ha.bindMatrixInverse && l.uniformMatrix4fv(ha.bindMatrixInverse, !1, e.bindMatrixInverse.elements), Nb && e.skeleton && e.skeleton.useVertexTexture) {
        if (null !== ha.boneTexture) {
          var $a = z();
          l.uniform1i(ha.boneTexture, $a);
          I.setTexture(e.skeleton.boneTexture, $a);
        }
        null !== ha.boneTextureWidth && l.uniform1i(ha.boneTextureWidth, e.skeleton.boneTextureWidth);
        null !== ha.boneTextureHeight && l.uniform1i(ha.boneTextureHeight, e.skeleton.boneTextureHeight);
      } else
        e.skeleton && e.skeleton.boneMatrices && null !== ha.boneGlobalMatrices && l.uniformMatrix4fv(ha.boneGlobalMatrices, !1, e.skeleton.boneMatrices);
    if (eb) {
      c && d.fog && (P.fogColor.value = c.color, c instanceof THREE.Fog ? (P.fogNear.value = c.near, P.fogFar.value = c.far) : c instanceof THREE.FogExp2 && (P.fogDensity.value = c.density));
      if (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d.lights) {
        if (Ob) {
          var ya = !0,
              fa,
              fb,
              Y,
              Ma = 0,
              Sa = 0,
              Ya = 0,
              Aa,
              Ha,
              hb,
              na,
              ab,
              jb,
              la = nc,
              Na = la.directional.colors,
              Ua = la.directional.positions,
              mb = la.point.colors,
              kb = la.point.positions,
              sb = la.point.distances,
              Va = la.spot.colors,
              Ia = la.spot.positions,
              nb = la.spot.distances,
              Oa = la.spot.directions,
              ia = la.spot.anglesCos,
              ra = la.spot.exponents,
              J = la.hemi.skyColors,
              Ba = la.hemi.groundColors,
              bb = la.hemi.positions,
              wb = 0,
              ob = 0,
              Pa = 0,
              Ca = 0,
              cb = 0,
              Ka = 0,
              La = 0,
              ib = 0,
              xb = 0,
              pb = 0,
              B = 0,
              db = 0;
          fa = 0;
          for (fb = b.length; fa < fb; fa++)
            Y = b[fa], Y.onlyShadow || (Aa = Y.color, na = Y.intensity, jb = Y.distance, Y instanceof THREE.AmbientLight ? Y.visible && (I.gammaInput ? (Ma += Aa.r * Aa.r, Sa += Aa.g * Aa.g, Ya += Aa.b * Aa.b) : (Ma += Aa.r, Sa += Aa.g, Ya += Aa.b)) : Y instanceof THREE.DirectionalLight ? (cb += 1, Y.visible && (ma.setFromMatrixPosition(Y.matrixWorld), Da.setFromMatrixPosition(Y.target.matrixWorld), ma.sub(Da), ma.normalize(), xb = 3 * wb, Ua[xb] = ma.x, Ua[xb + 1] = ma.y, Ua[xb + 2] = ma.z, I.gammaInput ? E(Na, xb, Aa, na * na) : w(Na, xb, Aa, na), wb += 1)) : Y instanceof THREE.PointLight ? (Ka += 1, Y.visible && (pb = 3 * ob, I.gammaInput ? E(mb, pb, Aa, na * na) : w(mb, pb, Aa, na), Da.setFromMatrixPosition(Y.matrixWorld), kb[pb] = Da.x, kb[pb + 1] = Da.y, kb[pb + 2] = Da.z, sb[ob] = jb, ob += 1)) : Y instanceof THREE.SpotLight ? (La += 1, Y.visible && (B = 3 * Pa, I.gammaInput ? E(Va, B, Aa, na * na) : w(Va, B, Aa, na), ma.setFromMatrixPosition(Y.matrixWorld), Ia[B] = ma.x, Ia[B + 1] = ma.y, Ia[B + 2] = ma.z, nb[Pa] = jb, Da.setFromMatrixPosition(Y.target.matrixWorld), ma.sub(Da), ma.normalize(), Oa[B] = ma.x, Oa[B + 1] = ma.y, Oa[B + 2] = ma.z, ia[Pa] = Math.cos(Y.angle), ra[Pa] = Y.exponent, Pa += 1)) : Y instanceof THREE.HemisphereLight && (ib += 1, Y.visible && (ma.setFromMatrixPosition(Y.matrixWorld), ma.normalize(), db = 3 * Ca, bb[db] = ma.x, bb[db + 1] = ma.y, bb[db + 2] = ma.z, Ha = Y.color, hb = Y.groundColor, I.gammaInput ? (ab = na * na, E(J, db, Ha, ab), E(Ba, db, hb, ab)) : (w(J, db, Ha, na), w(Ba, db, hb, na)), Ca += 1)));
          fa = 3 * wb;
          for (fb = Math.max(Na.length, 3 * cb); fa < fb; fa++)
            Na[fa] = 0;
          fa = 3 * ob;
          for (fb = Math.max(mb.length, 3 * Ka); fa < fb; fa++)
            mb[fa] = 0;
          fa = 3 * Pa;
          for (fb = Math.max(Va.length, 3 * La); fa < fb; fa++)
            Va[fa] = 0;
          fa = 3 * Ca;
          for (fb = Math.max(J.length, 3 * ib); fa < fb; fa++)
            J[fa] = 0;
          fa = 3 * Ca;
          for (fb = Math.max(Ba.length, 3 * ib); fa < fb; fa++)
            Ba[fa] = 0;
          la.directional.length = wb;
          la.point.length = ob;
          la.spot.length = Pa;
          la.hemi.length = Ca;
          la.ambient[0] = Ma;
          la.ambient[1] = Sa;
          la.ambient[2] = Ya;
          Ob = !1;
        }
        if (ya) {
          var sa = nc;
          P.ambientLightColor.value = sa.ambient;
          P.directionalLightColor.value = sa.directional.colors;
          P.directionalLightDirection.value = sa.directional.positions;
          P.pointLightColor.value = sa.point.colors;
          P.pointLightPosition.value = sa.point.positions;
          P.pointLightDistance.value = sa.point.distances;
          P.spotLightColor.value = sa.spot.colors;
          P.spotLightPosition.value = sa.spot.positions;
          P.spotLightDistance.value = sa.spot.distances;
          P.spotLightDirection.value = sa.spot.directions;
          P.spotLightAngleCos.value = sa.spot.anglesCos;
          P.spotLightExponent.value = sa.spot.exponents;
          P.hemisphereLightSkyColor.value = sa.hemi.skyColors;
          P.hemisphereLightGroundColor.value = sa.hemi.groundColors;
          P.hemisphereLightDirection.value = sa.hemi.positions;
          F(P, !0);
        } else
          F(P, !1);
      }
      if (d instanceof THREE.MeshBasicMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshPhongMaterial) {
        P.opacity.value = d.opacity;
        I.gammaInput ? P.diffuse.value.copyGammaToLinear(d.color) : P.diffuse.value = d.color;
        P.map.value = d.map;
        P.lightMap.value = d.lightMap;
        P.specularMap.value = d.specularMap;
        P.alphaMap.value = d.alphaMap;
        d.bumpMap && (P.bumpMap.value = d.bumpMap, P.bumpScale.value = d.bumpScale);
        d.normalMap && (P.normalMap.value = d.normalMap, P.normalScale.value.copy(d.normalScale));
        var oa;
        d.map ? oa = d.map : d.specularMap ? oa = d.specularMap : d.normalMap ? oa = d.normalMap : d.bumpMap ? oa = d.bumpMap : d.alphaMap && (oa = d.alphaMap);
        if (void 0 !== oa) {
          var ub = oa.offset,
              zb = oa.repeat;
          P.offsetRepeat.value.set(ub.x, ub.y, zb.x, zb.y);
        }
        P.envMap.value = d.envMap;
        P.flipEnvMap.value = d.envMap instanceof THREE.WebGLRenderTargetCube ? 1 : -1;
        P.reflectivity.value = d.reflectivity;
        P.refractionRatio.value = d.refractionRatio;
      }
      d instanceof THREE.LineBasicMaterial ? (P.diffuse.value = d.color, P.opacity.value = d.opacity) : d instanceof THREE.LineDashedMaterial ? (P.diffuse.value = d.color, P.opacity.value = d.opacity, P.dashSize.value = d.dashSize, P.totalSize.value = d.dashSize + d.gapSize, P.scale.value = d.scale) : d instanceof THREE.PointCloudMaterial ? (P.psColor.value = d.color, P.opacity.value = d.opacity, P.size.value = d.size, P.scale.value = Q.height / 2, P.map.value = d.map) : d instanceof THREE.MeshPhongMaterial ? (P.shininess.value = d.shininess, I.gammaInput ? (P.ambient.value.copyGammaToLinear(d.ambient), P.emissive.value.copyGammaToLinear(d.emissive), P.specular.value.copyGammaToLinear(d.specular)) : (P.ambient.value = d.ambient, P.emissive.value = d.emissive, P.specular.value = d.specular), d.wrapAround && P.wrapRGB.value.copy(d.wrapRGB)) : d instanceof THREE.MeshLambertMaterial ? (I.gammaInput ? (P.ambient.value.copyGammaToLinear(d.ambient), P.emissive.value.copyGammaToLinear(d.emissive)) : (P.ambient.value = d.ambient, P.emissive.value = d.emissive), d.wrapAround && P.wrapRGB.value.copy(d.wrapRGB)) : d instanceof THREE.MeshDepthMaterial ? (P.mNear.value = a.near, P.mFar.value = a.far, P.opacity.value = d.opacity) : d instanceof THREE.MeshNormalMaterial && (P.opacity.value = d.opacity);
      if (e.receiveShadow && !d._shadowPass && P.shadowMatrix)
        for (var Ab = 0,
            vb = 0,
            Xb = b.length; vb < Xb; vb++) {
          var lb = b[vb];
          lb.castShadow && (lb instanceof THREE.SpotLight || lb instanceof THREE.DirectionalLight && !lb.shadowCascade) && (P.shadowMap.value[Ab] = lb.shadowMap, P.shadowMapSize.value[Ab] = lb.shadowMapSize, P.shadowMatrix.value[Ab] = lb.shadowMatrix, P.shadowDarkness.value[Ab] = lb.shadowDarkness, P.shadowBias.value[Ab] = lb.shadowBias, Ab++);
        }
      for (var Cb = d.uniformsList,
          V,
          Ja,
          Wa,
          Db = 0,
          Pb = Cb.length; Db < Pb; Db++) {
        var $ = Cb[Db][0];
        if (!1 !== $.needsUpdate) {
          var Eb = $.type,
              R = $.value,
              S = Cb[Db][1];
          switch (Eb) {
            case "1i":
              l.uniform1i(S, R);
              break;
            case "1f":
              l.uniform1f(S, R);
              break;
            case "2f":
              l.uniform2f(S, R[0], R[1]);
              break;
            case "3f":
              l.uniform3f(S, R[0], R[1], R[2]);
              break;
            case "4f":
              l.uniform4f(S, R[0], R[1], R[2], R[3]);
              break;
            case "1iv":
              l.uniform1iv(S, R);
              break;
            case "3iv":
              l.uniform3iv(S, R);
              break;
            case "1fv":
              l.uniform1fv(S, R);
              break;
            case "2fv":
              l.uniform2fv(S, R);
              break;
            case "3fv":
              l.uniform3fv(S, R);
              break;
            case "4fv":
              l.uniform4fv(S, R);
              break;
            case "Matrix3fv":
              l.uniformMatrix3fv(S, !1, R);
              break;
            case "Matrix4fv":
              l.uniformMatrix4fv(S, !1, R);
              break;
            case "i":
              l.uniform1i(S, R);
              break;
            case "f":
              l.uniform1f(S, R);
              break;
            case "v2":
              l.uniform2f(S, R.x, R.y);
              break;
            case "v3":
              l.uniform3f(S, R.x, R.y, R.z);
              break;
            case "v4":
              l.uniform4f(S, R.x, R.y, R.z, R.w);
              break;
            case "c":
              l.uniform3f(S, R.r, R.g, R.b);
              break;
            case "iv1":
              l.uniform1iv(S, R);
              break;
            case "iv":
              l.uniform3iv(S, R);
              break;
            case "fv1":
              l.uniform1fv(S, R);
              break;
            case "fv":
              l.uniform3fv(S, R);
              break;
            case "v2v":
              void 0 === $._array && ($._array = new Float32Array(2 * R.length));
              for (var Z = 0,
                  Ea = R.length; Z < Ea; Z++)
                Wa = 2 * Z, $._array[Wa] = R[Z].x, $._array[Wa + 1] = R[Z].y;
              l.uniform2fv(S, $._array);
              break;
            case "v3v":
              void 0 === $._array && ($._array = new Float32Array(3 * R.length));
              Z = 0;
              for (Ea = R.length; Z < Ea; Z++)
                Wa = 3 * Z, $._array[Wa] = R[Z].x, $._array[Wa + 1] = R[Z].y, $._array[Wa + 2] = R[Z].z;
              l.uniform3fv(S, $._array);
              break;
            case "v4v":
              void 0 === $._array && ($._array = new Float32Array(4 * R.length));
              Z = 0;
              for (Ea = R.length; Z < Ea; Z++)
                Wa = 4 * Z, $._array[Wa] = R[Z].x, $._array[Wa + 1] = R[Z].y, $._array[Wa + 2] = R[Z].z, $._array[Wa + 3] = R[Z].w;
              l.uniform4fv(S, $._array);
              break;
            case "m3":
              l.uniformMatrix3fv(S, !1, R.elements);
              break;
            case "m3v":
              void 0 === $._array && ($._array = new Float32Array(9 * R.length));
              Z = 0;
              for (Ea = R.length; Z < Ea; Z++)
                R[Z].flattenToArrayOffset($._array, 9 * Z);
              l.uniformMatrix3fv(S, !1, $._array);
              break;
            case "m4":
              l.uniformMatrix4fv(S, !1, R.elements);
              break;
            case "m4v":
              void 0 === $._array && ($._array = new Float32Array(16 * R.length));
              Z = 0;
              for (Ea = R.length; Z < Ea; Z++)
                R[Z].flattenToArrayOffset($._array, 16 * Z);
              l.uniformMatrix4fv(S, !1, $._array);
              break;
            case "t":
              V = R;
              Ja = z();
              l.uniform1i(S, Ja);
              if (!V)
                continue;
              if (V instanceof THREE.CubeTexture || V.image instanceof Array && 6 === V.image.length) {
                var ka = V,
                    Bb = Ja;
                if (6 === ka.image.length)
                  if (ka.needsUpdate) {
                    ka.image.__webglTextureCube || (ka.addEventListener("dispose", Jb), ka.image.__webglTextureCube = l.createTexture(), I.info.memory.textures++);
                    l.activeTexture(l.TEXTURE0 + Bb);
                    l.bindTexture(l.TEXTURE_CUBE_MAP, ka.image.__webglTextureCube);
                    l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL, ka.flipY);
                    for (var Fb = ka instanceof THREE.CompressedTexture,
                        ba = ka.image[0] instanceof THREE.DataTexture,
                        gb = [],
                        ua = 0; 6 > ua; ua++)
                      gb[ua] = !I.autoScaleCubemaps || Fb || ba ? ba ? ka.image[ua].image : ka.image[ua] : M(ka.image[ua], Ec);
                    var Qb = gb[0],
                        Rb = THREE.Math.isPowerOfTwo(Qb.width) && THREE.Math.isPowerOfTwo(Qb.height),
                        qb = T(ka.format),
                        Sb = T(ka.type);
                    U(l.TEXTURE_CUBE_MAP, ka, Rb);
                    for (ua = 0; 6 > ua; ua++)
                      if (Fb)
                        for (var yb,
                            Gb = gb[ua].mipmaps,
                            rb = 0,
                            Yb = Gb.length; rb < Yb; rb++)
                          yb = Gb[rb], ka.format !== THREE.RGBAFormat && ka.format !== THREE.RGBFormat ? -1 < oc().indexOf(qb) ? l.compressedTexImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X + ua, rb, qb, yb.width, yb.height, 0, yb.data) : console.warn("Attempt to load unsupported compressed texture format") : l.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X + ua, rb, qb, yb.width, yb.height, 0, qb, Sb, yb.data);
                      else
                        ba ? l.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X + ua, 0, qb, gb[ua].width, gb[ua].height, 0, qb, Sb, gb[ua].data) : l.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X + ua, 0, qb, qb, Sb, gb[ua]);
                    ka.generateMipmaps && Rb && l.generateMipmap(l.TEXTURE_CUBE_MAP);
                    ka.needsUpdate = !1;
                    if (ka.onUpdate)
                      ka.onUpdate();
                  } else
                    l.activeTexture(l.TEXTURE0 + Bb), l.bindTexture(l.TEXTURE_CUBE_MAP, ka.image.__webglTextureCube);
              } else if (V instanceof THREE.WebGLRenderTargetCube) {
                var Zb = V;
                l.activeTexture(l.TEXTURE0 + Ja);
                l.bindTexture(l.TEXTURE_CUBE_MAP, Zb.__webglTexture);
              } else
                I.setTexture(V, Ja);
              break;
            case "tv":
              void 0 === $._array && ($._array = []);
              Z = 0;
              for (Ea = $.value.length; Z < Ea; Z++)
                $._array[Z] = z();
              l.uniform1iv(S, $._array);
              Z = 0;
              for (Ea = $.value.length; Z < Ea; Z++)
                V = $.value[Z], Ja = $._array[Z], V && I.setTexture(V, Ja);
              break;
            default:
              console.warn("THREE.WebGLRenderer: Unknown uniform type: " + Eb);
          }
        }
      }
    }
    l.uniformMatrix4fv(ha.modelViewMatrix, !1, e._modelViewMatrix.elements);
    ha.normalMatrix && l.uniformMatrix3fv(ha.normalMatrix, !1, e._normalMatrix.elements);
    null !== ha.modelMatrix && l.uniformMatrix4fv(ha.modelMatrix, !1, e.matrixWorld.elements);
    return xa;
  }
  function F(a, b) {
    a.ambientLightColor.needsUpdate = b;
    a.directionalLightColor.needsUpdate = b;
    a.directionalLightDirection.needsUpdate = b;
    a.pointLightColor.needsUpdate = b;
    a.pointLightPosition.needsUpdate = b;
    a.pointLightDistance.needsUpdate = b;
    a.spotLightColor.needsUpdate = b;
    a.spotLightPosition.needsUpdate = b;
    a.spotLightDistance.needsUpdate = b;
    a.spotLightDirection.needsUpdate = b;
    a.spotLightAngleCos.needsUpdate = b;
    a.spotLightExponent.needsUpdate = b;
    a.hemisphereLightSkyColor.needsUpdate = b;
    a.hemisphereLightGroundColor.needsUpdate = b;
    a.hemisphereLightDirection.needsUpdate = b;
  }
  function z() {
    var a = Mb;
    a >= pc && console.warn("WebGLRenderer: trying to use " + a + " texture units while this GPU supports only " + pc);
    Mb += 1;
    return a;
  }
  function G(a, b) {
    a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, a.matrixWorld);
    a._normalMatrix.getNormalMatrix(a._modelViewMatrix);
  }
  function E(a, b, c, d) {
    a[b] = c.r * c.r * d;
    a[b + 1] = c.g * c.g * d;
    a[b + 2] = c.b * c.b * d;
  }
  function w(a, b, c, d) {
    a[b] = c.r * d;
    a[b + 1] = c.g * d;
    a[b + 2] = c.b * d;
  }
  function D(a) {
    a *= O;
    a !== qc && (l.lineWidth(a), qc = a);
  }
  function A(a, b, c) {
    rc !== a && (a ? l.enable(l.POLYGON_OFFSET_FILL) : l.disable(l.POLYGON_OFFSET_FILL), rc = a);
    !a || sc === b && tc === c || (l.polygonOffset(b, c), sc = b, tc = c);
  }
  function U(a, b, c) {
    c ? (l.texParameteri(a, l.TEXTURE_WRAP_S, T(b.wrapS)), l.texParameteri(a, l.TEXTURE_WRAP_T, T(b.wrapT)), l.texParameteri(a, l.TEXTURE_MAG_FILTER, T(b.magFilter)), l.texParameteri(a, l.TEXTURE_MIN_FILTER, T(b.minFilter))) : (l.texParameteri(a, l.TEXTURE_WRAP_S, l.CLAMP_TO_EDGE), l.texParameteri(a, l.TEXTURE_WRAP_T, l.CLAMP_TO_EDGE), b.wrapS === THREE.ClampToEdgeWrapping && b.wrapT === THREE.ClampToEdgeWrapping || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT is set to THREE.ClampToEdgeWrapping. ( " + b.sourceFile + " )"), l.texParameteri(a, l.TEXTURE_MAG_FILTER, N(b.magFilter)), l.texParameteri(a, l.TEXTURE_MIN_FILTER, N(b.minFilter)), b.minFilter !== THREE.NearestFilter && b.minFilter !== THREE.LinearFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter is set to THREE.LinearFilter or THREE.NearestFilter. ( " + b.sourceFile + " )"));
    (c = aa.get("EXT_texture_filter_anisotropic")) && b.type !== THREE.FloatType && (1 < b.anisotropy || b.__oldAnisotropy) && (l.texParameterf(a, c.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(b.anisotropy, I.getMaxAnisotropy())), b.__oldAnisotropy = b.anisotropy);
  }
  function M(a, b) {
    if (a.width > b || a.height > b) {
      var c = b / Math.max(a.width, a.height),
          d = document.createElement("canvas");
      d.width = Math.floor(a.width * c);
      d.height = Math.floor(a.height * c);
      d.getContext("2d").drawImage(a, 0, 0, a.width, a.height, 0, 0, d.width, d.height);
      console.log("THREE.WebGLRenderer:", a, "is too big (" + a.width + "x" + a.height + "). Resized to " + d.width + "x" + d.height + ".");
      return d;
    }
    return a;
  }
  function K(a, b) {
    l.bindRenderbuffer(l.RENDERBUFFER, a);
    b.depthBuffer && !b.stencilBuffer ? (l.renderbufferStorage(l.RENDERBUFFER, l.DEPTH_COMPONENT16, b.width, b.height), l.framebufferRenderbuffer(l.FRAMEBUFFER, l.DEPTH_ATTACHMENT, l.RENDERBUFFER, a)) : b.depthBuffer && b.stencilBuffer ? (l.renderbufferStorage(l.RENDERBUFFER, l.DEPTH_STENCIL, b.width, b.height), l.framebufferRenderbuffer(l.FRAMEBUFFER, l.DEPTH_STENCIL_ATTACHMENT, l.RENDERBUFFER, a)) : l.renderbufferStorage(l.RENDERBUFFER, l.RGBA4, b.width, b.height);
  }
  function L(a) {
    a instanceof THREE.WebGLRenderTargetCube ? (l.bindTexture(l.TEXTURE_CUBE_MAP, a.__webglTexture), l.generateMipmap(l.TEXTURE_CUBE_MAP), l.bindTexture(l.TEXTURE_CUBE_MAP, null)) : (l.bindTexture(l.TEXTURE_2D, a.__webglTexture), l.generateMipmap(l.TEXTURE_2D), l.bindTexture(l.TEXTURE_2D, null));
  }
  function N(a) {
    return a === THREE.NearestFilter || a === THREE.NearestMipMapNearestFilter || a === THREE.NearestMipMapLinearFilter ? l.NEAREST : l.LINEAR;
  }
  function T(a) {
    var b;
    if (a === THREE.RepeatWrapping)
      return l.REPEAT;
    if (a === THREE.ClampToEdgeWrapping)
      return l.CLAMP_TO_EDGE;
    if (a === THREE.MirroredRepeatWrapping)
      return l.MIRRORED_REPEAT;
    if (a === THREE.NearestFilter)
      return l.NEAREST;
    if (a === THREE.NearestMipMapNearestFilter)
      return l.NEAREST_MIPMAP_NEAREST;
    if (a === THREE.NearestMipMapLinearFilter)
      return l.NEAREST_MIPMAP_LINEAR;
    if (a === THREE.LinearFilter)
      return l.LINEAR;
    if (a === THREE.LinearMipMapNearestFilter)
      return l.LINEAR_MIPMAP_NEAREST;
    if (a === THREE.LinearMipMapLinearFilter)
      return l.LINEAR_MIPMAP_LINEAR;
    if (a === THREE.UnsignedByteType)
      return l.UNSIGNED_BYTE;
    if (a === THREE.UnsignedShort4444Type)
      return l.UNSIGNED_SHORT_4_4_4_4;
    if (a === THREE.UnsignedShort5551Type)
      return l.UNSIGNED_SHORT_5_5_5_1;
    if (a === THREE.UnsignedShort565Type)
      return l.UNSIGNED_SHORT_5_6_5;
    if (a === THREE.ByteType)
      return l.BYTE;
    if (a === THREE.ShortType)
      return l.SHORT;
    if (a === THREE.UnsignedShortType)
      return l.UNSIGNED_SHORT;
    if (a === THREE.IntType)
      return l.INT;
    if (a === THREE.UnsignedIntType)
      return l.UNSIGNED_INT;
    if (a === THREE.FloatType)
      return l.FLOAT;
    if (a === THREE.AlphaFormat)
      return l.ALPHA;
    if (a === THREE.RGBFormat)
      return l.RGB;
    if (a === THREE.RGBAFormat)
      return l.RGBA;
    if (a === THREE.LuminanceFormat)
      return l.LUMINANCE;
    if (a === THREE.LuminanceAlphaFormat)
      return l.LUMINANCE_ALPHA;
    if (a === THREE.AddEquation)
      return l.FUNC_ADD;
    if (a === THREE.SubtractEquation)
      return l.FUNC_SUBTRACT;
    if (a === THREE.ReverseSubtractEquation)
      return l.FUNC_REVERSE_SUBTRACT;
    if (a === THREE.ZeroFactor)
      return l.ZERO;
    if (a === THREE.OneFactor)
      return l.ONE;
    if (a === THREE.SrcColorFactor)
      return l.SRC_COLOR;
    if (a === THREE.OneMinusSrcColorFactor)
      return l.ONE_MINUS_SRC_COLOR;
    if (a === THREE.SrcAlphaFactor)
      return l.SRC_ALPHA;
    if (a === THREE.OneMinusSrcAlphaFactor)
      return l.ONE_MINUS_SRC_ALPHA;
    if (a === THREE.DstAlphaFactor)
      return l.DST_ALPHA;
    if (a === THREE.OneMinusDstAlphaFactor)
      return l.ONE_MINUS_DST_ALPHA;
    if (a === THREE.DstColorFactor)
      return l.DST_COLOR;
    if (a === THREE.OneMinusDstColorFactor)
      return l.ONE_MINUS_DST_COLOR;
    if (a === THREE.SrcAlphaSaturateFactor)
      return l.SRC_ALPHA_SATURATE;
    b = aa.get("WEBGL_compressed_texture_s3tc");
    if (null !== b) {
      if (a === THREE.RGB_S3TC_DXT1_Format)
        return b.COMPRESSED_RGB_S3TC_DXT1_EXT;
      if (a === THREE.RGBA_S3TC_DXT1_Format)
        return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;
      if (a === THREE.RGBA_S3TC_DXT3_Format)
        return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;
      if (a === THREE.RGBA_S3TC_DXT5_Format)
        return b.COMPRESSED_RGBA_S3TC_DXT5_EXT;
    }
    b = aa.get("WEBGL_compressed_texture_pvrtc");
    if (null !== b) {
      if (a === THREE.RGB_PVRTC_4BPPV1_Format)
        return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
      if (a === THREE.RGB_PVRTC_2BPPV1_Format)
        return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
      if (a === THREE.RGBA_PVRTC_4BPPV1_Format)
        return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
      if (a === THREE.RGBA_PVRTC_2BPPV1_Format)
        return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
    }
    b = aa.get("EXT_blend_minmax");
    if (null !== b) {
      if (a === THREE.MinEquation)
        return b.MIN_EXT;
      if (a === THREE.MaxEquation)
        return b.MAX_EXT;
    }
    return 0;
  }
  console.log("THREE.WebGLRenderer", THREE.REVISION);
  a = a || {};
  var Q = void 0 !== a.canvas ? a.canvas : document.createElement("canvas"),
      W = void 0 !== a.context ? a.context : null,
      O = 1,
      ga = void 0 !== a.precision ? a.precision : "highp",
      ea = void 0 !== a.alpha ? a.alpha : !1,
      xa = void 0 !== a.depth ? a.depth : !0,
      H = void 0 !== a.stencil ? a.stencil : !0,
      $a = void 0 !== a.antialias ? a.antialias : !1,
      qa = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0,
      ya = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1,
      X = void 0 !== a.logarithmicDepthBuffer ? a.logarithmicDepthBuffer : !1,
      ta = new THREE.Color(0),
      Za = 0,
      pa = [],
      Fa = {},
      Ga = [],
      Ta = [],
      za = [],
      tb = [],
      eb = [];
  this.domElement = Q;
  this.context = null;
  this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
  this.shadowMapEnabled = this.gammaOutput = this.gammaInput = !1;
  this.shadowMapType = THREE.PCFShadowMap;
  this.shadowMapCullFace = THREE.CullFaceFront;
  this.shadowMapCascade = this.shadowMapDebug = !1;
  this.maxMorphTargets = 8;
  this.maxMorphNormals = 4;
  this.autoScaleCubemaps = !0;
  this.info = {
    memory: {
      programs: 0,
      geometries: 0,
      textures: 0
    },
    render: {
      calls: 0,
      vertices: 0,
      faces: 0,
      points: 0
    }
  };
  var I = this,
      Xa = [],
      Wb = null,
      uc = null,
      Hb = -1,
      Sa = "",
      Ib = null,
      Mb = 0,
      zb = -1,
      Xb = -1,
      Yb = -1,
      Zb = -1,
      ec = -1,
      fc = -1,
      gc = -1,
      hc = -1,
      rc = null,
      sc = null,
      tc = null,
      qc = null,
      hb = 0,
      Ya = 0,
      ib = Q.width,
      jb = Q.height,
      vc = 0,
      wc = 0,
      kb = new Uint8Array(16),
      Ma = new Uint8Array(16),
      ub = new THREE.Frustum,
      vb = new THREE.Matrix4;
  new THREE.Matrix4;
  var Da = new THREE.Vector3,
      ma = new THREE.Vector3,
      Ob = !0,
      nc = {
        ambient: [0, 0, 0],
        directional: {
          length: 0,
          colors: [],
          positions: []
        },
        point: {
          length: 0,
          colors: [],
          positions: [],
          distances: []
        },
        spot: {
          length: 0,
          colors: [],
          positions: [],
          distances: [],
          directions: [],
          anglesCos: [],
          exponents: []
        },
        hemi: {
          length: 0,
          skyColors: [],
          groundColors: [],
          positions: []
        }
      },
      l;
  try {
    var xc = {
      alpha: ea,
      depth: xa,
      stencil: H,
      antialias: $a,
      premultipliedAlpha: qa,
      preserveDrawingBuffer: ya
    };
    l = W || Q.getContext("webgl", xc) || Q.getContext("experimental-webgl", xc);
    if (null === l) {
      if (null !== Q.getContext("webgl"))
        throw "Error creating WebGL context with your selected attributes.";
      throw "Error creating WebGL context.";
    }
    Q.addEventListener("webglcontextlost", function(a) {
      a.preventDefault();
      yc();
      zc();
      Fa = {};
    }, !1);
  } catch (Fc) {
    console.error(Fc);
  }
  void 0 === l.getShaderPrecisionFormat && (l.getShaderPrecisionFormat = function() {
    return {
      rangeMin: 1,
      rangeMax: 1,
      precision: 1
    };
  });
  var aa = new THREE.WebGLExtensions(l);
  aa.get("OES_texture_float");
  aa.get("OES_texture_float_linear");
  aa.get("OES_standard_derivatives");
  X && aa.get("EXT_frag_depth");
  var zc = function() {
    l.clearColor(0, 0, 0, 1);
    l.clearDepth(1);
    l.clearStencil(0);
    l.enable(l.DEPTH_TEST);
    l.depthFunc(l.LEQUAL);
    l.frontFace(l.CCW);
    l.cullFace(l.BACK);
    l.enable(l.CULL_FACE);
    l.enable(l.BLEND);
    l.blendEquation(l.FUNC_ADD);
    l.blendFunc(l.SRC_ALPHA, l.ONE_MINUS_SRC_ALPHA);
    l.viewport(hb, Ya, ib, jb);
    l.clearColor(ta.r, ta.g, ta.b, Za);
  },
      yc = function() {
        Ib = Wb = null;
        Xb = zb = hc = gc = Yb = -1;
        Sa = "";
        Hb = -1;
        Ob = !0;
        for (var a = 0; a < Ma.length; a++)
          Ma[a] = 0;
      };
  zc();
  this.context = l;
  var pc = l.getParameter(l.MAX_TEXTURE_IMAGE_UNITS),
      Gc = l.getParameter(l.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
      Hc = l.getParameter(l.MAX_TEXTURE_SIZE),
      Ec = l.getParameter(l.MAX_CUBE_MAP_TEXTURE_SIZE),
      Vb = 0 < Gc,
      Nb = Vb && aa.get("OES_texture_float"),
      Ic = l.getShaderPrecisionFormat(l.VERTEX_SHADER, l.HIGH_FLOAT),
      Jc = l.getShaderPrecisionFormat(l.VERTEX_SHADER, l.MEDIUM_FLOAT);
  l.getShaderPrecisionFormat(l.VERTEX_SHADER, l.LOW_FLOAT);
  var Kc = l.getShaderPrecisionFormat(l.FRAGMENT_SHADER, l.HIGH_FLOAT),
      Lc = l.getShaderPrecisionFormat(l.FRAGMENT_SHADER, l.MEDIUM_FLOAT);
  l.getShaderPrecisionFormat(l.FRAGMENT_SHADER, l.LOW_FLOAT);
  var oc = function() {
    var a;
    return function() {
      if (void 0 !== a)
        return a;
      a = [];
      if (aa.get("WEBGL_compressed_texture_pvrtc") || aa.get("WEBGL_compressed_texture_s3tc"))
        for (var b = l.getParameter(l.COMPRESSED_TEXTURE_FORMATS),
            c = 0; c < b.length; c++)
          a.push(b[c]);
      return a;
    };
  }(),
      Mc = 0 < Ic.precision && 0 < Kc.precision,
      Ac = 0 < Jc.precision && 0 < Lc.precision;
  "highp" !== ga || Mc || (Ac ? (ga = "mediump", console.warn("THREE.WebGLRenderer: highp not supported, using mediump.")) : (ga = "lowp", console.warn("THREE.WebGLRenderer: highp and mediump not supported, using lowp.")));
  "mediump" !== ga || Ac || (ga = "lowp", console.warn("THREE.WebGLRenderer: mediump not supported, using lowp."));
  var Nc = new THREE.ShadowMapPlugin(this, pa, Fa, Ga),
      Oc = new THREE.SpritePlugin(this, tb),
      Pc = new THREE.LensFlarePlugin(this, eb);
  this.getContext = function() {
    return l;
  };
  this.forceContextLoss = function() {
    aa.get("WEBGL_lose_context").loseContext();
  };
  this.supportsVertexTextures = function() {
    return Vb;
  };
  this.supportsFloatTextures = function() {
    return aa.get("OES_texture_float");
  };
  this.supportsStandardDerivatives = function() {
    return aa.get("OES_standard_derivatives");
  };
  this.supportsCompressedTextureS3TC = function() {
    return aa.get("WEBGL_compressed_texture_s3tc");
  };
  this.supportsCompressedTexturePVRTC = function() {
    return aa.get("WEBGL_compressed_texture_pvrtc");
  };
  this.supportsBlendMinMax = function() {
    return aa.get("EXT_blend_minmax");
  };
  this.getMaxAnisotropy = function() {
    var a;
    return function() {
      if (void 0 !== a)
        return a;
      var b = aa.get("EXT_texture_filter_anisotropic");
      return a = null !== b ? l.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
    };
  }();
  this.getPrecision = function() {
    return ga;
  };
  this.getPixelRatio = function() {
    return O;
  };
  this.setPixelRatio = function(a) {
    O = a;
  };
  this.setSize = function(a, b, c) {
    Q.width = a * O;
    Q.height = b * O;
    !1 !== c && (Q.style.width = a + "px", Q.style.height = b + "px");
    this.setViewport(0, 0, a, b);
  };
  this.setViewport = function(a, b, c, d) {
    hb = a * O;
    Ya = b * O;
    ib = c * O;
    jb = d * O;
    l.viewport(hb, Ya, ib, jb);
  };
  this.setScissor = function(a, b, c, d) {
    l.scissor(a * O, b * O, c * O, d * O);
  };
  this.enableScissorTest = function(a) {
    a ? l.enable(l.SCISSOR_TEST) : l.disable(l.SCISSOR_TEST);
  };
  this.getClearColor = function() {
    return ta;
  };
  this.setClearColor = function(a, b) {
    ta.set(a);
    Za = void 0 !== b ? b : 1;
    l.clearColor(ta.r, ta.g, ta.b, Za);
  };
  this.getClearAlpha = function() {
    return Za;
  };
  this.setClearAlpha = function(a) {
    Za = a;
    l.clearColor(ta.r, ta.g, ta.b, Za);
  };
  this.clear = function(a, b, c) {
    var d = 0;
    if (void 0 === a || a)
      d |= l.COLOR_BUFFER_BIT;
    if (void 0 === b || b)
      d |= l.DEPTH_BUFFER_BIT;
    if (void 0 === c || c)
      d |= l.STENCIL_BUFFER_BIT;
    l.clear(d);
  };
  this.clearColor = function() {
    l.clear(l.COLOR_BUFFER_BIT);
  };
  this.clearDepth = function() {
    l.clear(l.DEPTH_BUFFER_BIT);
  };
  this.clearStencil = function() {
    l.clear(l.STENCIL_BUFFER_BIT);
  };
  this.clearTarget = function(a, b, c, d) {
    this.setRenderTarget(a);
    this.clear(b, c, d);
  };
  this.resetGLState = yc;
  var ic = function(a) {
    a.target.traverse(function(a) {
      a.removeEventListener("remove", ic);
      if (a instanceof THREE.Mesh || a instanceof THREE.PointCloud || a instanceof THREE.Line)
        delete Fa[a.id];
      else if (a instanceof THREE.ImmediateRenderObject || a.immediateRenderCallback)
        for (var b = Ga,
            c = b.length - 1; 0 <= c; c--)
          b[c].object === a && b.splice(c, 1);
      delete a.__webglInit;
      delete a._modelViewMatrix;
      delete a._normalMatrix;
      delete a.__webglActive;
    });
  },
      jc = function(a) {
        a = a.target;
        a.removeEventListener("dispose", jc);
        delete a.__webglInit;
        if (a instanceof THREE.BufferGeometry) {
          for (var b in a.attributes) {
            var c = a.attributes[b];
            void 0 !== c.buffer && (l.deleteBuffer(c.buffer), delete c.buffer);
          }
          I.info.memory.geometries--;
        } else if (b = sb[a.id], void 0 !== b) {
          for (var c = 0,
              d = b.length; c < d; c++) {
            var e = b[c];
            if (void 0 !== e.numMorphTargets) {
              for (var f = 0,
                  g = e.numMorphTargets; f < g; f++)
                l.deleteBuffer(e.__webglMorphTargetsBuffers[f]);
              delete e.__webglMorphTargetsBuffers;
            }
            if (void 0 !== e.numMorphNormals) {
              f = 0;
              for (g = e.numMorphNormals; f < g; f++)
                l.deleteBuffer(e.__webglMorphNormalsBuffers[f]);
              delete e.__webglMorphNormalsBuffers;
            }
            Bc(e);
          }
          delete sb[a.id];
        } else
          Bc(a);
        Sa = "";
      },
      Jb = function(a) {
        a = a.target;
        a.removeEventListener("dispose", Jb);
        a.image && a.image.__webglTextureCube ? (l.deleteTexture(a.image.__webglTextureCube), delete a.image.__webglTextureCube) : void 0 !== a.__webglInit && (l.deleteTexture(a.__webglTexture), delete a.__webglTexture, delete a.__webglInit);
        I.info.memory.textures--;
      },
      Cc = function(a) {
        a = a.target;
        a.removeEventListener("dispose", Cc);
        if (a && void 0 !== a.__webglTexture) {
          l.deleteTexture(a.__webglTexture);
          delete a.__webglTexture;
          if (a instanceof THREE.WebGLRenderTargetCube)
            for (var b = 0; 6 > b; b++)
              l.deleteFramebuffer(a.__webglFramebuffer[b]), l.deleteRenderbuffer(a.__webglRenderbuffer[b]);
          else
            l.deleteFramebuffer(a.__webglFramebuffer), l.deleteRenderbuffer(a.__webglRenderbuffer);
          delete a.__webglFramebuffer;
          delete a.__webglRenderbuffer;
        }
        I.info.memory.textures--;
      },
      mc = function(a) {
        a = a.target;
        a.removeEventListener("dispose", mc);
        lc(a);
      },
      Bc = function(a) {
        for (var b = "__webglVertexBuffer __webglNormalBuffer __webglTangentBuffer __webglColorBuffer __webglUVBuffer __webglUV2Buffer __webglSkinIndicesBuffer __webglSkinWeightsBuffer __webglFaceBuffer __webglLineBuffer __webglLineDistanceBuffer".split(" "),
            c = 0,
            d = b.length; c < d; c++) {
          var e = b[c];
          void 0 !== a[e] && (l.deleteBuffer(a[e]), delete a[e]);
        }
        if (void 0 !== a.__webglCustomAttributesList) {
          for (e in a.__webglCustomAttributesList)
            l.deleteBuffer(a.__webglCustomAttributesList[e].buffer);
          delete a.__webglCustomAttributesList;
        }
        I.info.memory.geometries--;
      },
      lc = function(a) {
        var b = a.program.program;
        if (void 0 !== b) {
          a.program = void 0;
          var c,
              d,
              e = !1;
          a = 0;
          for (c = Xa.length; a < c; a++)
            if (d = Xa[a], d.program === b) {
              d.usedTimes--;
              0 === d.usedTimes && (e = !0);
              break;
            }
          if (!0 === e) {
            e = [];
            a = 0;
            for (c = Xa.length; a < c; a++)
              d = Xa[a], d.program !== b && e.push(d);
            Xa = e;
            l.deleteProgram(b);
            I.info.memory.programs--;
          }
        }
      };
  this.renderBufferImmediate = function(a, b, c) {
    f();
    a.hasPositions && !a.__webglVertexBuffer && (a.__webglVertexBuffer = l.createBuffer());
    a.hasNormals && !a.__webglNormalBuffer && (a.__webglNormalBuffer = l.createBuffer());
    a.hasUvs && !a.__webglUvBuffer && (a.__webglUvBuffer = l.createBuffer());
    a.hasColors && !a.__webglColorBuffer && (a.__webglColorBuffer = l.createBuffer());
    a.hasPositions && (l.bindBuffer(l.ARRAY_BUFFER, a.__webglVertexBuffer), l.bufferData(l.ARRAY_BUFFER, a.positionArray, l.DYNAMIC_DRAW), g(b.attributes.position), l.vertexAttribPointer(b.attributes.position, 3, l.FLOAT, !1, 0, 0));
    if (a.hasNormals) {
      l.bindBuffer(l.ARRAY_BUFFER, a.__webglNormalBuffer);
      if (c.shading === THREE.FlatShading) {
        var d,
            e,
            k,
            m,
            n,
            p,
            q,
            r,
            t,
            s,
            v,
            u = 3 * a.count;
        for (v = 0; v < u; v += 9)
          s = a.normalArray, d = s[v], e = s[v + 1], k = s[v + 2], m = s[v + 3], p = s[v + 4], r = s[v + 5], n = s[v + 6], q = s[v + 7], t = s[v + 8], d = (d + m + n) / 3, e = (e + p + q) / 3, k = (k + r + t) / 3, s[v] = d, s[v + 1] = e, s[v + 2] = k, s[v + 3] = d, s[v + 4] = e, s[v + 5] = k, s[v + 6] = d, s[v + 7] = e, s[v + 8] = k;
      }
      l.bufferData(l.ARRAY_BUFFER, a.normalArray, l.DYNAMIC_DRAW);
      g(b.attributes.normal);
      l.vertexAttribPointer(b.attributes.normal, 3, l.FLOAT, !1, 0, 0);
    }
    a.hasUvs && c.map && (l.bindBuffer(l.ARRAY_BUFFER, a.__webglUvBuffer), l.bufferData(l.ARRAY_BUFFER, a.uvArray, l.DYNAMIC_DRAW), g(b.attributes.uv), l.vertexAttribPointer(b.attributes.uv, 2, l.FLOAT, !1, 0, 0));
    a.hasColors && c.vertexColors !== THREE.NoColors && (l.bindBuffer(l.ARRAY_BUFFER, a.__webglColorBuffer), l.bufferData(l.ARRAY_BUFFER, a.colorArray, l.DYNAMIC_DRAW), g(b.attributes.color), l.vertexAttribPointer(b.attributes.color, 3, l.FLOAT, !1, 0, 0));
    h();
    l.drawArrays(l.TRIANGLES, 0, a.count);
    a.count = 0;
  };
  this.renderBufferDirect = function(a, b, c, d, g, h) {
    if (!1 !== d.visible)
      if (v(h), a = x(a, b, c, d, h), b = !1, c = "direct_" + g.id + "_" + a.id + "_" + (d.wireframe ? 1 : 0), c !== Sa && (Sa = c, b = !0), b && f(), h instanceof THREE.Mesh) {
        h = !0 === d.wireframe ? l.LINES : l.TRIANGLES;
        var k = g.attributes.index;
        if (k) {
          var m,
              n;
          k.array instanceof Uint32Array && aa.get("OES_element_index_uint") ? (m = l.UNSIGNED_INT, n = 4) : (m = l.UNSIGNED_SHORT, n = 2);
          c = g.offsets;
          if (0 === c.length)
            b && (e(d, a, g, 0), l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, k.buffer)), l.drawElements(h, k.array.length, m, 0), I.info.render.calls++, I.info.render.vertices += k.array.length, I.info.render.faces += k.array.length / 3;
          else {
            b = !0;
            for (var p = 0,
                q = c.length; p < q; p++) {
              var s = c[p].index;
              b && (e(d, a, g, s), l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, k.buffer));
              l.drawElements(h, c[p].count, m, c[p].start * n);
              I.info.render.calls++;
              I.info.render.vertices += c[p].count;
              I.info.render.faces += c[p].count / 3;
            }
          }
        } else
          b && e(d, a, g, 0), d = g.attributes.position, l.drawArrays(h, 0, d.array.length / 3), I.info.render.calls++, I.info.render.vertices += d.array.length / 3, I.info.render.faces += d.array.length / 9;
      } else if (h instanceof THREE.PointCloud)
        if (h = l.POINTS, k = g.attributes.index)
          if (k.array instanceof Uint32Array && aa.get("OES_element_index_uint") ? (m = l.UNSIGNED_INT, n = 4) : (m = l.UNSIGNED_SHORT, n = 2), c = g.offsets, 0 === c.length)
            b && (e(d, a, g, 0), l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, k.buffer)), l.drawElements(h, k.array.length, m, 0), I.info.render.calls++, I.info.render.points += k.array.length;
          else
            for (1 < c.length && (b = !0), p = 0, q = c.length; p < q; p++)
              s = c[p].index, b && (e(d, a, g, s), l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, k.buffer)), l.drawElements(h, c[p].count, m, c[p].start * n), I.info.render.calls++, I.info.render.points += c[p].count;
        else if (b && e(d, a, g, 0), d = g.attributes.position, c = g.offsets, 0 === c.length)
          l.drawArrays(h, 0, d.array.length / 3), I.info.render.calls++, I.info.render.points += d.array.length / 3;
        else
          for (p = 0, q = c.length; p < q; p++)
            l.drawArrays(h, c[p].index, c[p].count), I.info.render.calls++, I.info.render.points += c[p].count;
      else if (h instanceof THREE.Line)
        if (h = h.mode === THREE.LineStrip ? l.LINE_STRIP : l.LINES, D(d.linewidth), k = g.attributes.index)
          if (k.array instanceof Uint32Array ? (m = l.UNSIGNED_INT, n = 4) : (m = l.UNSIGNED_SHORT, n = 2), c = g.offsets, 0 === c.length)
            b && (e(d, a, g, 0), l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, k.buffer)), l.drawElements(h, k.array.length, m, 0), I.info.render.calls++, I.info.render.vertices += k.array.length;
          else
            for (1 < c.length && (b = !0), p = 0, q = c.length; p < q; p++)
              s = c[p].index, b && (e(d, a, g, s), l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, k.buffer)), l.drawElements(h, c[p].count, m, c[p].start * n), I.info.render.calls++, I.info.render.vertices += c[p].count;
        else if (b && e(d, a, g, 0), d = g.attributes.position, c = g.offsets, 0 === c.length)
          l.drawArrays(h, 0, d.array.length / 3), I.info.render.calls++, I.info.render.vertices += d.array.length / 3;
        else
          for (p = 0, q = c.length; p < q; p++)
            l.drawArrays(h, c[p].index, c[p].count), I.info.render.calls++, I.info.render.vertices += c[p].count;
  };
  this.renderBuffer = function(a, b, c, d, e, k) {
    if (!1 !== d.visible) {
      v(k);
      c = x(a, b, c, d, k);
      b = c.attributes;
      a = !1;
      c = e.id + "_" + c.id + "_" + (d.wireframe ? 1 : 0);
      c !== Sa && (Sa = c, a = !0);
      a && f();
      if (!d.morphTargets && 0 <= b.position)
        a && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglVertexBuffer), g(b.position), l.vertexAttribPointer(b.position, 3, l.FLOAT, !1, 0, 0));
      else if (k.morphTargetBase) {
        c = d.program.attributes;
        -1 !== k.morphTargetBase && 0 <= c.position ? (l.bindBuffer(l.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[k.morphTargetBase]), g(c.position), l.vertexAttribPointer(c.position, 3, l.FLOAT, !1, 0, 0)) : 0 <= c.position && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglVertexBuffer), g(c.position), l.vertexAttribPointer(c.position, 3, l.FLOAT, !1, 0, 0));
        if (k.morphTargetForcedOrder.length)
          for (var m = 0,
              n = k.morphTargetForcedOrder,
              q = k.morphTargetInfluences,
              s; m < d.numSupportedMorphTargets && m < n.length; )
            s = c["morphTarget" + m], 0 <= s && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[n[m]]), g(s), l.vertexAttribPointer(s, 3, l.FLOAT, !1, 0, 0)), s = c["morphNormal" + m], 0 <= s && d.morphNormals && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglMorphNormalsBuffers[n[m]]), g(s), l.vertexAttribPointer(s, 3, l.FLOAT, !1, 0, 0)), k.__webglMorphTargetInfluences[m] = q[n[m]], m++;
        else {
          n = [];
          q = k.morphTargetInfluences;
          m = 0;
          for (s = q.length; m < s; m++)
            n.push([q[m], m]);
          n.length > d.numSupportedMorphTargets ? (n.sort(p), n.length = d.numSupportedMorphTargets) : n.length > d.numSupportedMorphNormals ? n.sort(p) : 0 === n.length && n.push([0, 0]);
          for (var m = 0,
              r = d.numSupportedMorphTargets; m < r; m++)
            if (n[m]) {
              var t = n[m][1];
              s = c["morphTarget" + m];
              0 <= s && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[t]), g(s), l.vertexAttribPointer(s, 3, l.FLOAT, !1, 0, 0));
              s = c["morphNormal" + m];
              0 <= s && d.morphNormals && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglMorphNormalsBuffers[t]), g(s), l.vertexAttribPointer(s, 3, l.FLOAT, !1, 0, 0));
              k.__webglMorphTargetInfluences[m] = q[t];
            } else
              k.__webglMorphTargetInfluences[m] = 0;
        }
        null !== d.program.uniforms.morphTargetInfluences && l.uniform1fv(d.program.uniforms.morphTargetInfluences, k.__webglMorphTargetInfluences);
      }
      if (a) {
        if (e.__webglCustomAttributesList)
          for (c = 0, q = e.__webglCustomAttributesList.length; c < q; c++)
            n = e.__webglCustomAttributesList[c], 0 <= b[n.buffer.belongsToAttribute] && (l.bindBuffer(l.ARRAY_BUFFER, n.buffer), g(b[n.buffer.belongsToAttribute]), l.vertexAttribPointer(b[n.buffer.belongsToAttribute], n.size, l.FLOAT, !1, 0, 0));
        0 <= b.color && (0 < k.geometry.colors.length || 0 < k.geometry.faces.length ? (l.bindBuffer(l.ARRAY_BUFFER, e.__webglColorBuffer), g(b.color), l.vertexAttribPointer(b.color, 3, l.FLOAT, !1, 0, 0)) : void 0 !== d.defaultAttributeValues && l.vertexAttrib3fv(b.color, d.defaultAttributeValues.color));
        0 <= b.normal && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglNormalBuffer), g(b.normal), l.vertexAttribPointer(b.normal, 3, l.FLOAT, !1, 0, 0));
        0 <= b.tangent && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglTangentBuffer), g(b.tangent), l.vertexAttribPointer(b.tangent, 4, l.FLOAT, !1, 0, 0));
        0 <= b.uv && (k.geometry.faceVertexUvs[0] ? (l.bindBuffer(l.ARRAY_BUFFER, e.__webglUVBuffer), g(b.uv), l.vertexAttribPointer(b.uv, 2, l.FLOAT, !1, 0, 0)) : void 0 !== d.defaultAttributeValues && l.vertexAttrib2fv(b.uv, d.defaultAttributeValues.uv));
        0 <= b.uv2 && (k.geometry.faceVertexUvs[1] ? (l.bindBuffer(l.ARRAY_BUFFER, e.__webglUV2Buffer), g(b.uv2), l.vertexAttribPointer(b.uv2, 2, l.FLOAT, !1, 0, 0)) : void 0 !== d.defaultAttributeValues && l.vertexAttrib2fv(b.uv2, d.defaultAttributeValues.uv2));
        d.skinning && 0 <= b.skinIndex && 0 <= b.skinWeight && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglSkinIndicesBuffer), g(b.skinIndex), l.vertexAttribPointer(b.skinIndex, 4, l.FLOAT, !1, 0, 0), l.bindBuffer(l.ARRAY_BUFFER, e.__webglSkinWeightsBuffer), g(b.skinWeight), l.vertexAttribPointer(b.skinWeight, 4, l.FLOAT, !1, 0, 0));
        0 <= b.lineDistance && (l.bindBuffer(l.ARRAY_BUFFER, e.__webglLineDistanceBuffer), g(b.lineDistance), l.vertexAttribPointer(b.lineDistance, 1, l.FLOAT, !1, 0, 0));
      }
      h();
      k instanceof THREE.Mesh ? (k = e.__typeArray === Uint32Array ? l.UNSIGNED_INT : l.UNSIGNED_SHORT, d.wireframe ? (D(d.wireframeLinewidth), a && l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, e.__webglLineBuffer), l.drawElements(l.LINES, e.__webglLineCount, k, 0)) : (a && l.bindBuffer(l.ELEMENT_ARRAY_BUFFER, e.__webglFaceBuffer), l.drawElements(l.TRIANGLES, e.__webglFaceCount, k, 0)), I.info.render.calls++, I.info.render.vertices += e.__webglFaceCount, I.info.render.faces += e.__webglFaceCount / 3) : k instanceof THREE.Line ? (k = k.mode === THREE.LineStrip ? l.LINE_STRIP : l.LINES, D(d.linewidth), l.drawArrays(k, 0, e.__webglLineCount), I.info.render.calls++) : k instanceof THREE.PointCloud && (l.drawArrays(l.POINTS, 0, e.__webglParticleCount), I.info.render.calls++, I.info.render.points += e.__webglParticleCount);
    }
  };
  this.render = function(a, b, c, d) {
    if (!1 === b instanceof THREE.Camera)
      console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
    else {
      var e = a.fog;
      Sa = "";
      Hb = -1;
      Ib = null;
      Ob = !0;
      !0 === a.autoUpdate && a.updateMatrixWorld();
      void 0 === b.parent && b.updateMatrixWorld();
      a.traverse(function(a) {
        a instanceof THREE.SkinnedMesh && a.skeleton.update();
      });
      b.matrixWorldInverse.getInverse(b.matrixWorld);
      vb.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse);
      ub.setFromMatrix(vb);
      pa.length = 0;
      Ta.length = 0;
      za.length = 0;
      tb.length = 0;
      eb.length = 0;
      q(a);
      !0 === I.sortObjects && (Ta.sort(k), za.sort(n));
      Nc.render(a, b);
      I.info.render.calls = 0;
      I.info.render.vertices = 0;
      I.info.render.faces = 0;
      I.info.render.points = 0;
      this.setRenderTarget(c);
      (this.autoClear || d) && this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
      d = 0;
      for (var f = Ga.length; d < f; d++) {
        var g = Ga[d],
            h = g.object;
        h.visible && (G(h, b), s(g));
      }
      a.overrideMaterial ? (d = a.overrideMaterial, this.setBlending(d.blending, d.blendEquation, d.blendSrc, d.blendDst), this.setDepthTest(d.depthTest), this.setDepthWrite(d.depthWrite), A(d.polygonOffset, d.polygonOffsetFactor, d.polygonOffsetUnits), m(Ta, b, pa, e, !0, d), m(za, b, pa, e, !0, d), t(Ga, "", b, pa, e, !1, d)) : (d = null, this.setBlending(THREE.NoBlending), m(Ta, b, pa, e, !1, d), t(Ga, "opaque", b, pa, e, !1, d), m(za, b, pa, e, !0, d), t(Ga, "transparent", b, pa, e, !0, d));
      Oc.render(a, b);
      Pc.render(a, b, vc, wc);
      c && c.generateMipmaps && c.minFilter !== THREE.NearestFilter && c.minFilter !== THREE.LinearFilter && L(c);
      this.setDepthTest(!0);
      this.setDepthWrite(!0);
    }
  };
  this.renderImmediateObject = function(a, b, c, d, e) {
    var f = x(a, b, c, d, e);
    Sa = "";
    I.setMaterialFaces(d);
    e.immediateRenderCallback ? e.immediateRenderCallback(f, l, ub) : e.render(function(a) {
      I.renderBufferImmediate(a, f, d);
    });
  };
  var sb = {},
      kc = 0,
      Dc = {
        MeshDepthMaterial: "depth",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointCloudMaterial: "particle_basic"
      };
  this.setFaceCulling = function(a, b) {
    a === THREE.CullFaceNone ? l.disable(l.CULL_FACE) : (b === THREE.FrontFaceDirectionCW ? l.frontFace(l.CW) : l.frontFace(l.CCW), a === THREE.CullFaceBack ? l.cullFace(l.BACK) : a === THREE.CullFaceFront ? l.cullFace(l.FRONT) : l.cullFace(l.FRONT_AND_BACK), l.enable(l.CULL_FACE));
  };
  this.setMaterialFaces = function(a) {
    var b = a.side === THREE.DoubleSide;
    a = a.side === THREE.BackSide;
    zb !== b && (b ? l.disable(l.CULL_FACE) : l.enable(l.CULL_FACE), zb = b);
    Xb !== a && (a ? l.frontFace(l.CW) : l.frontFace(l.CCW), Xb = a);
  };
  this.setDepthTest = function(a) {
    gc !== a && (a ? l.enable(l.DEPTH_TEST) : l.disable(l.DEPTH_TEST), gc = a);
  };
  this.setDepthWrite = function(a) {
    hc !== a && (l.depthMask(a), hc = a);
  };
  this.setBlending = function(a, b, c, d) {
    a !== Yb && (a === THREE.NoBlending ? l.disable(l.BLEND) : a === THREE.AdditiveBlending ? (l.enable(l.BLEND), l.blendEquation(l.FUNC_ADD), l.blendFunc(l.SRC_ALPHA, l.ONE)) : a === THREE.SubtractiveBlending ? (l.enable(l.BLEND), l.blendEquation(l.FUNC_ADD), l.blendFunc(l.ZERO, l.ONE_MINUS_SRC_COLOR)) : a === THREE.MultiplyBlending ? (l.enable(l.BLEND), l.blendEquation(l.FUNC_ADD), l.blendFunc(l.ZERO, l.SRC_COLOR)) : a === THREE.CustomBlending ? l.enable(l.BLEND) : (l.enable(l.BLEND), l.blendEquationSeparate(l.FUNC_ADD, l.FUNC_ADD), l.blendFuncSeparate(l.SRC_ALPHA, l.ONE_MINUS_SRC_ALPHA, l.ONE, l.ONE_MINUS_SRC_ALPHA)), Yb = a);
    if (a === THREE.CustomBlending) {
      if (b !== Zb && (l.blendEquation(T(b)), Zb = b), c !== ec || d !== fc)
        l.blendFunc(T(c), T(d)), ec = c, fc = d;
    } else
      fc = ec = Zb = null;
  };
  this.uploadTexture = function(a) {
    void 0 === a.__webglInit && (a.__webglInit = !0, a.addEventListener("dispose", Jb), a.__webglTexture = l.createTexture(), I.info.memory.textures++);
    l.bindTexture(l.TEXTURE_2D, a.__webglTexture);
    l.pixelStorei(l.UNPACK_FLIP_Y_WEBGL, a.flipY);
    l.pixelStorei(l.UNPACK_PREMULTIPLY_ALPHA_WEBGL, a.premultiplyAlpha);
    l.pixelStorei(l.UNPACK_ALIGNMENT, a.unpackAlignment);
    a.image = M(a.image, Hc);
    var b = a.image,
        c = THREE.Math.isPowerOfTwo(b.width) && THREE.Math.isPowerOfTwo(b.height),
        d = T(a.format),
        e = T(a.type);
    U(l.TEXTURE_2D, a, c);
    var f = a.mipmaps;
    if (a instanceof THREE.DataTexture)
      if (0 < f.length && c) {
        for (var g = 0,
            h = f.length; g < h; g++)
          b = f[g], l.texImage2D(l.TEXTURE_2D, g, d, b.width, b.height, 0, d, e, b.data);
        a.generateMipmaps = !1;
      } else
        l.texImage2D(l.TEXTURE_2D, 0, d, b.width, b.height, 0, d, e, b.data);
    else if (a instanceof THREE.CompressedTexture)
      for (g = 0, h = f.length; g < h; g++)
        b = f[g], a.format !== THREE.RGBAFormat && a.format !== THREE.RGBFormat ? -1 < oc().indexOf(d) ? l.compressedTexImage2D(l.TEXTURE_2D, g, d, b.width, b.height, 0, b.data) : console.warn("Attempt to load unsupported compressed texture format") : l.texImage2D(l.TEXTURE_2D, g, d, b.width, b.height, 0, d, e, b.data);
    else if (0 < f.length && c) {
      g = 0;
      for (h = f.length; g < h; g++)
        b = f[g], l.texImage2D(l.TEXTURE_2D, g, d, d, e, b);
      a.generateMipmaps = !1;
    } else
      l.texImage2D(l.TEXTURE_2D, 0, d, d, e, a.image);
    a.generateMipmaps && c && l.generateMipmap(l.TEXTURE_2D);
    a.needsUpdate = !1;
    if (a.onUpdate)
      a.onUpdate();
  };
  this.setTexture = function(a, b) {
    l.activeTexture(l.TEXTURE0 + b);
    a.needsUpdate ? I.uploadTexture(a) : l.bindTexture(l.TEXTURE_2D, a.__webglTexture);
  };
  this.setRenderTarget = function(a) {
    var b = a instanceof THREE.WebGLRenderTargetCube;
    if (a && void 0 === a.__webglFramebuffer) {
      void 0 === a.depthBuffer && (a.depthBuffer = !0);
      void 0 === a.stencilBuffer && (a.stencilBuffer = !0);
      a.addEventListener("dispose", Cc);
      a.__webglTexture = l.createTexture();
      I.info.memory.textures++;
      var c = THREE.Math.isPowerOfTwo(a.width) && THREE.Math.isPowerOfTwo(a.height),
          d = T(a.format),
          e = T(a.type);
      if (b) {
        a.__webglFramebuffer = [];
        a.__webglRenderbuffer = [];
        l.bindTexture(l.TEXTURE_CUBE_MAP, a.__webglTexture);
        U(l.TEXTURE_CUBE_MAP, a, c);
        for (var g = 0; 6 > g; g++) {
          a.__webglFramebuffer[g] = l.createFramebuffer();
          a.__webglRenderbuffer[g] = l.createRenderbuffer();
          l.texImage2D(l.TEXTURE_CUBE_MAP_POSITIVE_X + g, 0, d, a.width, a.height, 0, d, e, null);
          var f = a,
              h = l.TEXTURE_CUBE_MAP_POSITIVE_X + g;
          l.bindFramebuffer(l.FRAMEBUFFER, a.__webglFramebuffer[g]);
          l.framebufferTexture2D(l.FRAMEBUFFER, l.COLOR_ATTACHMENT0, h, f.__webglTexture, 0);
          K(a.__webglRenderbuffer[g], a);
        }
        c && l.generateMipmap(l.TEXTURE_CUBE_MAP);
      } else
        a.__webglFramebuffer = l.createFramebuffer(), a.__webglRenderbuffer = a.shareDepthFrom ? a.shareDepthFrom.__webglRenderbuffer : l.createRenderbuffer(), l.bindTexture(l.TEXTURE_2D, a.__webglTexture), U(l.TEXTURE_2D, a, c), l.texImage2D(l.TEXTURE_2D, 0, d, a.width, a.height, 0, d, e, null), d = l.TEXTURE_2D, l.bindFramebuffer(l.FRAMEBUFFER, a.__webglFramebuffer), l.framebufferTexture2D(l.FRAMEBUFFER, l.COLOR_ATTACHMENT0, d, a.__webglTexture, 0), a.shareDepthFrom ? a.depthBuffer && !a.stencilBuffer ? l.framebufferRenderbuffer(l.FRAMEBUFFER, l.DEPTH_ATTACHMENT, l.RENDERBUFFER, a.__webglRenderbuffer) : a.depthBuffer && a.stencilBuffer && l.framebufferRenderbuffer(l.FRAMEBUFFER, l.DEPTH_STENCIL_ATTACHMENT, l.RENDERBUFFER, a.__webglRenderbuffer) : K(a.__webglRenderbuffer, a), c && l.generateMipmap(l.TEXTURE_2D);
      b ? l.bindTexture(l.TEXTURE_CUBE_MAP, null) : l.bindTexture(l.TEXTURE_2D, null);
      l.bindRenderbuffer(l.RENDERBUFFER, null);
      l.bindFramebuffer(l.FRAMEBUFFER, null);
    }
    a ? (b = b ? a.__webglFramebuffer[a.activeCubeFace] : a.__webglFramebuffer, c = a.width, a = a.height, e = d = 0) : (b = null, c = ib, a = jb, d = hb, e = Ya);
    b !== uc && (l.bindFramebuffer(l.FRAMEBUFFER, b), l.viewport(d, e, c, a), uc = b);
    vc = c;
    wc = a;
  };
  this.initMaterial = function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  };
  this.addPrePlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  };
  this.addPostPlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  };
  this.updateShadowMap = function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  };
};
THREE.WebGLRenderTarget = function(a, b, c) {
  this.width = a;
  this.height = b;
  c = c || {};
  this.wrapS = void 0 !== c.wrapS ? c.wrapS : THREE.ClampToEdgeWrapping;
  this.wrapT = void 0 !== c.wrapT ? c.wrapT : THREE.ClampToEdgeWrapping;
  this.magFilter = void 0 !== c.magFilter ? c.magFilter : THREE.LinearFilter;
  this.minFilter = void 0 !== c.minFilter ? c.minFilter : THREE.LinearMipMapLinearFilter;
  this.anisotropy = void 0 !== c.anisotropy ? c.anisotropy : 1;
  this.offset = new THREE.Vector2(0, 0);
  this.repeat = new THREE.Vector2(1, 1);
  this.format = void 0 !== c.format ? c.format : THREE.RGBAFormat;
  this.type = void 0 !== c.type ? c.type : THREE.UnsignedByteType;
  this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;
  this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;
  this.generateMipmaps = !0;
  this.shareDepthFrom = null;
};
THREE.WebGLRenderTarget.prototype = {
  constructor: THREE.WebGLRenderTarget,
  setSize: function(a, b) {
    this.width = a;
    this.height = b;
  },
  clone: function() {
    var a = new THREE.WebGLRenderTarget(this.width, this.height);
    a.wrapS = this.wrapS;
    a.wrapT = this.wrapT;
    a.magFilter = this.magFilter;
    a.minFilter = this.minFilter;
    a.anisotropy = this.anisotropy;
    a.offset.copy(this.offset);
    a.repeat.copy(this.repeat);
    a.format = this.format;
    a.type = this.type;
    a.depthBuffer = this.depthBuffer;
    a.stencilBuffer = this.stencilBuffer;
    a.generateMipmaps = this.generateMipmaps;
    a.shareDepthFrom = this.shareDepthFrom;
    return a;
  },
  dispose: function() {
    this.dispatchEvent({type: "dispose"});
  }
};
THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);
THREE.WebGLRenderTargetCube = function(a, b, c) {
  THREE.WebGLRenderTarget.call(this, a, b, c);
  this.activeCubeFace = 0;
};
THREE.WebGLRenderTargetCube.prototype = Object.create(THREE.WebGLRenderTarget.prototype);
THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;
THREE.WebGLExtensions = function(a) {
  var b = {};
  this.get = function(c) {
    if (void 0 !== b[c])
      return b[c];
    var d;
    switch (c) {
      case "EXT_texture_filter_anisotropic":
        d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        d = a.getExtension(c);
    }
    null === d && console.log("THREE.WebGLRenderer: " + c + " extension not supported.");
    return b[c] = d;
  };
};
THREE.WebGLProgram = function() {
  var a = 0;
  return function(b, c, d, e) {
    var f = b.context,
        g = d.defines,
        h = d.__webglShader.uniforms,
        k = d.attributes,
        n = d.__webglShader.vertexShader,
        p = d.__webglShader.fragmentShader,
        q = d.index0AttributeName;
    void 0 === q && !0 === e.morphTargets && (q = "position");
    var m = "SHADOWMAP_TYPE_BASIC";
    e.shadowMapType === THREE.PCFShadowMap ? m = "SHADOWMAP_TYPE_PCF" : e.shadowMapType === THREE.PCFSoftShadowMap && (m = "SHADOWMAP_TYPE_PCF_SOFT");
    var t = "ENVMAP_TYPE_CUBE",
        s = "ENVMAP_MODE_REFLECTION",
        r = "ENVMAP_BLENDING_MULTIPLY";
    if (e.envMap) {
      switch (d.envMap.mapping) {
        case THREE.CubeReflectionMapping:
        case THREE.CubeRefractionMapping:
          t = "ENVMAP_TYPE_CUBE";
          break;
        case THREE.EquirectangularReflectionMapping:
        case THREE.EquirectangularRefractionMapping:
          t = "ENVMAP_TYPE_EQUIREC";
          break;
        case THREE.SphericalReflectionMapping:
          t = "ENVMAP_TYPE_SPHERE";
      }
      switch (d.envMap.mapping) {
        case THREE.CubeRefractionMapping:
        case THREE.EquirectangularRefractionMapping:
          s = "ENVMAP_MODE_REFRACTION";
      }
      switch (d.combine) {
        case THREE.MultiplyOperation:
          r = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case THREE.MixOperation:
          r = "ENVMAP_BLENDING_MIX";
          break;
        case THREE.AddOperation:
          r = "ENVMAP_BLENDING_ADD";
      }
    }
    var u,
        v;
    u = [];
    for (var y in g)
      v = g[y], !1 !== v && (v = "#define " + y + " " + v, u.push(v));
    u = u.join("\n");
    g = f.createProgram();
    d instanceof THREE.RawShaderMaterial ? b = d = "" : (d = ["precision " + e.precision + " float;", "precision " + e.precision + " int;", u, e.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", b.gammaInput ? "#define GAMMA_INPUT" : "", b.gammaOutput ? "#define GAMMA_OUTPUT" : "", "#define MAX_DIR_LIGHTS " + e.maxDirLights, "#define MAX_POINT_LIGHTS " + e.maxPointLights, "#define MAX_SPOT_LIGHTS " + e.maxSpotLights, "#define MAX_HEMI_LIGHTS " + e.maxHemiLights, "#define MAX_SHADOWS " + e.maxShadows, "#define MAX_BONES " + e.maxBones, e.map ? "#define USE_MAP" : "", e.envMap ? "#define USE_ENVMAP" : "", e.envMap ? "#define " + s : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.vertexColors ? "#define USE_COLOR" : "", e.skinning ? "#define USE_SKINNING" : "", e.useVertexTexture ? "#define BONE_TEXTURE" : "", e.morphTargets ? "#define USE_MORPHTARGETS" : "", e.morphNormals ? "#define USE_MORPHNORMALS" : "", e.wrapAround ? "#define WRAP_AROUND" : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + m : "", e.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", e.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", e.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", "uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n"].join("\n"), b = ["precision " + e.precision + " float;", "precision " + e.precision + " int;", e.bumpMap || e.normalMap ? "#extension GL_OES_standard_derivatives : enable" : "", u, "#define MAX_DIR_LIGHTS " + e.maxDirLights, "#define MAX_POINT_LIGHTS " + e.maxPointLights, "#define MAX_SPOT_LIGHTS " + e.maxSpotLights, "#define MAX_HEMI_LIGHTS " + e.maxHemiLights, "#define MAX_SHADOWS " + e.maxShadows, e.alphaTest ? "#define ALPHATEST " + e.alphaTest : "", b.gammaInput ? "#define GAMMA_INPUT" : "", b.gammaOutput ? "#define GAMMA_OUTPUT" : "", e.useFog && e.fog ? "#define USE_FOG" : "", e.useFog && e.fogExp ? "#define FOG_EXP2" : "", e.map ? "#define USE_MAP" : "", e.envMap ? "#define USE_ENVMAP" : "", e.envMap ? "#define " + t : "", e.envMap ? "#define " + s : "", e.envMap ? "#define " + r : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.vertexColors ? "#define USE_COLOR" : "", e.metal ? "#define METAL" : "", e.wrapAround ? "#define WRAP_AROUND" : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + m : "", e.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "", e.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", "uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n"));
    n = new THREE.WebGLShader(f, f.VERTEX_SHADER, d + n);
    p = new THREE.WebGLShader(f, f.FRAGMENT_SHADER, b + p);
    f.attachShader(g, n);
    f.attachShader(g, p);
    void 0 !== q && f.bindAttribLocation(g, 0, q);
    f.linkProgram(g);
    !1 === f.getProgramParameter(g, f.LINK_STATUS) && (console.error("THREE.WebGLProgram: Could not initialise shader."), console.error("gl.VALIDATE_STATUS", f.getProgramParameter(g, f.VALIDATE_STATUS)), console.error("gl.getError()", f.getError()));
    "" !== f.getProgramInfoLog(g) && console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", f.getProgramInfoLog(g));
    f.deleteShader(n);
    f.deleteShader(p);
    q = "viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences bindMatrix bindMatrixInverse".split(" ");
    e.useVertexTexture ? (q.push("boneTexture"), q.push("boneTextureWidth"), q.push("boneTextureHeight")) : q.push("boneGlobalMatrices");
    e.logarithmicDepthBuffer && q.push("logDepthBufFC");
    for (var C in h)
      q.push(C);
    h = q;
    C = {};
    q = 0;
    for (b = h.length; q < b; q++)
      m = h[q], C[m] = f.getUniformLocation(g, m);
    this.uniforms = C;
    q = "position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");
    for (h = 0; h < e.maxMorphTargets; h++)
      q.push("morphTarget" + h);
    for (h = 0; h < e.maxMorphNormals; h++)
      q.push("morphNormal" + h);
    for (var x in k)
      q.push(x);
    e = q;
    k = {};
    x = 0;
    for (h = e.length; x < h; x++)
      C = e[x], k[C] = f.getAttribLocation(g, C);
    this.attributes = k;
    this.attributesKeys = Object.keys(this.attributes);
    this.id = a++;
    this.code = c;
    this.usedTimes = 1;
    this.program = g;
    this.vertexShader = n;
    this.fragmentShader = p;
    return this;
  };
}();
THREE.WebGLShader = function() {
  var a = function(a) {
    a = a.split("\n");
    for (var c = 0; c < a.length; c++)
      a[c] = c + 1 + ": " + a[c];
    return a.join("\n");
  };
  return function(b, c, d) {
    c = b.createShader(c);
    b.shaderSource(c, d);
    b.compileShader(c);
    !1 === b.getShaderParameter(c, b.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile.");
    "" !== b.getShaderInfoLog(c) && (console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", b.getShaderInfoLog(c)), console.warn(a(d)));
    return c;
  };
}();
THREE.LensFlarePlugin = function(a, b) {
  var c,
      d,
      e,
      f,
      g,
      h,
      k,
      n,
      p,
      q,
      m = a.context,
      t,
      s,
      r,
      u,
      v,
      y;
  this.render = function(C, x, F, z) {
    if (0 !== b.length) {
      C = new THREE.Vector3;
      var G = z / F,
          E = .5 * F,
          w = .5 * z,
          D = 16 / z,
          A = new THREE.Vector2(D * G, D),
          U = new THREE.Vector3(1, 1, 0),
          M = new THREE.Vector2(1, 1);
      if (void 0 === r) {
        var D = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]),
            K = new Uint16Array([0, 1, 2, 0, 2, 3]);
        t = m.createBuffer();
        s = m.createBuffer();
        m.bindBuffer(m.ARRAY_BUFFER, t);
        m.bufferData(m.ARRAY_BUFFER, D, m.STATIC_DRAW);
        m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, s);
        m.bufferData(m.ELEMENT_ARRAY_BUFFER, K, m.STATIC_DRAW);
        v = m.createTexture();
        y = m.createTexture();
        m.bindTexture(m.TEXTURE_2D, v);
        m.texImage2D(m.TEXTURE_2D, 0, m.RGB, 16, 16, 0, m.RGB, m.UNSIGNED_BYTE, null);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_WRAP_S, m.CLAMP_TO_EDGE);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_WRAP_T, m.CLAMP_TO_EDGE);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MAG_FILTER, m.NEAREST);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, m.NEAREST);
        m.bindTexture(m.TEXTURE_2D, y);
        m.texImage2D(m.TEXTURE_2D, 0, m.RGBA, 16, 16, 0, m.RGBA, m.UNSIGNED_BYTE, null);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_WRAP_S, m.CLAMP_TO_EDGE);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_WRAP_T, m.CLAMP_TO_EDGE);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MAG_FILTER, m.NEAREST);
        m.texParameteri(m.TEXTURE_2D, m.TEXTURE_MIN_FILTER, m.NEAREST);
        var D = (u = 0 < m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS)) ? {
          vertexShader: "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
          fragmentShader: "uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"
        } : {
          vertexShader: "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
          fragmentShader: "precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"
        },
            K = m.createProgram(),
            L = m.createShader(m.FRAGMENT_SHADER),
            N = m.createShader(m.VERTEX_SHADER),
            T = "precision " + a.getPrecision() + " float;\n";
        m.shaderSource(L, T + D.fragmentShader);
        m.shaderSource(N, T + D.vertexShader);
        m.compileShader(L);
        m.compileShader(N);
        m.attachShader(K, L);
        m.attachShader(K, N);
        m.linkProgram(K);
        r = K;
        p = m.getAttribLocation(r, "position");
        q = m.getAttribLocation(r, "uv");
        c = m.getUniformLocation(r, "renderType");
        d = m.getUniformLocation(r, "map");
        e = m.getUniformLocation(r, "occlusionMap");
        f = m.getUniformLocation(r, "opacity");
        g = m.getUniformLocation(r, "color");
        h = m.getUniformLocation(r, "scale");
        k = m.getUniformLocation(r, "rotation");
        n = m.getUniformLocation(r, "screenPosition");
      }
      m.useProgram(r);
      m.enableVertexAttribArray(p);
      m.enableVertexAttribArray(q);
      m.uniform1i(e, 0);
      m.uniform1i(d, 1);
      m.bindBuffer(m.ARRAY_BUFFER, t);
      m.vertexAttribPointer(p, 2, m.FLOAT, !1, 16, 0);
      m.vertexAttribPointer(q, 2, m.FLOAT, !1, 16, 8);
      m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, s);
      m.disable(m.CULL_FACE);
      m.depthMask(!1);
      K = 0;
      for (L = b.length; K < L; K++)
        if (D = 16 / z, A.set(D * G, D), N = b[K], C.set(N.matrixWorld.elements[12], N.matrixWorld.elements[13], N.matrixWorld.elements[14]), C.applyMatrix4(x.matrixWorldInverse), C.applyProjection(x.projectionMatrix), U.copy(C), M.x = U.x * E + E, M.y = U.y * w + w, u || 0 < M.x && M.x < F && 0 < M.y && M.y < z) {
          m.activeTexture(m.TEXTURE1);
          m.bindTexture(m.TEXTURE_2D, v);
          m.copyTexImage2D(m.TEXTURE_2D, 0, m.RGB, M.x - 8, M.y - 8, 16, 16, 0);
          m.uniform1i(c, 0);
          m.uniform2f(h, A.x, A.y);
          m.uniform3f(n, U.x, U.y, U.z);
          m.disable(m.BLEND);
          m.enable(m.DEPTH_TEST);
          m.drawElements(m.TRIANGLES, 6, m.UNSIGNED_SHORT, 0);
          m.activeTexture(m.TEXTURE0);
          m.bindTexture(m.TEXTURE_2D, y);
          m.copyTexImage2D(m.TEXTURE_2D, 0, m.RGBA, M.x - 8, M.y - 8, 16, 16, 0);
          m.uniform1i(c, 1);
          m.disable(m.DEPTH_TEST);
          m.activeTexture(m.TEXTURE1);
          m.bindTexture(m.TEXTURE_2D, v);
          m.drawElements(m.TRIANGLES, 6, m.UNSIGNED_SHORT, 0);
          N.positionScreen.copy(U);
          N.customUpdateCallback ? N.customUpdateCallback(N) : N.updateLensFlares();
          m.uniform1i(c, 2);
          m.enable(m.BLEND);
          for (var T = 0,
              Q = N.lensFlares.length; T < Q; T++) {
            var W = N.lensFlares[T];
            .001 < W.opacity && .001 < W.scale && (U.x = W.x, U.y = W.y, U.z = W.z, D = W.size * W.scale / z, A.x = D * G, A.y = D, m.uniform3f(n, U.x, U.y, U.z), m.uniform2f(h, A.x, A.y), m.uniform1f(k, W.rotation), m.uniform1f(f, W.opacity), m.uniform3f(g, W.color.r, W.color.g, W.color.b), a.setBlending(W.blending, W.blendEquation, W.blendSrc, W.blendDst), a.setTexture(W.texture, 1), m.drawElements(m.TRIANGLES, 6, m.UNSIGNED_SHORT, 0));
          }
        }
      m.enable(m.CULL_FACE);
      m.enable(m.DEPTH_TEST);
      m.depthMask(!0);
      a.resetGLState();
    }
  };
};
THREE.ShadowMapPlugin = function(a, b, c, d) {
  function e(a, b, d) {
    if (b.visible) {
      var g = c[b.id];
      if (g && b.castShadow && (!1 === b.frustumCulled || !0 === p.intersectsObject(b)))
        for (var f = 0,
            h = g.length; f < h; f++) {
          var k = g[f];
          b._modelViewMatrix.multiplyMatrices(d.matrixWorldInverse, b.matrixWorld);
          r.push(k);
        }
      f = 0;
      for (h = b.children.length; f < h; f++)
        e(a, b.children[f], d);
    }
  }
  var f = a.context,
      g,
      h,
      k,
      n,
      p = new THREE.Frustum,
      q = new THREE.Matrix4,
      m = new THREE.Vector3,
      t = new THREE.Vector3,
      s = new THREE.Vector3,
      r = [],
      u = THREE.ShaderLib.depthRGBA,
      v = THREE.UniformsUtils.clone(u.uniforms);
  g = new THREE.ShaderMaterial({
    uniforms: v,
    vertexShader: u.vertexShader,
    fragmentShader: u.fragmentShader
  });
  h = new THREE.ShaderMaterial({
    uniforms: v,
    vertexShader: u.vertexShader,
    fragmentShader: u.fragmentShader,
    morphTargets: !0
  });
  k = new THREE.ShaderMaterial({
    uniforms: v,
    vertexShader: u.vertexShader,
    fragmentShader: u.fragmentShader,
    skinning: !0
  });
  n = new THREE.ShaderMaterial({
    uniforms: v,
    vertexShader: u.vertexShader,
    fragmentShader: u.fragmentShader,
    morphTargets: !0,
    skinning: !0
  });
  g._shadowPass = !0;
  h._shadowPass = !0;
  k._shadowPass = !0;
  n._shadowPass = !0;
  this.render = function(c, v) {
    if (!1 !== a.shadowMapEnabled) {
      var u,
          F,
          z,
          G,
          E,
          w,
          D,
          A,
          U = [];
      G = 0;
      f.clearColor(1, 1, 1, 1);
      f.disable(f.BLEND);
      f.enable(f.CULL_FACE);
      f.frontFace(f.CCW);
      a.shadowMapCullFace === THREE.CullFaceFront ? f.cullFace(f.FRONT) : f.cullFace(f.BACK);
      a.setDepthTest(!0);
      u = 0;
      for (F = b.length; u < F; u++)
        if (z = b[u], z.castShadow)
          if (z instanceof THREE.DirectionalLight && z.shadowCascade)
            for (E = 0; E < z.shadowCascadeCount; E++) {
              var M;
              if (z.shadowCascadeArray[E])
                M = z.shadowCascadeArray[E];
              else {
                D = z;
                var K = E;
                M = new THREE.DirectionalLight;
                M.isVirtual = !0;
                M.onlyShadow = !0;
                M.castShadow = !0;
                M.shadowCameraNear = D.shadowCameraNear;
                M.shadowCameraFar = D.shadowCameraFar;
                M.shadowCameraLeft = D.shadowCameraLeft;
                M.shadowCameraRight = D.shadowCameraRight;
                M.shadowCameraBottom = D.shadowCameraBottom;
                M.shadowCameraTop = D.shadowCameraTop;
                M.shadowCameraVisible = D.shadowCameraVisible;
                M.shadowDarkness = D.shadowDarkness;
                M.shadowBias = D.shadowCascadeBias[K];
                M.shadowMapWidth = D.shadowCascadeWidth[K];
                M.shadowMapHeight = D.shadowCascadeHeight[K];
                M.pointsWorld = [];
                M.pointsFrustum = [];
                A = M.pointsWorld;
                w = M.pointsFrustum;
                for (var L = 0; 8 > L; L++)
                  A[L] = new THREE.Vector3, w[L] = new THREE.Vector3;
                A = D.shadowCascadeNearZ[K];
                D = D.shadowCascadeFarZ[K];
                w[0].set(-1, -1, A);
                w[1].set(1, -1, A);
                w[2].set(-1, 1, A);
                w[3].set(1, 1, A);
                w[4].set(-1, -1, D);
                w[5].set(1, -1, D);
                w[6].set(-1, 1, D);
                w[7].set(1, 1, D);
                M.originalCamera = v;
                w = new THREE.Gyroscope;
                w.position.copy(z.shadowCascadeOffset);
                w.add(M);
                w.add(M.target);
                v.add(w);
                z.shadowCascadeArray[E] = M;
                console.log("Created virtualLight", M);
              }
              K = z;
              A = E;
              D = K.shadowCascadeArray[A];
              D.position.copy(K.position);
              D.target.position.copy(K.target.position);
              D.lookAt(D.target);
              D.shadowCameraVisible = K.shadowCameraVisible;
              D.shadowDarkness = K.shadowDarkness;
              D.shadowBias = K.shadowCascadeBias[A];
              w = K.shadowCascadeNearZ[A];
              K = K.shadowCascadeFarZ[A];
              D = D.pointsFrustum;
              D[0].z = w;
              D[1].z = w;
              D[2].z = w;
              D[3].z = w;
              D[4].z = K;
              D[5].z = K;
              D[6].z = K;
              D[7].z = K;
              U[G] = M;
              G++;
            }
          else
            U[G] = z, G++;
      u = 0;
      for (F = U.length; u < F; u++) {
        z = U[u];
        z.shadowMap || (E = THREE.LinearFilter, a.shadowMapType === THREE.PCFSoftShadowMap && (E = THREE.NearestFilter), z.shadowMap = new THREE.WebGLRenderTarget(z.shadowMapWidth, z.shadowMapHeight, {
          minFilter: E,
          magFilter: E,
          format: THREE.RGBAFormat
        }), z.shadowMapSize = new THREE.Vector2(z.shadowMapWidth, z.shadowMapHeight), z.shadowMatrix = new THREE.Matrix4);
        if (!z.shadowCamera) {
          if (z instanceof THREE.SpotLight)
            z.shadowCamera = new THREE.PerspectiveCamera(z.shadowCameraFov, z.shadowMapWidth / z.shadowMapHeight, z.shadowCameraNear, z.shadowCameraFar);
          else if (z instanceof THREE.DirectionalLight)
            z.shadowCamera = new THREE.OrthographicCamera(z.shadowCameraLeft, z.shadowCameraRight, z.shadowCameraTop, z.shadowCameraBottom, z.shadowCameraNear, z.shadowCameraFar);
          else {
            console.error("Unsupported light type for shadow");
            continue;
          }
          c.add(z.shadowCamera);
          !0 === c.autoUpdate && c.updateMatrixWorld();
        }
        z.shadowCameraVisible && !z.cameraHelper && (z.cameraHelper = new THREE.CameraHelper(z.shadowCamera), c.add(z.cameraHelper));
        if (z.isVirtual && M.originalCamera == v) {
          E = v;
          G = z.shadowCamera;
          w = z.pointsFrustum;
          D = z.pointsWorld;
          m.set(Infinity, Infinity, Infinity);
          t.set(-Infinity, -Infinity, -Infinity);
          for (K = 0; 8 > K; K++)
            A = D[K], A.copy(w[K]), A.unproject(E), A.applyMatrix4(G.matrixWorldInverse), A.x < m.x && (m.x = A.x), A.x > t.x && (t.x = A.x), A.y < m.y && (m.y = A.y), A.y > t.y && (t.y = A.y), A.z < m.z && (m.z = A.z), A.z > t.z && (t.z = A.z);
          G.left = m.x;
          G.right = t.x;
          G.top = t.y;
          G.bottom = m.y;
          G.updateProjectionMatrix();
        }
        G = z.shadowMap;
        w = z.shadowMatrix;
        E = z.shadowCamera;
        E.position.setFromMatrixPosition(z.matrixWorld);
        s.setFromMatrixPosition(z.target.matrixWorld);
        E.lookAt(s);
        E.updateMatrixWorld();
        E.matrixWorldInverse.getInverse(E.matrixWorld);
        z.cameraHelper && (z.cameraHelper.visible = z.shadowCameraVisible);
        z.shadowCameraVisible && z.cameraHelper.update();
        w.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1);
        w.multiply(E.projectionMatrix);
        w.multiply(E.matrixWorldInverse);
        q.multiplyMatrices(E.projectionMatrix, E.matrixWorldInverse);
        p.setFromMatrix(q);
        a.setRenderTarget(G);
        a.clear();
        r.length = 0;
        e(c, c, E);
        z = 0;
        for (G = r.length; z < G; z++)
          D = r[z], w = D.object, D = D.buffer, K = w.material instanceof THREE.MeshFaceMaterial ? w.material.materials[0] : w.material, A = void 0 !== w.geometry.morphTargets && 0 < w.geometry.morphTargets.length && K.morphTargets, L = w instanceof THREE.SkinnedMesh && K.skinning, A = w.customDepthMaterial ? w.customDepthMaterial : L ? A ? n : k : A ? h : g, a.setMaterialFaces(K), D instanceof THREE.BufferGeometry ? a.renderBufferDirect(E, b, null, A, D, w) : a.renderBuffer(E, b, null, A, D, w);
        z = 0;
        for (G = d.length; z < G; z++)
          D = d[z], w = D.object, w.visible && w.castShadow && (w._modelViewMatrix.multiplyMatrices(E.matrixWorldInverse, w.matrixWorld), a.renderImmediateObject(E, b, null, g, w));
      }
      u = a.getClearColor();
      F = a.getClearAlpha();
      f.clearColor(u.r, u.g, u.b, F);
      f.enable(f.BLEND);
      a.shadowMapCullFace === THREE.CullFaceFront && f.cullFace(f.BACK);
      a.resetGLState();
    }
  };
};
THREE.SpritePlugin = function(a, b) {
  var c,
      d,
      e,
      f,
      g,
      h,
      k,
      n,
      p,
      q,
      m,
      t,
      s,
      r,
      u,
      v,
      y;
  function C(a, b) {
    return a.z !== b.z ? b.z - a.z : b.id - a.id;
  }
  var x = a.context,
      F,
      z,
      G,
      E,
      w = new THREE.Vector3,
      D = new THREE.Quaternion,
      A = new THREE.Vector3;
  this.render = function(U, M) {
    if (0 !== b.length) {
      if (void 0 === G) {
        var K = new Float32Array([-.5, -.5, 0, 0, .5, -.5, 1, 0, .5, .5, 1, 1, -.5, .5, 0, 1]),
            L = new Uint16Array([0, 1, 2, 0, 2, 3]);
        F = x.createBuffer();
        z = x.createBuffer();
        x.bindBuffer(x.ARRAY_BUFFER, F);
        x.bufferData(x.ARRAY_BUFFER, K, x.STATIC_DRAW);
        x.bindBuffer(x.ELEMENT_ARRAY_BUFFER, z);
        x.bufferData(x.ELEMENT_ARRAY_BUFFER, L, x.STATIC_DRAW);
        var K = x.createProgram(),
            L = x.createShader(x.VERTEX_SHADER),
            N = x.createShader(x.FRAGMENT_SHADER);
        x.shaderSource(L, ["precision " + a.getPrecision() + " float;", "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
        x.shaderSource(N, ["precision " + a.getPrecision() + " float;", "uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
        x.compileShader(L);
        x.compileShader(N);
        x.attachShader(K, L);
        x.attachShader(K, N);
        x.linkProgram(K);
        G = K;
        v = x.getAttribLocation(G, "position");
        y = x.getAttribLocation(G, "uv");
        c = x.getUniformLocation(G, "uvOffset");
        d = x.getUniformLocation(G, "uvScale");
        e = x.getUniformLocation(G, "rotation");
        f = x.getUniformLocation(G, "scale");
        g = x.getUniformLocation(G, "color");
        h = x.getUniformLocation(G, "map");
        k = x.getUniformLocation(G, "opacity");
        n = x.getUniformLocation(G, "modelViewMatrix");
        p = x.getUniformLocation(G, "projectionMatrix");
        q = x.getUniformLocation(G, "fogType");
        m = x.getUniformLocation(G, "fogDensity");
        t = x.getUniformLocation(G, "fogNear");
        s = x.getUniformLocation(G, "fogFar");
        r = x.getUniformLocation(G, "fogColor");
        u = x.getUniformLocation(G, "alphaTest");
        K = document.createElement("canvas");
        K.width = 8;
        K.height = 8;
        L = K.getContext("2d");
        L.fillStyle = "white";
        L.fillRect(0, 0, 8, 8);
        E = new THREE.Texture(K);
        E.needsUpdate = !0;
      }
      x.useProgram(G);
      x.enableVertexAttribArray(v);
      x.enableVertexAttribArray(y);
      x.disable(x.CULL_FACE);
      x.enable(x.BLEND);
      x.bindBuffer(x.ARRAY_BUFFER, F);
      x.vertexAttribPointer(v, 2, x.FLOAT, !1, 16, 0);
      x.vertexAttribPointer(y, 2, x.FLOAT, !1, 16, 8);
      x.bindBuffer(x.ELEMENT_ARRAY_BUFFER, z);
      x.uniformMatrix4fv(p, !1, M.projectionMatrix.elements);
      x.activeTexture(x.TEXTURE0);
      x.uniform1i(h, 0);
      L = K = 0;
      (N = U.fog) ? (x.uniform3f(r, N.color.r, N.color.g, N.color.b), N instanceof THREE.Fog ? (x.uniform1f(t, N.near), x.uniform1f(s, N.far), x.uniform1i(q, 1), L = K = 1) : N instanceof THREE.FogExp2 && (x.uniform1f(m, N.density), x.uniform1i(q, 2), L = K = 2)) : (x.uniform1i(q, 0), L = K = 0);
      for (var N = 0,
          T = b.length; N < T; N++) {
        var Q = b[N];
        Q._modelViewMatrix.multiplyMatrices(M.matrixWorldInverse, Q.matrixWorld);
        Q.z = -Q._modelViewMatrix.elements[14];
      }
      b.sort(C);
      for (var W = [],
          N = 0,
          T = b.length; N < T; N++) {
        var Q = b[N],
            O = Q.material;
        x.uniform1f(u, O.alphaTest);
        x.uniformMatrix4fv(n, !1, Q._modelViewMatrix.elements);
        Q.matrixWorld.decompose(w, D, A);
        W[0] = A.x;
        W[1] = A.y;
        Q = 0;
        U.fog && O.fog && (Q = L);
        K !== Q && (x.uniform1i(q, Q), K = Q);
        null !== O.map ? (x.uniform2f(c, O.map.offset.x, O.map.offset.y), x.uniform2f(d, O.map.repeat.x, O.map.repeat.y)) : (x.uniform2f(c, 0, 0), x.uniform2f(d, 1, 1));
        x.uniform1f(k, O.opacity);
        x.uniform3f(g, O.color.r, O.color.g, O.color.b);
        x.uniform1f(e, O.rotation);
        x.uniform2fv(f, W);
        a.setBlending(O.blending, O.blendEquation, O.blendSrc, O.blendDst);
        a.setDepthTest(O.depthTest);
        a.setDepthWrite(O.depthWrite);
        O.map && O.map.image && O.map.image.width ? a.setTexture(O.map, 0) : a.setTexture(E, 0);
        x.drawElements(x.TRIANGLES, 6, x.UNSIGNED_SHORT, 0);
      }
      x.enable(x.CULL_FACE);
      a.resetGLState();
    }
  };
};
THREE.GeometryUtils = {
  merge: function(a, b, c) {
    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    var d;
    b instanceof THREE.Mesh && (b.matrixAutoUpdate && b.updateMatrix(), d = b.matrix, b = b.geometry);
    a.merge(b, d, c);
  },
  center: function(a) {
    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
    return a.center();
  }
};
THREE.ImageUtils = {
  crossOrigin: void 0,
  loadTexture: function(a, b, c, d) {
    var e = new THREE.ImageLoader;
    e.crossOrigin = this.crossOrigin;
    var f = new THREE.Texture(void 0, b);
    e.load(a, function(a) {
      f.image = a;
      f.needsUpdate = !0;
      c && c(f);
    }, void 0, function(a) {
      d && d(a);
    });
    f.sourceFile = a;
    return f;
  },
  loadTextureCube: function(a, b, c, d) {
    var e = new THREE.ImageLoader;
    e.crossOrigin = this.crossOrigin;
    var f = new THREE.CubeTexture([], b);
    f.flipY = !1;
    var g = 0;
    b = function(b) {
      e.load(a[b], function(a) {
        f.images[b] = a;
        g += 1;
        6 === g && (f.needsUpdate = !0, c && c(f));
      }, void 0, d);
    };
    for (var h = 0,
        k = a.length; h < k; ++h)
      b(h);
    return f;
  },
  loadCompressedTexture: function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
  },
  loadCompressedTextureCube: function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
  },
  getNormalMap: function(a, b) {
    var c = function(a) {
      var b = Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
      return [a[0] / b, a[1] / b, a[2] / b];
    };
    b |= 1;
    var d = a.width,
        e = a.height,
        f = document.createElement("canvas");
    f.width = d;
    f.height = e;
    var g = f.getContext("2d");
    g.drawImage(a, 0, 0);
    for (var h = g.getImageData(0, 0, d, e).data,
        k = g.createImageData(d, e),
        n = k.data,
        p = 0; p < d; p++)
      for (var q = 0; q < e; q++) {
        var m = 0 > q - 1 ? 0 : q - 1,
            t = q + 1 > e - 1 ? e - 1 : q + 1,
            s = 0 > p - 1 ? 0 : p - 1,
            r = p + 1 > d - 1 ? d - 1 : p + 1,
            u = [],
            v = [0, 0, h[4 * (q * d + p)] / 255 * b];
        u.push([-1, 0, h[4 * (q * d + s)] / 255 * b]);
        u.push([-1, -1, h[4 * (m * d + s)] / 255 * b]);
        u.push([0, -1, h[4 * (m * d + p)] / 255 * b]);
        u.push([1, -1, h[4 * (m * d + r)] / 255 * b]);
        u.push([1, 0, h[4 * (q * d + r)] / 255 * b]);
        u.push([1, 1, h[4 * (t * d + r)] / 255 * b]);
        u.push([0, 1, h[4 * (t * d + p)] / 255 * b]);
        u.push([-1, 1, h[4 * (t * d + s)] / 255 * b]);
        m = [];
        s = u.length;
        for (t = 0; t < s; t++) {
          var r = u[t],
              y = u[(t + 1) % s],
              r = [r[0] - v[0], r[1] - v[1], r[2] - v[2]],
              y = [y[0] - v[0], y[1] - v[1], y[2] - v[2]];
          m.push(c([r[1] * y[2] - r[2] * y[1], r[2] * y[0] - r[0] * y[2], r[0] * y[1] - r[1] * y[0]]));
        }
        u = [0, 0, 0];
        for (t = 0; t < m.length; t++)
          u[0] += m[t][0], u[1] += m[t][1], u[2] += m[t][2];
        u[0] /= m.length;
        u[1] /= m.length;
        u[2] /= m.length;
        v = 4 * (q * d + p);
        n[v] = (u[0] + 1) / 2 * 255 | 0;
        n[v + 1] = (u[1] + 1) / 2 * 255 | 0;
        n[v + 2] = 255 * u[2] | 0;
        n[v + 3] = 255;
      }
    g.putImageData(k, 0, 0);
    return f;
  },
  generateDataTexture: function(a, b, c) {
    var d = a * b,
        e = new Uint8Array(3 * d),
        f = Math.floor(255 * c.r),
        g = Math.floor(255 * c.g);
    c = Math.floor(255 * c.b);
    for (var h = 0; h < d; h++)
      e[3 * h] = f, e[3 * h + 1] = g, e[3 * h + 2] = c;
    a = new THREE.DataTexture(e, a, b, THREE.RGBFormat);
    a.needsUpdate = !0;
    return a;
  }
};
THREE.SceneUtils = {
  createMultiMaterialObject: function(a, b) {
    for (var c = new THREE.Object3D,
        d = 0,
        e = b.length; d < e; d++)
      c.add(new THREE.Mesh(a, b[d]));
    return c;
  },
  detach: function(a, b, c) {
    a.applyMatrix(b.matrixWorld);
    b.remove(a);
    c.add(a);
  },
  attach: function(a, b, c) {
    var d = new THREE.Matrix4;
    d.getInverse(c.matrixWorld);
    a.applyMatrix(d);
    b.remove(a);
    c.add(a);
  }
};
THREE.FontUtils = {
  faces: {},
  face: "helvetiker",
  weight: "normal",
  style: "normal",
  size: 150,
  divisions: 10,
  getFace: function() {
    try {
      return this.faces[this.face][this.weight][this.style];
    } catch (a) {
      throw "The font " + this.face + " with " + this.weight + " weight and " + this.style + " style is missing.";
    }
  },
  loadFace: function(a) {
    var b = a.familyName.toLowerCase();
    this.faces[b] = this.faces[b] || {};
    this.faces[b][a.cssFontWeight] = this.faces[b][a.cssFontWeight] || {};
    this.faces[b][a.cssFontWeight][a.cssFontStyle] = a;
    return this.faces[b][a.cssFontWeight][a.cssFontStyle] = a;
  },
  drawText: function(a) {
    var b = this.getFace(),
        c = this.size / b.resolution,
        d = 0,
        e = String(a).split(""),
        f = e.length,
        g = [];
    for (a = 0; a < f; a++) {
      var h = new THREE.Path,
          h = this.extractGlyphPoints(e[a], b, c, d, h),
          d = d + h.offset;
      g.push(h.path);
    }
    return {
      paths: g,
      offset: d / 2
    };
  },
  extractGlyphPoints: function(a, b, c, d, e) {
    var f = [],
        g,
        h,
        k,
        n,
        p,
        q,
        m,
        t,
        s,
        r,
        u,
        v = b.glyphs[a] || b.glyphs["?"];
    if (v) {
      if (v.o)
        for (b = v._cachedOutline || (v._cachedOutline = v.o.split(" ")), n = b.length, a = 0; a < n; )
          switch (k = b[a++], k) {
            case "m":
              k = b[a++] * c + d;
              p = b[a++] * c;
              e.moveTo(k, p);
              break;
            case "l":
              k = b[a++] * c + d;
              p = b[a++] * c;
              e.lineTo(k, p);
              break;
            case "q":
              k = b[a++] * c + d;
              p = b[a++] * c;
              t = b[a++] * c + d;
              s = b[a++] * c;
              e.quadraticCurveTo(t, s, k, p);
              if (g = f[f.length - 1])
                for (q = g.x, m = g.y, g = 1, h = this.divisions; g <= h; g++) {
                  var y = g / h;
                  THREE.Shape.Utils.b2(y, q, t, k);
                  THREE.Shape.Utils.b2(y, m, s, p);
                }
              break;
            case "b":
              if (k = b[a++] * c + d, p = b[a++] * c, t = b[a++] * c + d, s = b[a++] * c, r = b[a++] * c + d, u = b[a++] * c, e.bezierCurveTo(t, s, r, u, k, p), g = f[f.length - 1])
                for (q = g.x, m = g.y, g = 1, h = this.divisions; g <= h; g++)
                  y = g / h, THREE.Shape.Utils.b3(y, q, t, r, k), THREE.Shape.Utils.b3(y, m, s, u, p);
          }
      return {
        offset: v.ha * c,
        path: e
      };
    }
  }
};
THREE.FontUtils.generateShapes = function(a, b) {
  b = b || {};
  var c = void 0 !== b.curveSegments ? b.curveSegments : 4,
      d = void 0 !== b.font ? b.font : "helvetiker",
      e = void 0 !== b.weight ? b.weight : "normal",
      f = void 0 !== b.style ? b.style : "normal";
  THREE.FontUtils.size = void 0 !== b.size ? b.size : 100;
  THREE.FontUtils.divisions = c;
  THREE.FontUtils.face = d;
  THREE.FontUtils.weight = e;
  THREE.FontUtils.style = f;
  c = THREE.FontUtils.drawText(a).paths;
  d = [];
  e = 0;
  for (f = c.length; e < f; e++)
    Array.prototype.push.apply(d, c[e].toShapes());
  return d;
};
(function(a) {
  var b = function(a) {
    for (var b = a.length,
        e = 0,
        f = b - 1,
        g = 0; g < b; f = g++)
      e += a[f].x * a[g].y - a[g].x * a[f].y;
    return .5 * e;
  };
  a.Triangulate = function(a, d) {
    var e = a.length;
    if (3 > e)
      return null;
    var f = [],
        g = [],
        h = [],
        k,
        n,
        p;
    if (0 < b(a))
      for (n = 0; n < e; n++)
        g[n] = n;
    else
      for (n = 0; n < e; n++)
        g[n] = e - 1 - n;
    var q = 2 * e;
    for (n = e - 1; 2 < e; ) {
      if (0 >= q--) {
        console.log("Warning, unable to triangulate polygon!");
        break;
      }
      k = n;
      e <= k && (k = 0);
      n = k + 1;
      e <= n && (n = 0);
      p = n + 1;
      e <= p && (p = 0);
      var m;
      a: {
        var t = m = void 0,
            s = void 0,
            r = void 0,
            u = void 0,
            v = void 0,
            y = void 0,
            C = void 0,
            x = void 0,
            t = a[g[k]].x,
            s = a[g[k]].y,
            r = a[g[n]].x,
            u = a[g[n]].y,
            v = a[g[p]].x,
            y = a[g[p]].y;
        if (1E-10 > (r - t) * (y - s) - (u - s) * (v - t))
          m = !1;
        else {
          var F = void 0,
              z = void 0,
              G = void 0,
              E = void 0,
              w = void 0,
              D = void 0,
              A = void 0,
              U = void 0,
              M = void 0,
              K = void 0,
              M = U = A = x = C = void 0,
              F = v - r,
              z = y - u,
              G = t - v,
              E = s - y,
              w = r - t,
              D = u - s;
          for (m = 0; m < e; m++)
            if (C = a[g[m]].x, x = a[g[m]].y, !(C === t && x === s || C === r && x === u || C === v && x === y) && (A = C - t, U = x - s, M = C - r, K = x - u, C -= v, x -= y, M = F * K - z * M, A = w * U - D * A, U = G * x - E * C, -1E-10 <= M && -1E-10 <= U && -1E-10 <= A)) {
              m = !1;
              break a;
            }
          m = !0;
        }
      }
      if (m) {
        f.push([a[g[k]], a[g[n]], a[g[p]]]);
        h.push([g[k], g[n], g[p]]);
        k = n;
        for (p = n + 1; p < e; k++, p++)
          g[k] = g[p];
        e--;
        q = 2 * e;
      }
    }
    return d ? h : f;
  };
  a.Triangulate.area = b;
  return a;
})(THREE.FontUtils);
self._typeface_js = {
  faces: THREE.FontUtils.faces,
  loadFace: THREE.FontUtils.loadFace
};
THREE.typeface_js = self._typeface_js;
THREE.Audio = function(a) {
  THREE.Object3D.call(this);
  this.type = "Audio";
  this.context = a.context;
  this.source = this.context.createBufferSource();
  this.gain = this.context.createGain();
  this.gain.connect(this.context.destination);
  this.panner = this.context.createPanner();
  this.panner.connect(this.gain);
};
THREE.Audio.prototype = Object.create(THREE.Object3D.prototype);
THREE.Audio.prototype.constructor = THREE.Audio;
THREE.Audio.prototype.load = function(a) {
  var b = this,
      c = new XMLHttpRequest;
  c.open("GET", a, !0);
  c.responseType = "arraybuffer";
  c.onload = function(a) {
    b.context.decodeAudioData(this.response, function(a) {
      b.source.buffer = a;
      b.source.connect(b.panner);
      b.source.start(0);
    });
  };
  c.send();
  return this;
};
THREE.Audio.prototype.setLoop = function(a) {
  this.source.loop = a;
};
THREE.Audio.prototype.setRefDistance = function(a) {
  this.panner.refDistance = a;
};
THREE.Audio.prototype.setRolloffFactor = function(a) {
  this.panner.rolloffFactor = a;
};
THREE.Audio.prototype.updateMatrixWorld = function() {
  var a = new THREE.Vector3;
  return function(b) {
    THREE.Object3D.prototype.updateMatrixWorld.call(this, b);
    a.setFromMatrixPosition(this.matrixWorld);
    this.panner.setPosition(a.x, a.y, a.z);
  };
}();
THREE.AudioListener = function() {
  THREE.Object3D.call(this);
  this.type = "AudioListener";
  this.context = new (window.AudioContext || window.webkitAudioContext);
};
THREE.AudioListener.prototype = Object.create(THREE.Object3D.prototype);
THREE.AudioListener.prototype.constructor = THREE.AudioListener;
THREE.AudioListener.prototype.updateMatrixWorld = function() {
  var a = new THREE.Vector3,
      b = new THREE.Quaternion,
      c = new THREE.Vector3,
      d = new THREE.Vector3,
      e = new THREE.Vector3,
      f = new THREE.Vector3;
  return function(g) {
    THREE.Object3D.prototype.updateMatrixWorld.call(this, g);
    g = this.context.listener;
    var h = this.up;
    this.matrixWorld.decompose(a, b, c);
    d.set(0, 0, -1).applyQuaternion(b);
    e.subVectors(a, f);
    g.setPosition(a.x, a.y, a.z);
    g.setOrientation(d.x, d.y, d.z, h.x, h.y, h.z);
    g.setVelocity(e.x, e.y, e.z);
    f.copy(a);
  };
}();
THREE.Curve = function() {};
THREE.Curve.prototype.getPoint = function(a) {
  console.log("Warning, getPoint() not implemented!");
  return null;
};
THREE.Curve.prototype.getPointAt = function(a) {
  a = this.getUtoTmapping(a);
  return this.getPoint(a);
};
THREE.Curve.prototype.getPoints = function(a) {
  a || (a = 5);
  var b,
      c = [];
  for (b = 0; b <= a; b++)
    c.push(this.getPoint(b / a));
  return c;
};
THREE.Curve.prototype.getSpacedPoints = function(a) {
  a || (a = 5);
  var b,
      c = [];
  for (b = 0; b <= a; b++)
    c.push(this.getPointAt(b / a));
  return c;
};
THREE.Curve.prototype.getLength = function() {
  var a = this.getLengths();
  return a[a.length - 1];
};
THREE.Curve.prototype.getLengths = function(a) {
  a || (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
  if (this.cacheArcLengths && this.cacheArcLengths.length == a + 1 && !this.needsUpdate)
    return this.cacheArcLengths;
  this.needsUpdate = !1;
  var b = [],
      c,
      d = this.getPoint(0),
      e,
      f = 0;
  b.push(0);
  for (e = 1; e <= a; e++)
    c = this.getPoint(e / a), f += c.distanceTo(d), b.push(f), d = c;
  return this.cacheArcLengths = b;
};
THREE.Curve.prototype.updateArcLengths = function() {
  this.needsUpdate = !0;
  this.getLengths();
};
THREE.Curve.prototype.getUtoTmapping = function(a, b) {
  var c = this.getLengths(),
      d = 0,
      e = c.length,
      f;
  f = b ? b : a * c[e - 1];
  for (var g = 0,
      h = e - 1,
      k; g <= h; )
    if (d = Math.floor(g + (h - g) / 2), k = c[d] - f, 0 > k)
      g = d + 1;
    else if (0 < k)
      h = d - 1;
    else {
      h = d;
      break;
    }
  d = h;
  if (c[d] == f)
    return d / (e - 1);
  g = c[d];
  return c = (d + (f - g) / (c[d + 1] - g)) / (e - 1);
};
THREE.Curve.prototype.getTangent = function(a) {
  var b = a - 1E-4;
  a += 1E-4;
  0 > b && (b = 0);
  1 < a && (a = 1);
  b = this.getPoint(b);
  return this.getPoint(a).clone().sub(b).normalize();
};
THREE.Curve.prototype.getTangentAt = function(a) {
  a = this.getUtoTmapping(a);
  return this.getTangent(a);
};
THREE.Curve.Utils = {
  tangentQuadraticBezier: function(a, b, c, d) {
    return 2 * (1 - a) * (c - b) + 2 * a * (d - c);
  },
  tangentCubicBezier: function(a, b, c, d, e) {
    return -3 * b * (1 - a) * (1 - a) + 3 * c * (1 - a) * (1 - a) - 6 * a * c * (1 - a) + 6 * a * d * (1 - a) - 3 * a * a * d + 3 * a * a * e;
  },
  tangentSpline: function(a, b, c, d, e) {
    return 6 * a * a - 6 * a + (3 * a * a - 4 * a + 1) + (-6 * a * a + 6 * a) + (3 * a * a - 2 * a);
  },
  interpolate: function(a, b, c, d, e) {
    a = .5 * (c - a);
    d = .5 * (d - b);
    var f = e * e;
    return (2 * b - 2 * c + a + d) * e * f + (-3 * b + 3 * c - 2 * a - d) * f + a * e + b;
  }
};
THREE.Curve.create = function(a, b) {
  a.prototype = Object.create(THREE.Curve.prototype);
  a.prototype.constructor = a;
  a.prototype.getPoint = b;
  return a;
};
THREE.CurvePath = function() {
  this.curves = [];
  this.bends = [];
  this.autoClose = !1;
};
THREE.CurvePath.prototype = Object.create(THREE.Curve.prototype);
THREE.CurvePath.prototype.constructor = THREE.CurvePath;
THREE.CurvePath.prototype.add = function(a) {
  this.curves.push(a);
};
THREE.CurvePath.prototype.checkConnection = function() {};
THREE.CurvePath.prototype.closePath = function() {
  var a = this.curves[0].getPoint(0),
      b = this.curves[this.curves.length - 1].getPoint(1);
  a.equals(b) || this.curves.push(new THREE.LineCurve(b, a));
};
THREE.CurvePath.prototype.getPoint = function(a) {
  var b = a * this.getLength(),
      c = this.getCurveLengths();
  for (a = 0; a < c.length; ) {
    if (c[a] >= b)
      return b = c[a] - b, a = this.curves[a], b = 1 - b / a.getLength(), a.getPointAt(b);
    a++;
  }
  return null;
};
THREE.CurvePath.prototype.getLength = function() {
  var a = this.getCurveLengths();
  return a[a.length - 1];
};
THREE.CurvePath.prototype.getCurveLengths = function() {
  if (this.cacheLengths && this.cacheLengths.length == this.curves.length)
    return this.cacheLengths;
  var a = [],
      b = 0,
      c,
      d = this.curves.length;
  for (c = 0; c < d; c++)
    b += this.curves[c].getLength(), a.push(b);
  return this.cacheLengths = a;
};
THREE.CurvePath.prototype.getBoundingBox = function() {
  var a = this.getPoints(),
      b,
      c,
      d,
      e,
      f,
      g;
  b = c = Number.NEGATIVE_INFINITY;
  e = f = Number.POSITIVE_INFINITY;
  var h,
      k,
      n,
      p,
      q = a[0] instanceof THREE.Vector3;
  p = q ? new THREE.Vector3 : new THREE.Vector2;
  k = 0;
  for (n = a.length; k < n; k++)
    h = a[k], h.x > b ? b = h.x : h.x < e && (e = h.x), h.y > c ? c = h.y : h.y < f && (f = h.y), q && (h.z > d ? d = h.z : h.z < g && (g = h.z)), p.add(h);
  a = {
    minX: e,
    minY: f,
    maxX: b,
    maxY: c
  };
  q && (a.maxZ = d, a.minZ = g);
  return a;
};
THREE.CurvePath.prototype.createPointsGeometry = function(a) {
  a = this.getPoints(a, !0);
  return this.createGeometry(a);
};
THREE.CurvePath.prototype.createSpacedPointsGeometry = function(a) {
  a = this.getSpacedPoints(a, !0);
  return this.createGeometry(a);
};
THREE.CurvePath.prototype.createGeometry = function(a) {
  for (var b = new THREE.Geometry,
      c = 0; c < a.length; c++)
    b.vertices.push(new THREE.Vector3(a[c].x, a[c].y, a[c].z || 0));
  return b;
};
THREE.CurvePath.prototype.addWrapPath = function(a) {
  this.bends.push(a);
};
THREE.CurvePath.prototype.getTransformedPoints = function(a, b) {
  var c = this.getPoints(a),
      d,
      e;
  b || (b = this.bends);
  d = 0;
  for (e = b.length; d < e; d++)
    c = this.getWrapPoints(c, b[d]);
  return c;
};
THREE.CurvePath.prototype.getTransformedSpacedPoints = function(a, b) {
  var c = this.getSpacedPoints(a),
      d,
      e;
  b || (b = this.bends);
  d = 0;
  for (e = b.length; d < e; d++)
    c = this.getWrapPoints(c, b[d]);
  return c;
};
THREE.CurvePath.prototype.getWrapPoints = function(a, b) {
  var c = this.getBoundingBox(),
      d,
      e,
      f,
      g,
      h,
      k;
  d = 0;
  for (e = a.length; d < e; d++)
    f = a[d], g = f.x, h = f.y, k = g / c.maxX, k = b.getUtoTmapping(k, g), g = b.getPoint(k), k = b.getTangent(k), k.set(-k.y, k.x).multiplyScalar(h), f.x = g.x + k.x, f.y = g.y + k.y;
  return a;
};
THREE.Gyroscope = function() {
  THREE.Object3D.call(this);
};
THREE.Gyroscope.prototype = Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.constructor = THREE.Gyroscope;
THREE.Gyroscope.prototype.updateMatrixWorld = function() {
  var a = new THREE.Vector3,
      b = new THREE.Quaternion,
      c = new THREE.Vector3,
      d = new THREE.Vector3,
      e = new THREE.Quaternion,
      f = new THREE.Vector3;
  return function(g) {
    this.matrixAutoUpdate && this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || g)
      this.parent ? (this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorld.decompose(d, e, f), this.matrix.decompose(a, b, c), this.matrixWorld.compose(d, b, f)) : this.matrixWorld.copy(this.matrix), this.matrixWorldNeedsUpdate = !1, g = !0;
    for (var h = 0,
        k = this.children.length; h < k; h++)
      this.children[h].updateMatrixWorld(g);
  };
}();
THREE.Path = function(a) {
  THREE.CurvePath.call(this);
  this.actions = [];
  a && this.fromPoints(a);
};
THREE.Path.prototype = Object.create(THREE.CurvePath.prototype);
THREE.Path.prototype.constructor = THREE.Path;
THREE.PathActions = {
  MOVE_TO: "moveTo",
  LINE_TO: "lineTo",
  QUADRATIC_CURVE_TO: "quadraticCurveTo",
  BEZIER_CURVE_TO: "bezierCurveTo",
  CSPLINE_THRU: "splineThru",
  ARC: "arc",
  ELLIPSE: "ellipse"
};
THREE.Path.prototype.fromPoints = function(a) {
  this.moveTo(a[0].x, a[0].y);
  for (var b = 1,
      c = a.length; b < c; b++)
    this.lineTo(a[b].x, a[b].y);
};
THREE.Path.prototype.moveTo = function(a, b) {
  var c = Array.prototype.slice.call(arguments);
  this.actions.push({
    action: THREE.PathActions.MOVE_TO,
    args: c
  });
};
THREE.Path.prototype.lineTo = function(a, b) {
  var c = Array.prototype.slice.call(arguments),
      d = this.actions[this.actions.length - 1].args,
      d = new THREE.LineCurve(new THREE.Vector2(d[d.length - 2], d[d.length - 1]), new THREE.Vector2(a, b));
  this.curves.push(d);
  this.actions.push({
    action: THREE.PathActions.LINE_TO,
    args: c
  });
};
THREE.Path.prototype.quadraticCurveTo = function(a, b, c, d) {
  var e = Array.prototype.slice.call(arguments),
      f = this.actions[this.actions.length - 1].args,
      f = new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length - 2], f[f.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d));
  this.curves.push(f);
  this.actions.push({
    action: THREE.PathActions.QUADRATIC_CURVE_TO,
    args: e
  });
};
THREE.Path.prototype.bezierCurveTo = function(a, b, c, d, e, f) {
  var g = Array.prototype.slice.call(arguments),
      h = this.actions[this.actions.length - 1].args,
      h = new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length - 2], h[h.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d), new THREE.Vector2(e, f));
  this.curves.push(h);
  this.actions.push({
    action: THREE.PathActions.BEZIER_CURVE_TO,
    args: g
  });
};
THREE.Path.prototype.splineThru = function(a) {
  var b = Array.prototype.slice.call(arguments),
      c = this.actions[this.actions.length - 1].args,
      c = [new THREE.Vector2(c[c.length - 2], c[c.length - 1])];
  Array.prototype.push.apply(c, a);
  c = new THREE.SplineCurve(c);
  this.curves.push(c);
  this.actions.push({
    action: THREE.PathActions.CSPLINE_THRU,
    args: b
  });
};
THREE.Path.prototype.arc = function(a, b, c, d, e, f) {
  var g = this.actions[this.actions.length - 1].args;
  this.absarc(a + g[g.length - 2], b + g[g.length - 1], c, d, e, f);
};
THREE.Path.prototype.absarc = function(a, b, c, d, e, f) {
  this.absellipse(a, b, c, c, d, e, f);
};
THREE.Path.prototype.ellipse = function(a, b, c, d, e, f, g) {
  var h = this.actions[this.actions.length - 1].args;
  this.absellipse(a + h[h.length - 2], b + h[h.length - 1], c, d, e, f, g);
};
THREE.Path.prototype.absellipse = function(a, b, c, d, e, f, g) {
  var h = Array.prototype.slice.call(arguments),
      k = new THREE.EllipseCurve(a, b, c, d, e, f, g);
  this.curves.push(k);
  k = k.getPoint(1);
  h.push(k.x);
  h.push(k.y);
  this.actions.push({
    action: THREE.PathActions.ELLIPSE,
    args: h
  });
};
THREE.Path.prototype.getSpacedPoints = function(a, b) {
  a || (a = 40);
  for (var c = [],
      d = 0; d < a; d++)
    c.push(this.getPoint(d / a));
  return c;
};
THREE.Path.prototype.getPoints = function(a, b) {
  if (this.useSpacedPoints)
    return console.log("tata"), this.getSpacedPoints(a, b);
  a = a || 12;
  var c = [],
      d,
      e,
      f,
      g,
      h,
      k,
      n,
      p,
      q,
      m,
      t,
      s,
      r;
  d = 0;
  for (e = this.actions.length; d < e; d++)
    switch (f = this.actions[d], g = f.action, f = f.args, g) {
      case THREE.PathActions.MOVE_TO:
        c.push(new THREE.Vector2(f[0], f[1]));
        break;
      case THREE.PathActions.LINE_TO:
        c.push(new THREE.Vector2(f[0], f[1]));
        break;
      case THREE.PathActions.QUADRATIC_CURVE_TO:
        h = f[2];
        k = f[3];
        q = f[0];
        m = f[1];
        0 < c.length ? (g = c[c.length - 1], t = g.x, s = g.y) : (g = this.actions[d - 1].args, t = g[g.length - 2], s = g[g.length - 1]);
        for (f = 1; f <= a; f++)
          r = f / a, g = THREE.Shape.Utils.b2(r, t, q, h), r = THREE.Shape.Utils.b2(r, s, m, k), c.push(new THREE.Vector2(g, r));
        break;
      case THREE.PathActions.BEZIER_CURVE_TO:
        h = f[4];
        k = f[5];
        q = f[0];
        m = f[1];
        n = f[2];
        p = f[3];
        0 < c.length ? (g = c[c.length - 1], t = g.x, s = g.y) : (g = this.actions[d - 1].args, t = g[g.length - 2], s = g[g.length - 1]);
        for (f = 1; f <= a; f++)
          r = f / a, g = THREE.Shape.Utils.b3(r, t, q, n, h), r = THREE.Shape.Utils.b3(r, s, m, p, k), c.push(new THREE.Vector2(g, r));
        break;
      case THREE.PathActions.CSPLINE_THRU:
        g = this.actions[d - 1].args;
        r = [new THREE.Vector2(g[g.length - 2], g[g.length - 1])];
        g = a * f[0].length;
        r = r.concat(f[0]);
        r = new THREE.SplineCurve(r);
        for (f = 1; f <= g; f++)
          c.push(r.getPointAt(f / g));
        break;
      case THREE.PathActions.ARC:
        h = f[0];
        k = f[1];
        m = f[2];
        n = f[3];
        g = f[4];
        q = !!f[5];
        t = g - n;
        s = 2 * a;
        for (f = 1; f <= s; f++)
          r = f / s, q || (r = 1 - r), r = n + r * t, g = h + m * Math.cos(r), r = k + m * Math.sin(r), c.push(new THREE.Vector2(g, r));
        break;
      case THREE.PathActions.ELLIPSE:
        for (h = f[0], k = f[1], m = f[2], p = f[3], n = f[4], g = f[5], q = !!f[6], t = g - n, s = 2 * a, f = 1; f <= s; f++)
          r = f / s, q || (r = 1 - r), r = n + r * t, g = h + m * Math.cos(r), r = k + p * Math.sin(r), c.push(new THREE.Vector2(g, r));
    }
  d = c[c.length - 1];
  1E-10 > Math.abs(d.x - c[0].x) && 1E-10 > Math.abs(d.y - c[0].y) && c.splice(c.length - 1, 1);
  b && c.push(c[0]);
  return c;
};
THREE.Path.prototype.toShapes = function(a, b) {
  function c(a) {
    for (var b = [],
        c = 0,
        d = a.length; c < d; c++) {
      var e = a[c],
          g = new THREE.Shape;
      g.actions = e.actions;
      g.curves = e.curves;
      b.push(g);
    }
    return b;
  }
  function d(a, b) {
    for (var c = b.length,
        d = !1,
        e = c - 1,
        g = 0; g < c; e = g++) {
      var f = b[e],
          h = b[g],
          k = h.x - f.x,
          m = h.y - f.y;
      if (1E-10 < Math.abs(m)) {
        if (0 > m && (f = b[g], k = -k, h = b[e], m = -m), !(a.y < f.y || a.y > h.y))
          if (a.y == f.y) {
            if (a.x == f.x)
              return !0;
          } else {
            e = m * (a.x - f.x) - k * (a.y - f.y);
            if (0 == e)
              return !0;
            0 > e || (d = !d);
          }
      } else if (a.y == f.y && (h.x <= a.x && a.x <= f.x || f.x <= a.x && a.x <= h.x))
        return !0;
    }
    return d;
  }
  var e = function(a) {
    var b,
        c,
        d,
        e,
        f = [],
        g = new THREE.Path;
    b = 0;
    for (c = a.length; b < c; b++)
      d = a[b], e = d.args, d = d.action, d == THREE.PathActions.MOVE_TO && 0 != g.actions.length && (f.push(g), g = new THREE.Path), g[d].apply(g, e);
    0 != g.actions.length && f.push(g);
    return f;
  }(this.actions);
  if (0 == e.length)
    return [];
  if (!0 === b)
    return c(e);
  var f,
      g,
      h,
      k = [];
  if (1 == e.length)
    return g = e[0], h = new THREE.Shape, h.actions = g.actions, h.curves = g.curves, k.push(h), k;
  var n = !THREE.Shape.Utils.isClockWise(e[0].getPoints()),
      n = a ? !n : n;
  h = [];
  var p = [],
      q = [],
      m = 0,
      t;
  p[m] = void 0;
  q[m] = [];
  var s,
      r;
  s = 0;
  for (r = e.length; s < r; s++)
    g = e[s], t = g.getPoints(), f = THREE.Shape.Utils.isClockWise(t), (f = a ? !f : f) ? (!n && p[m] && m++, p[m] = {
      s: new THREE.Shape,
      p: t
    }, p[m].s.actions = g.actions, p[m].s.curves = g.curves, n && m++, q[m] = []) : q[m].push({
      h: g,
      p: t[0]
    });
  if (!p[0])
    return c(e);
  if (1 < p.length) {
    s = !1;
    r = [];
    g = 0;
    for (e = p.length; g < e; g++)
      h[g] = [];
    g = 0;
    for (e = p.length; g < e; g++)
      for (f = q[g], n = 0; n < f.length; n++) {
        m = f[n];
        t = !0;
        for (var u = 0; u < p.length; u++)
          d(m.p, p[u].p) && (g != u && r.push({
            froms: g,
            tos: u,
            hole: n
          }), t ? (t = !1, h[u].push(m)) : s = !0);
        t && h[g].push(m);
      }
    0 < r.length && (s || (q = h));
  }
  s = 0;
  for (r = p.length; s < r; s++)
    for (h = p[s].s, k.push(h), g = q[s], e = 0, f = g.length; e < f; e++)
      h.holes.push(g[e].h);
  return k;
};
THREE.Shape = function() {
  THREE.Path.apply(this, arguments);
  this.holes = [];
};
THREE.Shape.prototype = Object.create(THREE.Path.prototype);
THREE.Shape.prototype.constructor = THREE.Shape;
THREE.Shape.prototype.extrude = function(a) {
  return new THREE.ExtrudeGeometry(this, a);
};
THREE.Shape.prototype.makeGeometry = function(a) {
  return new THREE.ShapeGeometry(this, a);
};
THREE.Shape.prototype.getPointsHoles = function(a) {
  var b,
      c = this.holes.length,
      d = [];
  for (b = 0; b < c; b++)
    d[b] = this.holes[b].getTransformedPoints(a, this.bends);
  return d;
};
THREE.Shape.prototype.getSpacedPointsHoles = function(a) {
  var b,
      c = this.holes.length,
      d = [];
  for (b = 0; b < c; b++)
    d[b] = this.holes[b].getTransformedSpacedPoints(a, this.bends);
  return d;
};
THREE.Shape.prototype.extractAllPoints = function(a) {
  return {
    shape: this.getTransformedPoints(a),
    holes: this.getPointsHoles(a)
  };
};
THREE.Shape.prototype.extractPoints = function(a) {
  return this.useSpacedPoints ? this.extractAllSpacedPoints(a) : this.extractAllPoints(a);
};
THREE.Shape.prototype.extractAllSpacedPoints = function(a) {
  return {
    shape: this.getTransformedSpacedPoints(a),
    holes: this.getSpacedPointsHoles(a)
  };
};
THREE.Shape.Utils = {
  triangulateShape: function(a, b) {
    function c(a, b, c) {
      return a.x != b.x ? a.x < b.x ? a.x <= c.x && c.x <= b.x : b.x <= c.x && c.x <= a.x : a.y < b.y ? a.y <= c.y && c.y <= b.y : b.y <= c.y && c.y <= a.y;
    }
    function d(a, b, d, e, g) {
      var f = b.x - a.x,
          h = b.y - a.y,
          k = e.x - d.x,
          n = e.y - d.y,
          p = a.x - d.x,
          q = a.y - d.y,
          G = h * k - f * n,
          E = h * p - f * q;
      if (1E-10 < Math.abs(G)) {
        if (0 < G) {
          if (0 > E || E > G)
            return [];
          k = n * p - k * q;
          if (0 > k || k > G)
            return [];
        } else {
          if (0 < E || E < G)
            return [];
          k = n * p - k * q;
          if (0 < k || k < G)
            return [];
        }
        if (0 == k)
          return !g || 0 != E && E != G ? [a] : [];
        if (k == G)
          return !g || 0 != E && E != G ? [b] : [];
        if (0 == E)
          return [d];
        if (E == G)
          return [e];
        g = k / G;
        return [{
          x: a.x + g * f,
          y: a.y + g * h
        }];
      }
      if (0 != E || n * p != k * q)
        return [];
      h = 0 == f && 0 == h;
      k = 0 == k && 0 == n;
      if (h && k)
        return a.x != d.x || a.y != d.y ? [] : [a];
      if (h)
        return c(d, e, a) ? [a] : [];
      if (k)
        return c(a, b, d) ? [d] : [];
      0 != f ? (a.x < b.x ? (f = a, k = a.x, h = b, a = b.x) : (f = b, k = b.x, h = a, a = a.x), d.x < e.x ? (b = d, G = d.x, n = e, d = e.x) : (b = e, G = e.x, n = d, d = d.x)) : (a.y < b.y ? (f = a, k = a.y, h = b, a = b.y) : (f = b, k = b.y, h = a, a = a.y), d.y < e.y ? (b = d, G = d.y, n = e, d = e.y) : (b = e, G = e.y, n = d, d = d.y));
      return k <= G ? a < G ? [] : a == G ? g ? [] : [b] : a <= d ? [b, h] : [b, n] : k > d ? [] : k == d ? g ? [] : [f] : a <= d ? [f, h] : [f, n];
    }
    function e(a, b, c, d) {
      var e = b.x - a.x,
          f = b.y - a.y;
      b = c.x - a.x;
      c = c.y - a.y;
      var g = d.x - a.x;
      d = d.y - a.y;
      a = e * c - f * b;
      e = e * d - f * g;
      return 1E-10 < Math.abs(a) ? (b = g * c - d * b, 0 < a ? 0 <= e && 0 <= b : 0 <= e || 0 <= b) : 0 < e;
    }
    var f,
        g,
        h,
        k,
        n,
        p = {};
    h = a.concat();
    f = 0;
    for (g = b.length; f < g; f++)
      Array.prototype.push.apply(h, b[f]);
    f = 0;
    for (g = h.length; f < g; f++)
      n = h[f].x + ":" + h[f].y, void 0 !== p[n] && console.log("Duplicate point", n), p[n] = f;
    f = function(a, b) {
      function c(a, b) {
        var d = h.length - 1,
            f = a - 1;
        0 > f && (f = d);
        var g = a + 1;
        g > d && (g = 0);
        d = e(h[a], h[f], h[g], k[b]);
        if (!d)
          return !1;
        d = k.length - 1;
        f = b - 1;
        0 > f && (f = d);
        g = b + 1;
        g > d && (g = 0);
        return (d = e(k[b], k[f], k[g], h[a])) ? !0 : !1;
      }
      function f(a, b) {
        var c,
            e;
        for (c = 0; c < h.length; c++)
          if (e = c + 1, e %= h.length, e = d(a, b, h[c], h[e], !0), 0 < e.length)
            return !0;
        return !1;
      }
      function g(a, c) {
        var e,
            f,
            h,
            k;
        for (e = 0; e < n.length; e++)
          for (f = b[n[e]], h = 0; h < f.length; h++)
            if (k = h + 1, k %= f.length, k = d(a, c, f[h], f[k], !0), 0 < k.length)
              return !0;
        return !1;
      }
      var h = a.concat(),
          k,
          n = [],
          p,
          q,
          z,
          G,
          E,
          w = [],
          D,
          A,
          U,
          M = 0;
      for (p = b.length; M < p; M++)
        n.push(M);
      D = 0;
      for (var K = 2 * n.length; 0 < n.length; ) {
        K--;
        if (0 > K) {
          console.log("Infinite Loop! Holes left:" + n.length + ", Probably Hole outside Shape!");
          break;
        }
        for (q = D; q < h.length; q++) {
          z = h[q];
          p = -1;
          for (M = 0; M < n.length; M++)
            if (G = n[M], E = z.x + ":" + z.y + ":" + G, void 0 === w[E]) {
              k = b[G];
              for (A = 0; A < k.length; A++)
                if (G = k[A], c(q, A) && !f(z, G) && !g(z, G)) {
                  p = A;
                  n.splice(M, 1);
                  D = h.slice(0, q + 1);
                  G = h.slice(q);
                  A = k.slice(p);
                  U = k.slice(0, p + 1);
                  h = D.concat(A).concat(U).concat(G);
                  D = q;
                  break;
                }
              if (0 <= p)
                break;
              w[E] = !0;
            }
          if (0 <= p)
            break;
        }
      }
      return h;
    }(a, b);
    var q = THREE.FontUtils.Triangulate(f, !1);
    f = 0;
    for (g = q.length; f < g; f++)
      for (k = q[f], h = 0; 3 > h; h++)
        n = k[h].x + ":" + k[h].y, n = p[n], void 0 !== n && (k[h] = n);
    return q.concat();
  },
  isClockWise: function(a) {
    return 0 > THREE.FontUtils.Triangulate.area(a);
  },
  b2p0: function(a, b) {
    var c = 1 - a;
    return c * c * b;
  },
  b2p1: function(a, b) {
    return 2 * (1 - a) * a * b;
  },
  b2p2: function(a, b) {
    return a * a * b;
  },
  b2: function(a, b, c, d) {
    return this.b2p0(a, b) + this.b2p1(a, c) + this.b2p2(a, d);
  },
  b3p0: function(a, b) {
    var c = 1 - a;
    return c * c * c * b;
  },
  b3p1: function(a, b) {
    var c = 1 - a;
    return 3 * c * c * a * b;
  },
  b3p2: function(a, b) {
    return 3 * (1 - a) * a * a * b;
  },
  b3p3: function(a, b) {
    return a * a * a * b;
  },
  b3: function(a, b, c, d, e) {
    return this.b3p0(a, b) + this.b3p1(a, c) + this.b3p2(a, d) + this.b3p3(a, e);
  }
};
THREE.LineCurve = function(a, b) {
  this.v1 = a;
  this.v2 = b;
};
THREE.LineCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.LineCurve.prototype.constructor = THREE.LineCurve;
THREE.LineCurve.prototype.getPoint = function(a) {
  var b = this.v2.clone().sub(this.v1);
  b.multiplyScalar(a).add(this.v1);
  return b;
};
THREE.LineCurve.prototype.getPointAt = function(a) {
  return this.getPoint(a);
};
THREE.LineCurve.prototype.getTangent = function(a) {
  return this.v2.clone().sub(this.v1).normalize();
};
THREE.QuadraticBezierCurve = function(a, b, c) {
  this.v0 = a;
  this.v1 = b;
  this.v2 = c;
};
THREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;
THREE.QuadraticBezierCurve.prototype.getPoint = function(a) {
  var b = new THREE.Vector2;
  b.x = THREE.Shape.Utils.b2(a, this.v0.x, this.v1.x, this.v2.x);
  b.y = THREE.Shape.Utils.b2(a, this.v0.y, this.v1.y, this.v2.y);
  return b;
};
THREE.QuadraticBezierCurve.prototype.getTangent = function(a) {
  var b = new THREE.Vector2;
  b.x = THREE.Curve.Utils.tangentQuadraticBezier(a, this.v0.x, this.v1.x, this.v2.x);
  b.y = THREE.Curve.Utils.tangentQuadraticBezier(a, this.v0.y, this.v1.y, this.v2.y);
  return b.normalize();
};
THREE.CubicBezierCurve = function(a, b, c, d) {
  this.v0 = a;
  this.v1 = b;
  this.v2 = c;
  this.v3 = d;
};
THREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;
THREE.CubicBezierCurve.prototype.getPoint = function(a) {
  var b;
  b = THREE.Shape.Utils.b3(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
  a = THREE.Shape.Utils.b3(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
  return new THREE.Vector2(b, a);
};
THREE.CubicBezierCurve.prototype.getTangent = function(a) {
  var b;
  b = THREE.Curve.Utils.tangentCubicBezier(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
  a = THREE.Curve.Utils.tangentCubicBezier(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
  b = new THREE.Vector2(b, a);
  b.normalize();
  return b;
};
THREE.SplineCurve = function(a) {
  this.points = void 0 == a ? [] : a;
};
THREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;
THREE.SplineCurve.prototype.getPoint = function(a) {
  var b = this.points;
  a *= b.length - 1;
  var c = Math.floor(a);
  a -= c;
  var d = b[0 == c ? c : c - 1],
      e = b[c],
      f = b[c > b.length - 2 ? b.length - 1 : c + 1],
      b = b[c > b.length - 3 ? b.length - 1 : c + 2],
      c = new THREE.Vector2;
  c.x = THREE.Curve.Utils.interpolate(d.x, e.x, f.x, b.x, a);
  c.y = THREE.Curve.Utils.interpolate(d.y, e.y, f.y, b.y, a);
  return c;
};
THREE.EllipseCurve = function(a, b, c, d, e, f, g) {
  this.aX = a;
  this.aY = b;
  this.xRadius = c;
  this.yRadius = d;
  this.aStartAngle = e;
  this.aEndAngle = f;
  this.aClockwise = g;
};
THREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;
THREE.EllipseCurve.prototype.getPoint = function(a) {
  var b = this.aEndAngle - this.aStartAngle;
  0 > b && (b += 2 * Math.PI);
  b > 2 * Math.PI && (b -= 2 * Math.PI);
  a = !0 === this.aClockwise ? this.aEndAngle + (1 - a) * (2 * Math.PI - b) : this.aStartAngle + a * b;
  b = new THREE.Vector2;
  b.x = this.aX + this.xRadius * Math.cos(a);
  b.y = this.aY + this.yRadius * Math.sin(a);
  return b;
};
THREE.ArcCurve = function(a, b, c, d, e, f) {
  THREE.EllipseCurve.call(this, a, b, c, c, d, e, f);
};
THREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype);
THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;
THREE.LineCurve3 = THREE.Curve.create(function(a, b) {
  this.v1 = a;
  this.v2 = b;
}, function(a) {
  var b = new THREE.Vector3;
  b.subVectors(this.v2, this.v1);
  b.multiplyScalar(a);
  b.add(this.v1);
  return b;
});
THREE.QuadraticBezierCurve3 = THREE.Curve.create(function(a, b, c) {
  this.v0 = a;
  this.v1 = b;
  this.v2 = c;
}, function(a) {
  var b = new THREE.Vector3;
  b.x = THREE.Shape.Utils.b2(a, this.v0.x, this.v1.x, this.v2.x);
  b.y = THREE.Shape.Utils.b2(a, this.v0.y, this.v1.y, this.v2.y);
  b.z = THREE.Shape.Utils.b2(a, this.v0.z, this.v1.z, this.v2.z);
  return b;
});
THREE.CubicBezierCurve3 = THREE.Curve.create(function(a, b, c, d) {
  this.v0 = a;
  this.v1 = b;
  this.v2 = c;
  this.v3 = d;
}, function(a) {
  var b = new THREE.Vector3;
  b.x = THREE.Shape.Utils.b3(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
  b.y = THREE.Shape.Utils.b3(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
  b.z = THREE.Shape.Utils.b3(a, this.v0.z, this.v1.z, this.v2.z, this.v3.z);
  return b;
});
THREE.SplineCurve3 = THREE.Curve.create(function(a) {
  this.points = void 0 == a ? [] : a;
}, function(a) {
  var b = this.points;
  a *= b.length - 1;
  var c = Math.floor(a);
  a -= c;
  var d = b[0 == c ? c : c - 1],
      e = b[c],
      f = b[c > b.length - 2 ? b.length - 1 : c + 1],
      b = b[c > b.length - 3 ? b.length - 1 : c + 2],
      c = new THREE.Vector3;
  c.x = THREE.Curve.Utils.interpolate(d.x, e.x, f.x, b.x, a);
  c.y = THREE.Curve.Utils.interpolate(d.y, e.y, f.y, b.y, a);
  c.z = THREE.Curve.Utils.interpolate(d.z, e.z, f.z, b.z, a);
  return c;
});
THREE.ClosedSplineCurve3 = THREE.Curve.create(function(a) {
  this.points = void 0 == a ? [] : a;
}, function(a) {
  var b = this.points;
  a *= b.length - 0;
  var c = Math.floor(a);
  a -= c;
  var c = c + (0 < c ? 0 : (Math.floor(Math.abs(c) / b.length) + 1) * b.length),
      d = b[(c - 1) % b.length],
      e = b[c % b.length],
      f = b[(c + 1) % b.length],
      b = b[(c + 2) % b.length],
      c = new THREE.Vector3;
  c.x = THREE.Curve.Utils.interpolate(d.x, e.x, f.x, b.x, a);
  c.y = THREE.Curve.Utils.interpolate(d.y, e.y, f.y, b.y, a);
  c.z = THREE.Curve.Utils.interpolate(d.z, e.z, f.z, b.z, a);
  return c;
});
THREE.AnimationHandler = {
  LINEAR: 0,
  CATMULLROM: 1,
  CATMULLROM_FORWARD: 2,
  add: function() {
    console.warn("THREE.AnimationHandler.add() has been deprecated.");
  },
  get: function() {
    console.warn("THREE.AnimationHandler.get() has been deprecated.");
  },
  remove: function() {
    console.warn("THREE.AnimationHandler.remove() has been deprecated.");
  },
  animations: [],
  init: function(a) {
    if (!0 === a.initialized)
      return a;
    for (var b = 0; b < a.hierarchy.length; b++) {
      for (var c = 0; c < a.hierarchy[b].keys.length; c++)
        if (0 > a.hierarchy[b].keys[c].time && (a.hierarchy[b].keys[c].time = 0), void 0 !== a.hierarchy[b].keys[c].rot && !(a.hierarchy[b].keys[c].rot instanceof THREE.Quaternion)) {
          var d = a.hierarchy[b].keys[c].rot;
          a.hierarchy[b].keys[c].rot = (new THREE.Quaternion).fromArray(d);
        }
      if (a.hierarchy[b].keys.length && void 0 !== a.hierarchy[b].keys[0].morphTargets) {
        d = {};
        for (c = 0; c < a.hierarchy[b].keys.length; c++)
          for (var e = 0; e < a.hierarchy[b].keys[c].morphTargets.length; e++) {
            var f = a.hierarchy[b].keys[c].morphTargets[e];
            d[f] = -1;
          }
        a.hierarchy[b].usedMorphTargets = d;
        for (c = 0; c < a.hierarchy[b].keys.length; c++) {
          var g = {};
          for (f in d) {
            for (e = 0; e < a.hierarchy[b].keys[c].morphTargets.length; e++)
              if (a.hierarchy[b].keys[c].morphTargets[e] === f) {
                g[f] = a.hierarchy[b].keys[c].morphTargetsInfluences[e];
                break;
              }
            e === a.hierarchy[b].keys[c].morphTargets.length && (g[f] = 0);
          }
          a.hierarchy[b].keys[c].morphTargetsInfluences = g;
        }
      }
      for (c = 1; c < a.hierarchy[b].keys.length; c++)
        a.hierarchy[b].keys[c].time === a.hierarchy[b].keys[c - 1].time && (a.hierarchy[b].keys.splice(c, 1), c--);
      for (c = 0; c < a.hierarchy[b].keys.length; c++)
        a.hierarchy[b].keys[c].index = c;
    }
    a.initialized = !0;
    return a;
  },
  parse: function(a) {
    var b = function(a, c) {
      c.push(a);
      for (var d = 0; d < a.children.length; d++)
        b(a.children[d], c);
    },
        c = [];
    if (a instanceof THREE.SkinnedMesh)
      for (var d = 0; d < a.skeleton.bones.length; d++)
        c.push(a.skeleton.bones[d]);
    else
      b(a, c);
    return c;
  },
  play: function(a) {
    -1 === this.animations.indexOf(a) && this.animations.push(a);
  },
  stop: function(a) {
    a = this.animations.indexOf(a);
    -1 !== a && this.animations.splice(a, 1);
  },
  update: function(a) {
    for (var b = 0; b < this.animations.length; b++)
      this.animations[b].resetBlendWeights();
    for (b = 0; b < this.animations.length; b++)
      this.animations[b].update(a);
  }
};
THREE.Animation = function(a, b) {
  this.root = a;
  this.data = THREE.AnimationHandler.init(b);
  this.hierarchy = THREE.AnimationHandler.parse(a);
  this.currentTime = 0;
  this.timeScale = 1;
  this.isPlaying = !1;
  this.loop = !0;
  this.weight = 0;
  this.interpolationType = THREE.AnimationHandler.LINEAR;
};
THREE.Animation.prototype.keyTypes = ["pos", "rot", "scl"];
THREE.Animation.prototype.play = function(a, b) {
  this.currentTime = void 0 !== a ? a : 0;
  this.weight = void 0 !== b ? b : 1;
  this.isPlaying = !0;
  this.reset();
  THREE.AnimationHandler.play(this);
};
THREE.Animation.prototype.stop = function() {
  this.isPlaying = !1;
  THREE.AnimationHandler.stop(this);
};
THREE.Animation.prototype.reset = function() {
  for (var a = 0,
      b = this.hierarchy.length; a < b; a++) {
    var c = this.hierarchy[a];
    void 0 === c.animationCache && (c.animationCache = {
      animations: {},
      blending: {
        positionWeight: 0,
        quaternionWeight: 0,
        scaleWeight: 0
      }
    });
    void 0 === c.animationCache.animations[this.data.name] && (c.animationCache.animations[this.data.name] = {}, c.animationCache.animations[this.data.name].prevKey = {
      pos: 0,
      rot: 0,
      scl: 0
    }, c.animationCache.animations[this.data.name].nextKey = {
      pos: 0,
      rot: 0,
      scl: 0
    }, c.animationCache.animations[this.data.name].originalMatrix = c.matrix);
    for (var c = c.animationCache.animations[this.data.name],
        d = 0; 3 > d; d++) {
      for (var e = this.keyTypes[d],
          f = this.data.hierarchy[a].keys[0],
          g = this.getNextKeyWith(e, a, 1); g.time < this.currentTime && g.index > f.index; )
        f = g, g = this.getNextKeyWith(e, a, g.index + 1);
      c.prevKey[e] = f;
      c.nextKey[e] = g;
    }
  }
};
THREE.Animation.prototype.resetBlendWeights = function() {
  for (var a = 0,
      b = this.hierarchy.length; a < b; a++) {
    var c = this.hierarchy[a];
    void 0 !== c.animationCache && (c.animationCache.blending.positionWeight = 0, c.animationCache.blending.quaternionWeight = 0, c.animationCache.blending.scaleWeight = 0);
  }
};
THREE.Animation.prototype.update = function() {
  var a = [],
      b = new THREE.Vector3,
      c = new THREE.Vector3,
      d = new THREE.Quaternion,
      e = function(a, b) {
        var c = [],
            d = [],
            e,
            q,
            m,
            t,
            s,
            r;
        e = (a.length - 1) * b;
        q = Math.floor(e);
        e -= q;
        c[0] = 0 === q ? q : q - 1;
        c[1] = q;
        c[2] = q > a.length - 2 ? q : q + 1;
        c[3] = q > a.length - 3 ? q : q + 2;
        q = a[c[0]];
        t = a[c[1]];
        s = a[c[2]];
        r = a[c[3]];
        c = e * e;
        m = e * c;
        d[0] = f(q[0], t[0], s[0], r[0], e, c, m);
        d[1] = f(q[1], t[1], s[1], r[1], e, c, m);
        d[2] = f(q[2], t[2], s[2], r[2], e, c, m);
        return d;
      },
      f = function(a, b, c, d, e, f, m) {
        a = .5 * (c - a);
        d = .5 * (d - b);
        return (2 * (b - c) + a + d) * m + (-3 * (b - c) - 2 * a - d) * f + a * e + b;
      };
  return function(f) {
    if (!1 !== this.isPlaying && (this.currentTime += f * this.timeScale, 0 !== this.weight)) {
      f = this.data.length;
      if (this.currentTime > f || 0 > this.currentTime)
        this.loop ? (this.currentTime %= f, 0 > this.currentTime && (this.currentTime += f), this.reset()) : this.stop();
      f = 0;
      for (var h = this.hierarchy.length; f < h; f++)
        for (var k = this.hierarchy[f],
            n = k.animationCache.animations[this.data.name],
            p = k.animationCache.blending,
            q = 0; 3 > q; q++) {
          var m = this.keyTypes[q],
              t = n.prevKey[m],
              s = n.nextKey[m];
          if (0 < this.timeScale && s.time <= this.currentTime || 0 > this.timeScale && t.time >= this.currentTime) {
            t = this.data.hierarchy[f].keys[0];
            for (s = this.getNextKeyWith(m, f, 1); s.time < this.currentTime && s.index > t.index; )
              t = s, s = this.getNextKeyWith(m, f, s.index + 1);
            n.prevKey[m] = t;
            n.nextKey[m] = s;
          }
          var r = (this.currentTime - t.time) / (s.time - t.time),
              u = t[m],
              v = s[m];
          0 > r && (r = 0);
          1 < r && (r = 1);
          if ("pos" === m)
            if (this.interpolationType === THREE.AnimationHandler.LINEAR)
              c.x = u[0] + (v[0] - u[0]) * r, c.y = u[1] + (v[1] - u[1]) * r, c.z = u[2] + (v[2] - u[2]) * r, t = this.weight / (this.weight + p.positionWeight), k.position.lerp(c, t), p.positionWeight += this.weight;
            else {
              if (this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD)
                a[0] = this.getPrevKeyWith("pos", f, t.index - 1).pos, a[1] = u, a[2] = v, a[3] = this.getNextKeyWith("pos", f, s.index + 1).pos, r = .33 * r + .33, s = e(a, r), t = this.weight / (this.weight + p.positionWeight), p.positionWeight += this.weight, m = k.position, m.x += (s[0] - m.x) * t, m.y += (s[1] - m.y) * t, m.z += (s[2] - m.z) * t, this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD && (r = e(a, 1.01 * r), b.set(r[0], r[1], r[2]), b.sub(m), b.y = 0, b.normalize(), r = Math.atan2(b.x, b.z), k.rotation.set(0, r, 0));
            }
          else
            "rot" === m ? (THREE.Quaternion.slerp(u, v, d, r), 0 === p.quaternionWeight ? (k.quaternion.copy(d), p.quaternionWeight = this.weight) : (t = this.weight / (this.weight + p.quaternionWeight), THREE.Quaternion.slerp(k.quaternion, d, k.quaternion, t), p.quaternionWeight += this.weight)) : "scl" === m && (c.x = u[0] + (v[0] - u[0]) * r, c.y = u[1] + (v[1] - u[1]) * r, c.z = u[2] + (v[2] - u[2]) * r, t = this.weight / (this.weight + p.scaleWeight), k.scale.lerp(c, t), p.scaleWeight += this.weight);
        }
      return !0;
    }
  };
}();
THREE.Animation.prototype.getNextKeyWith = function(a, b, c) {
  var d = this.data.hierarchy[b].keys;
  for (c = this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? c < d.length - 1 ? c : d.length - 1 : c % d.length; c < d.length; c++)
    if (void 0 !== d[c][a])
      return d[c];
  return this.data.hierarchy[b].keys[0];
};
THREE.Animation.prototype.getPrevKeyWith = function(a, b, c) {
  var d = this.data.hierarchy[b].keys;
  for (c = this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? 0 < c ? c : 0 : 0 <= c ? c : c + d.length; 0 <= c; c--)
    if (void 0 !== d[c][a])
      return d[c];
  return this.data.hierarchy[b].keys[d.length - 1];
};
THREE.KeyFrameAnimation = function(a) {
  this.root = a.node;
  this.data = THREE.AnimationHandler.init(a);
  this.hierarchy = THREE.AnimationHandler.parse(this.root);
  this.currentTime = 0;
  this.timeScale = .001;
  this.isPlaying = !1;
  this.loop = this.isPaused = !0;
  a = 0;
  for (var b = this.hierarchy.length; a < b; a++) {
    var c = this.data.hierarchy[a].sids,
        d = this.hierarchy[a];
    if (this.data.hierarchy[a].keys.length && c) {
      for (var e = 0; e < c.length; e++) {
        var f = c[e],
            g = this.getNextKeyWith(f, a, 0);
        g && g.apply(f);
      }
      d.matrixAutoUpdate = !1;
      this.data.hierarchy[a].node.updateMatrix();
      d.matrixWorldNeedsUpdate = !0;
    }
  }
};
THREE.KeyFrameAnimation.prototype.play = function(a) {
  this.currentTime = void 0 !== a ? a : 0;
  if (!1 === this.isPlaying) {
    this.isPlaying = !0;
    var b = this.hierarchy.length,
        c,
        d;
    for (a = 0; a < b; a++)
      c = this.hierarchy[a], d = this.data.hierarchy[a], void 0 === d.animationCache && (d.animationCache = {}, d.animationCache.prevKey = null, d.animationCache.nextKey = null, d.animationCache.originalMatrix = c.matrix), c = this.data.hierarchy[a].keys, c.length && (d.animationCache.prevKey = c[0], d.animationCache.nextKey = c[1], this.startTime = Math.min(c[0].time, this.startTime), this.endTime = Math.max(c[c.length - 1].time, this.endTime));
    this.update(0);
  }
  this.isPaused = !1;
  THREE.AnimationHandler.play(this);
};
THREE.KeyFrameAnimation.prototype.stop = function() {
  this.isPaused = this.isPlaying = !1;
  THREE.AnimationHandler.stop(this);
  for (var a = 0; a < this.data.hierarchy.length; a++) {
    var b = this.hierarchy[a],
        c = this.data.hierarchy[a];
    if (void 0 !== c.animationCache) {
      var d = c.animationCache.originalMatrix;
      d.copy(b.matrix);
      b.matrix = d;
      delete c.animationCache;
    }
  }
};
THREE.KeyFrameAnimation.prototype.update = function(a) {
  if (!1 !== this.isPlaying) {
    this.currentTime += a * this.timeScale;
    a = this.data.length;
    !0 === this.loop && this.currentTime > a && (this.currentTime %= a);
    this.currentTime = Math.min(this.currentTime, a);
    a = 0;
    for (var b = this.hierarchy.length; a < b; a++) {
      var c = this.hierarchy[a],
          d = this.data.hierarchy[a],
          e = d.keys,
          d = d.animationCache;
      if (e.length) {
        var f = d.prevKey,
            g = d.nextKey;
        if (g.time <= this.currentTime) {
          for (; g.time < this.currentTime && g.index > f.index; )
            f = g, g = e[f.index + 1];
          d.prevKey = f;
          d.nextKey = g;
        }
        g.time >= this.currentTime ? f.interpolate(g, this.currentTime) : f.interpolate(g, g.time);
        this.data.hierarchy[a].node.updateMatrix();
        c.matrixWorldNeedsUpdate = !0;
      }
    }
  }
};
THREE.KeyFrameAnimation.prototype.getNextKeyWith = function(a, b, c) {
  b = this.data.hierarchy[b].keys;
  for (c %= b.length; c < b.length; c++)
    if (b[c].hasTarget(a))
      return b[c];
  return b[0];
};
THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function(a, b, c) {
  b = this.data.hierarchy[b].keys;
  for (c = 0 <= c ? c : c + b.length; 0 <= c; c--)
    if (b[c].hasTarget(a))
      return b[c];
  return b[b.length - 1];
};
THREE.MorphAnimation = function(a) {
  this.mesh = a;
  this.frames = a.morphTargetInfluences.length;
  this.currentTime = 0;
  this.duration = 1E3;
  this.loop = !0;
  this.currentFrame = this.lastFrame = 0;
  this.isPlaying = !1;
};
THREE.MorphAnimation.prototype = {
  constructor: THREE.MorphAnimation,
  play: function() {
    this.isPlaying = !0;
  },
  pause: function() {
    this.isPlaying = !1;
  },
  update: function(a) {
    if (!1 !== this.isPlaying) {
      this.currentTime += a;
      !0 === this.loop && this.currentTime > this.duration && (this.currentTime %= this.duration);
      this.currentTime = Math.min(this.currentTime, this.duration);
      a = this.duration / this.frames;
      var b = Math.floor(this.currentTime / a);
      b != this.currentFrame && (this.mesh.morphTargetInfluences[this.lastFrame] = 0, this.mesh.morphTargetInfluences[this.currentFrame] = 1, this.mesh.morphTargetInfluences[b] = 0, this.lastFrame = this.currentFrame, this.currentFrame = b);
      this.mesh.morphTargetInfluences[b] = this.currentTime % a / a;
      this.mesh.morphTargetInfluences[this.lastFrame] = 1 - this.mesh.morphTargetInfluences[b];
    }
  }
};
THREE.BoxGeometry = function(a, b, c, d, e, f) {
  function g(a, b, c, d, e, f, g, r) {
    var u,
        v = h.widthSegments,
        y = h.heightSegments,
        C = e / 2,
        x = f / 2,
        F = h.vertices.length;
    if ("x" === a && "y" === b || "y" === a && "x" === b)
      u = "z";
    else if ("x" === a && "z" === b || "z" === a && "x" === b)
      u = "y", y = h.depthSegments;
    else if ("z" === a && "y" === b || "y" === a && "z" === b)
      u = "x", v = h.depthSegments;
    var z = v + 1,
        G = y + 1,
        E = e / v,
        w = f / y,
        D = new THREE.Vector3;
    D[u] = 0 < g ? 1 : -1;
    for (e = 0; e < G; e++)
      for (f = 0; f < z; f++) {
        var A = new THREE.Vector3;
        A[a] = (f * E - C) * c;
        A[b] = (e * w - x) * d;
        A[u] = g;
        h.vertices.push(A);
      }
    for (e = 0; e < y; e++)
      for (f = 0; f < v; f++)
        x = f + z * e, a = f + z * (e + 1), b = f + 1 + z * (e + 1), c = f + 1 + z * e, d = new THREE.Vector2(f / v, 1 - e / y), g = new THREE.Vector2(f / v, 1 - (e + 1) / y), u = new THREE.Vector2((f + 1) / v, 1 - (e + 1) / y), C = new THREE.Vector2((f + 1) / v, 1 - e / y), x = new THREE.Face3(x + F, a + F, c + F), x.normal.copy(D), x.vertexNormals.push(D.clone(), D.clone(), D.clone()), x.materialIndex = r, h.faces.push(x), h.faceVertexUvs[0].push([d, g, C]), x = new THREE.Face3(a + F, b + F, c + F), x.normal.copy(D), x.vertexNormals.push(D.clone(), D.clone(), D.clone()), x.materialIndex = r, h.faces.push(x), h.faceVertexUvs[0].push([g.clone(), u, C.clone()]);
  }
  THREE.Geometry.call(this);
  this.type = "BoxGeometry";
  this.parameters = {
    width: a,
    height: b,
    depth: c,
    widthSegments: d,
    heightSegments: e,
    depthSegments: f
  };
  this.widthSegments = d || 1;
  this.heightSegments = e || 1;
  this.depthSegments = f || 1;
  var h = this;
  d = a / 2;
  e = b / 2;
  f = c / 2;
  g("z", "y", -1, -1, c, b, d, 0);
  g("z", "y", 1, -1, c, b, -d, 1);
  g("x", "z", 1, 1, a, c, e, 2);
  g("x", "z", 1, -1, a, c, -e, 3);
  g("x", "y", 1, -1, a, b, f, 4);
  g("x", "y", -1, -1, a, b, -f, 5);
  this.mergeVertices();
};
THREE.BoxGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;
THREE.CircleGeometry = function(a, b, c, d) {
  THREE.Geometry.call(this);
  this.type = "CircleGeometry";
  this.parameters = {
    radius: a,
    segments: b,
    thetaStart: c,
    thetaLength: d
  };
  a = a || 50;
  b = void 0 !== b ? Math.max(3, b) : 8;
  c = void 0 !== c ? c : 0;
  d = void 0 !== d ? d : 2 * Math.PI;
  var e,
      f = [];
  e = new THREE.Vector3;
  var g = new THREE.Vector2(.5, .5);
  this.vertices.push(e);
  f.push(g);
  for (e = 0; e <= b; e++) {
    var h = new THREE.Vector3,
        k = c + e / b * d;
    h.x = a * Math.cos(k);
    h.y = a * Math.sin(k);
    this.vertices.push(h);
    f.push(new THREE.Vector2((h.x / a + 1) / 2, (h.y / a + 1) / 2));
  }
  c = new THREE.Vector3(0, 0, 1);
  for (e = 1; e <= b; e++)
    this.faces.push(new THREE.Face3(e, e + 1, 0, [c.clone(), c.clone(), c.clone()])), this.faceVertexUvs[0].push([f[e].clone(), f[e + 1].clone(), g.clone()]);
  this.computeFaceNormals();
  this.boundingSphere = new THREE.Sphere(new THREE.Vector3, a);
};
THREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;
THREE.CubeGeometry = function(a, b, c, d, e, f) {
  console.warn("THREE.CubeGeometry has been renamed to THREE.BoxGeometry.");
  return new THREE.BoxGeometry(a, b, c, d, e, f);
};
THREE.CylinderGeometry = function(a, b, c, d, e, f, g, h) {
  THREE.Geometry.call(this);
  this.type = "CylinderGeometry";
  this.parameters = {
    radiusTop: a,
    radiusBottom: b,
    height: c,
    radialSegments: d,
    heightSegments: e,
    openEnded: f,
    thetaStart: g,
    thetaLength: h
  };
  a = void 0 !== a ? a : 20;
  b = void 0 !== b ? b : 20;
  c = void 0 !== c ? c : 100;
  d = d || 8;
  e = e || 1;
  f = void 0 !== f ? f : !1;
  g = void 0 !== g ? g : 0;
  h = void 0 !== h ? h : 2 * Math.PI;
  var k = c / 2,
      n,
      p,
      q = [],
      m = [];
  for (p = 0; p <= e; p++) {
    var t = [],
        s = [],
        r = p / e,
        u = r * (b - a) + a;
    for (n = 0; n <= d; n++) {
      var v = n / d,
          y = new THREE.Vector3;
      y.x = u * Math.sin(v * h + g);
      y.y = -r * c + k;
      y.z = u * Math.cos(v * h + g);
      this.vertices.push(y);
      t.push(this.vertices.length - 1);
      s.push(new THREE.Vector2(v, 1 - r));
    }
    q.push(t);
    m.push(s);
  }
  c = (b - a) / c;
  for (n = 0; n < d; n++)
    for (0 !== a ? (g = this.vertices[q[0][n]].clone(), h = this.vertices[q[0][n + 1]].clone()) : (g = this.vertices[q[1][n]].clone(), h = this.vertices[q[1][n + 1]].clone()), g.setY(Math.sqrt(g.x * g.x + g.z * g.z) * c).normalize(), h.setY(Math.sqrt(h.x * h.x + h.z * h.z) * c).normalize(), p = 0; p < e; p++) {
      var t = q[p][n],
          s = q[p + 1][n],
          r = q[p + 1][n + 1],
          u = q[p][n + 1],
          v = g.clone(),
          y = g.clone(),
          C = h.clone(),
          x = h.clone(),
          F = m[p][n].clone(),
          z = m[p + 1][n].clone(),
          G = m[p + 1][n + 1].clone(),
          E = m[p][n + 1].clone();
      this.faces.push(new THREE.Face3(t, s, u, [v, y, x]));
      this.faceVertexUvs[0].push([F, z, E]);
      this.faces.push(new THREE.Face3(s, r, u, [y.clone(), C, x.clone()]));
      this.faceVertexUvs[0].push([z.clone(), G, E.clone()]);
    }
  if (!1 === f && 0 < a)
    for (this.vertices.push(new THREE.Vector3(0, k, 0)), n = 0; n < d; n++)
      t = q[0][n], s = q[0][n + 1], r = this.vertices.length - 1, v = new THREE.Vector3(0, 1, 0), y = new THREE.Vector3(0, 1, 0), C = new THREE.Vector3(0, 1, 0), F = m[0][n].clone(), z = m[0][n + 1].clone(), G = new THREE.Vector2(z.x, 0), this.faces.push(new THREE.Face3(t, s, r, [v, y, C])), this.faceVertexUvs[0].push([F, z, G]);
  if (!1 === f && 0 < b)
    for (this.vertices.push(new THREE.Vector3(0, -k, 0)), n = 0; n < d; n++)
      t = q[e][n + 1], s = q[e][n], r = this.vertices.length - 1, v = new THREE.Vector3(0, -1, 0), y = new THREE.Vector3(0, -1, 0), C = new THREE.Vector3(0, -1, 0), F = m[e][n + 1].clone(), z = m[e][n].clone(), G = new THREE.Vector2(z.x, 1), this.faces.push(new THREE.Face3(t, s, r, [v, y, C])), this.faceVertexUvs[0].push([F, z, G]);
  this.computeFaceNormals();
};
THREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;
THREE.ExtrudeGeometry = function(a, b) {
  "undefined" !== typeof a && (THREE.Geometry.call(this), this.type = "ExtrudeGeometry", a = a instanceof Array ? a : [a], this.addShapeList(a, b), this.computeFaceNormals());
};
THREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;
THREE.ExtrudeGeometry.prototype.addShapeList = function(a, b) {
  for (var c = a.length,
      d = 0; d < c; d++)
    this.addShape(a[d], b);
};
THREE.ExtrudeGeometry.prototype.addShape = function(a, b) {
  function c(a, b, c) {
    b || console.log("die");
    return b.clone().multiplyScalar(c).add(a);
  }
  function d(a, b, c) {
    var d = 1,
        d = a.x - b.x,
        e = a.y - b.y,
        f = c.x - a.x,
        g = c.y - a.y,
        h = d * d + e * e;
    if (1E-10 < Math.abs(d * g - e * f)) {
      var k = Math.sqrt(h),
          m = Math.sqrt(f * f + g * g),
          h = b.x - e / k;
      b = b.y + d / k;
      f = ((c.x - g / m - h) * g - (c.y + f / m - b) * f) / (d * g - e * f);
      c = h + d * f - a.x;
      a = b + e * f - a.y;
      d = c * c + a * a;
      if (2 >= d)
        return new THREE.Vector2(c, a);
      d = Math.sqrt(d / 2);
    } else
      a = !1, 1E-10 < d ? 1E-10 < f && (a = !0) : -1E-10 > d ? -1E-10 > f && (a = !0) : Math.sign(e) == Math.sign(g) && (a = !0), a ? (c = -e, a = d, d = Math.sqrt(h)) : (c = d, a = e, d = Math.sqrt(h / 2));
    return new THREE.Vector2(c / d, a / d);
  }
  function e(a, b) {
    var c,
        d;
    for (H = a.length; 0 <= --H; ) {
      c = H;
      d = H - 1;
      0 > d && (d = a.length - 1);
      for (var e = 0,
          f = t + 2 * p,
          e = 0; e < f; e++) {
        var g = ga * e,
            h = ga * (e + 1),
            k = b + c + g,
            g = b + d + g,
            m = b + d + h,
            h = b + c + h,
            k = k + U,
            g = g + U,
            m = m + U,
            h = h + U;
        A.faces.push(new THREE.Face3(k, g, h, null, null, y));
        A.faces.push(new THREE.Face3(g, m, h, null, null, y));
        k = C.generateSideWallUV(A, k, g, m, h);
        A.faceVertexUvs[0].push([k[0], k[1], k[3]]);
        A.faceVertexUvs[0].push([k[1], k[2], k[3]]);
      }
    }
  }
  function f(a, b, c) {
    A.vertices.push(new THREE.Vector3(a, b, c));
  }
  function g(a, b, c) {
    a += U;
    b += U;
    c += U;
    A.faces.push(new THREE.Face3(a, b, c, null, null, v));
    a = C.generateTopUV(A, a, b, c);
    A.faceVertexUvs[0].push(a);
  }
  var h = void 0 !== b.amount ? b.amount : 100,
      k = void 0 !== b.bevelThickness ? b.bevelThickness : 6,
      n = void 0 !== b.bevelSize ? b.bevelSize : k - 2,
      p = void 0 !== b.bevelSegments ? b.bevelSegments : 3,
      q = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0,
      m = void 0 !== b.curveSegments ? b.curveSegments : 12,
      t = void 0 !== b.steps ? b.steps : 1,
      s = b.extrudePath,
      r,
      u = !1,
      v = b.material,
      y = b.extrudeMaterial,
      C = void 0 !== b.UVGenerator ? b.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator,
      x,
      F,
      z,
      G;
  s && (r = s.getSpacedPoints(t), u = !0, q = !1, x = void 0 !== b.frames ? b.frames : new THREE.TubeGeometry.FrenetFrames(s, t, !1), F = new THREE.Vector3, z = new THREE.Vector3, G = new THREE.Vector3);
  q || (n = k = p = 0);
  var E,
      w,
      D,
      A = this,
      U = this.vertices.length,
      s = a.extractPoints(m),
      m = s.shape,
      M = s.holes;
  if (s = !THREE.Shape.Utils.isClockWise(m)) {
    m = m.reverse();
    w = 0;
    for (D = M.length; w < D; w++)
      E = M[w], THREE.Shape.Utils.isClockWise(E) && (M[w] = E.reverse());
    s = !1;
  }
  var K = THREE.Shape.Utils.triangulateShape(m, M),
      L = m;
  w = 0;
  for (D = M.length; w < D; w++)
    E = M[w], m = m.concat(E);
  var N,
      T,
      Q,
      W,
      O,
      ga = m.length,
      ea,
      xa = K.length,
      s = [],
      H = 0;
  Q = L.length;
  N = Q - 1;
  for (T = H + 1; H < Q; H++, N++, T++)
    N === Q && (N = 0), T === Q && (T = 0), s[H] = d(L[H], L[N], L[T]);
  var $a = [],
      qa,
      ya = s.concat();
  w = 0;
  for (D = M.length; w < D; w++) {
    E = M[w];
    qa = [];
    H = 0;
    Q = E.length;
    N = Q - 1;
    for (T = H + 1; H < Q; H++, N++, T++)
      N === Q && (N = 0), T === Q && (T = 0), qa[H] = d(E[H], E[N], E[T]);
    $a.push(qa);
    ya = ya.concat(qa);
  }
  for (N = 0; N < p; N++) {
    Q = N / p;
    W = k * (1 - Q);
    T = n * Math.sin(Q * Math.PI / 2);
    H = 0;
    for (Q = L.length; H < Q; H++)
      O = c(L[H], s[H], T), f(O.x, O.y, -W);
    w = 0;
    for (D = M.length; w < D; w++)
      for (E = M[w], qa = $a[w], H = 0, Q = E.length; H < Q; H++)
        O = c(E[H], qa[H], T), f(O.x, O.y, -W);
  }
  T = n;
  for (H = 0; H < ga; H++)
    O = q ? c(m[H], ya[H], T) : m[H], u ? (z.copy(x.normals[0]).multiplyScalar(O.x), F.copy(x.binormals[0]).multiplyScalar(O.y), G.copy(r[0]).add(z).add(F), f(G.x, G.y, G.z)) : f(O.x, O.y, 0);
  for (Q = 1; Q <= t; Q++)
    for (H = 0; H < ga; H++)
      O = q ? c(m[H], ya[H], T) : m[H], u ? (z.copy(x.normals[Q]).multiplyScalar(O.x), F.copy(x.binormals[Q]).multiplyScalar(O.y), G.copy(r[Q]).add(z).add(F), f(G.x, G.y, G.z)) : f(O.x, O.y, h / t * Q);
  for (N = p - 1; 0 <= N; N--) {
    Q = N / p;
    W = k * (1 - Q);
    T = n * Math.sin(Q * Math.PI / 2);
    H = 0;
    for (Q = L.length; H < Q; H++)
      O = c(L[H], s[H], T), f(O.x, O.y, h + W);
    w = 0;
    for (D = M.length; w < D; w++)
      for (E = M[w], qa = $a[w], H = 0, Q = E.length; H < Q; H++)
        O = c(E[H], qa[H], T), u ? f(O.x, O.y + r[t - 1].y, r[t - 1].x + W) : f(O.x, O.y, h + W);
  }
  (function() {
    if (q) {
      var a;
      a = 0 * ga;
      for (H = 0; H < xa; H++)
        ea = K[H], g(ea[2] + a, ea[1] + a, ea[0] + a);
      a = t + 2 * p;
      a *= ga;
      for (H = 0; H < xa; H++)
        ea = K[H], g(ea[0] + a, ea[1] + a, ea[2] + a);
    } else {
      for (H = 0; H < xa; H++)
        ea = K[H], g(ea[2], ea[1], ea[0]);
      for (H = 0; H < xa; H++)
        ea = K[H], g(ea[0] + ga * t, ea[1] + ga * t, ea[2] + ga * t);
    }
  })();
  (function() {
    var a = 0;
    e(L, a);
    a += L.length;
    w = 0;
    for (D = M.length; w < D; w++)
      E = M[w], e(E, a), a += E.length;
  })();
};
THREE.ExtrudeGeometry.WorldUVGenerator = {
  generateTopUV: function(a, b, c, d) {
    a = a.vertices;
    b = a[b];
    c = a[c];
    d = a[d];
    return [new THREE.Vector2(b.x, b.y), new THREE.Vector2(c.x, c.y), new THREE.Vector2(d.x, d.y)];
  },
  generateSideWallUV: function(a, b, c, d, e) {
    a = a.vertices;
    b = a[b];
    c = a[c];
    d = a[d];
    e = a[e];
    return .01 > Math.abs(b.y - c.y) ? [new THREE.Vector2(b.x, 1 - b.z), new THREE.Vector2(c.x, 1 - c.z), new THREE.Vector2(d.x, 1 - d.z), new THREE.Vector2(e.x, 1 - e.z)] : [new THREE.Vector2(b.y, 1 - b.z), new THREE.Vector2(c.y, 1 - c.z), new THREE.Vector2(d.y, 1 - d.z), new THREE.Vector2(e.y, 1 - e.z)];
  }
};
THREE.ShapeGeometry = function(a, b) {
  THREE.Geometry.call(this);
  this.type = "ShapeGeometry";
  !1 === a instanceof Array && (a = [a]);
  this.addShapeList(a, b);
  this.computeFaceNormals();
};
THREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;
THREE.ShapeGeometry.prototype.addShapeList = function(a, b) {
  for (var c = 0,
      d = a.length; c < d; c++)
    this.addShape(a[c], b);
  return this;
};
THREE.ShapeGeometry.prototype.addShape = function(a, b) {
  void 0 === b && (b = {});
  var c = b.material,
      d = void 0 === b.UVGenerator ? THREE.ExtrudeGeometry.WorldUVGenerator : b.UVGenerator,
      e,
      f,
      g,
      h = this.vertices.length;
  e = a.extractPoints(void 0 !== b.curveSegments ? b.curveSegments : 12);
  var k = e.shape,
      n = e.holes;
  if (!THREE.Shape.Utils.isClockWise(k))
    for (k = k.reverse(), e = 0, f = n.length; e < f; e++)
      g = n[e], THREE.Shape.Utils.isClockWise(g) && (n[e] = g.reverse());
  var p = THREE.Shape.Utils.triangulateShape(k, n);
  e = 0;
  for (f = n.length; e < f; e++)
    g = n[e], k = k.concat(g);
  n = k.length;
  f = p.length;
  for (e = 0; e < n; e++)
    g = k[e], this.vertices.push(new THREE.Vector3(g.x, g.y, 0));
  for (e = 0; e < f; e++)
    n = p[e], k = n[0] + h, g = n[1] + h, n = n[2] + h, this.faces.push(new THREE.Face3(k, g, n, null, null, c)), this.faceVertexUvs[0].push(d.generateTopUV(this, k, g, n));
};
THREE.LatheGeometry = function(a, b, c, d) {
  THREE.Geometry.call(this);
  this.type = "LatheGeometry";
  this.parameters = {
    points: a,
    segments: b,
    phiStart: c,
    phiLength: d
  };
  b = b || 12;
  c = c || 0;
  d = d || 2 * Math.PI;
  for (var e = 1 / (a.length - 1),
      f = 1 / b,
      g = 0,
      h = b; g <= h; g++)
    for (var k = c + g * f * d,
        n = Math.cos(k),
        p = Math.sin(k),
        k = 0,
        q = a.length; k < q; k++) {
      var m = a[k],
          t = new THREE.Vector3;
      t.x = n * m.x - p * m.y;
      t.y = p * m.x + n * m.y;
      t.z = m.z;
      this.vertices.push(t);
    }
  c = a.length;
  g = 0;
  for (h = b; g < h; g++)
    for (k = 0, q = a.length - 1; k < q; k++) {
      b = p = k + c * g;
      d = p + c;
      var n = p + 1 + c,
          p = p + 1,
          m = g * f,
          t = k * e,
          s = m + f,
          r = t + e;
      this.faces.push(new THREE.Face3(b, d, p));
      this.faceVertexUvs[0].push([new THREE.Vector2(m, t), new THREE.Vector2(s, t), new THREE.Vector2(m, r)]);
      this.faces.push(new THREE.Face3(d, n, p));
      this.faceVertexUvs[0].push([new THREE.Vector2(s, t), new THREE.Vector2(s, r), new THREE.Vector2(m, r)]);
    }
  this.mergeVertices();
  this.computeFaceNormals();
  this.computeVertexNormals();
};
THREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;
THREE.PlaneGeometry = function(a, b, c, d) {
  console.info("THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint.");
  THREE.Geometry.call(this);
  this.type = "PlaneGeometry";
  this.parameters = {
    width: a,
    height: b,
    widthSegments: c,
    heightSegments: d
  };
  this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a, b, c, d));
};
THREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;
THREE.PlaneBufferGeometry = function(a, b, c, d) {
  THREE.BufferGeometry.call(this);
  this.type = "PlaneBufferGeometry";
  this.parameters = {
    width: a,
    height: b,
    widthSegments: c,
    heightSegments: d
  };
  var e = a / 2,
      f = b / 2;
  c = c || 1;
  d = d || 1;
  var g = c + 1,
      h = d + 1,
      k = a / c,
      n = b / d;
  b = new Float32Array(g * h * 3);
  a = new Float32Array(g * h * 3);
  for (var p = new Float32Array(g * h * 2),
      q = 0,
      m = 0,
      t = 0; t < h; t++)
    for (var s = t * n - f,
        r = 0; r < g; r++)
      b[q] = r * k - e, b[q + 1] = -s, a[q + 2] = 1, p[m] = r / c, p[m + 1] = 1 - t / d, q += 3, m += 2;
  q = 0;
  e = new (65535 < b.length / 3 ? Uint32Array : Uint16Array)(c * d * 6);
  for (t = 0; t < d; t++)
    for (r = 0; r < c; r++)
      f = r + g * (t + 1), h = r + 1 + g * (t + 1), k = r + 1 + g * t, e[q] = r + g * t, e[q + 1] = f, e[q + 2] = k, e[q + 3] = f, e[q + 4] = h, e[q + 5] = k, q += 6;
  this.addAttribute("index", new THREE.BufferAttribute(e, 1));
  this.addAttribute("position", new THREE.BufferAttribute(b, 3));
  this.addAttribute("normal", new THREE.BufferAttribute(a, 3));
  this.addAttribute("uv", new THREE.BufferAttribute(p, 2));
};
THREE.PlaneBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);
THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;
THREE.RingGeometry = function(a, b, c, d, e, f) {
  THREE.Geometry.call(this);
  this.type = "RingGeometry";
  this.parameters = {
    innerRadius: a,
    outerRadius: b,
    thetaSegments: c,
    phiSegments: d,
    thetaStart: e,
    thetaLength: f
  };
  a = a || 0;
  b = b || 50;
  e = void 0 !== e ? e : 0;
  f = void 0 !== f ? f : 2 * Math.PI;
  c = void 0 !== c ? Math.max(3, c) : 8;
  d = void 0 !== d ? Math.max(1, d) : 8;
  var g,
      h = [],
      k = a,
      n = (b - a) / d;
  for (a = 0; a < d + 1; a++) {
    for (g = 0; g < c + 1; g++) {
      var p = new THREE.Vector3,
          q = e + g / c * f;
      p.x = k * Math.cos(q);
      p.y = k * Math.sin(q);
      this.vertices.push(p);
      h.push(new THREE.Vector2((p.x / b + 1) / 2, (p.y / b + 1) / 2));
    }
    k += n;
  }
  b = new THREE.Vector3(0, 0, 1);
  for (a = 0; a < d; a++)
    for (e = a * (c + 1), g = 0; g < c; g++)
      f = q = g + e, n = q + c + 1, p = q + c + 2, this.faces.push(new THREE.Face3(f, n, p, [b.clone(), b.clone(), b.clone()])), this.faceVertexUvs[0].push([h[f].clone(), h[n].clone(), h[p].clone()]), f = q, n = q + c + 2, p = q + 1, this.faces.push(new THREE.Face3(f, n, p, [b.clone(), b.clone(), b.clone()])), this.faceVertexUvs[0].push([h[f].clone(), h[n].clone(), h[p].clone()]);
  this.computeFaceNormals();
  this.boundingSphere = new THREE.Sphere(new THREE.Vector3, k);
};
THREE.RingGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;
THREE.SphereGeometry = function(a, b, c, d, e, f, g) {
  THREE.Geometry.call(this);
  this.type = "SphereGeometry";
  this.parameters = {
    radius: a,
    widthSegments: b,
    heightSegments: c,
    phiStart: d,
    phiLength: e,
    thetaStart: f,
    thetaLength: g
  };
  a = a || 50;
  b = Math.max(3, Math.floor(b) || 8);
  c = Math.max(2, Math.floor(c) || 6);
  d = void 0 !== d ? d : 0;
  e = void 0 !== e ? e : 2 * Math.PI;
  f = void 0 !== f ? f : 0;
  g = void 0 !== g ? g : Math.PI;
  var h,
      k,
      n = [],
      p = [];
  for (k = 0; k <= c; k++) {
    var q = [],
        m = [];
    for (h = 0; h <= b; h++) {
      var t = h / b,
          s = k / c,
          r = new THREE.Vector3;
      r.x = -a * Math.cos(d + t * e) * Math.sin(f + s * g);
      r.y = a * Math.cos(f + s * g);
      r.z = a * Math.sin(d + t * e) * Math.sin(f + s * g);
      this.vertices.push(r);
      q.push(this.vertices.length - 1);
      m.push(new THREE.Vector2(t, 1 - s));
    }
    n.push(q);
    p.push(m);
  }
  for (k = 0; k < c; k++)
    for (h = 0; h < b; h++) {
      d = n[k][h + 1];
      e = n[k][h];
      f = n[k + 1][h];
      g = n[k + 1][h + 1];
      var q = this.vertices[d].clone().normalize(),
          m = this.vertices[e].clone().normalize(),
          t = this.vertices[f].clone().normalize(),
          s = this.vertices[g].clone().normalize(),
          r = p[k][h + 1].clone(),
          u = p[k][h].clone(),
          v = p[k + 1][h].clone(),
          y = p[k + 1][h + 1].clone();
      Math.abs(this.vertices[d].y) === a ? (r.x = (r.x + u.x) / 2, this.faces.push(new THREE.Face3(d, f, g, [q, t, s])), this.faceVertexUvs[0].push([r, v, y])) : Math.abs(this.vertices[f].y) === a ? (v.x = (v.x + y.x) / 2, this.faces.push(new THREE.Face3(d, e, f, [q, m, t])), this.faceVertexUvs[0].push([r, u, v])) : (this.faces.push(new THREE.Face3(d, e, g, [q, m, s])), this.faceVertexUvs[0].push([r, u, y]), this.faces.push(new THREE.Face3(e, f, g, [m.clone(), t, s.clone()])), this.faceVertexUvs[0].push([u.clone(), v, y.clone()]));
    }
  this.computeFaceNormals();
  this.boundingSphere = new THREE.Sphere(new THREE.Vector3, a);
};
THREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;
THREE.TextGeometry = function(a, b) {
  b = b || {};
  var c = THREE.FontUtils.generateShapes(a, b);
  b.amount = void 0 !== b.height ? b.height : 50;
  void 0 === b.bevelThickness && (b.bevelThickness = 10);
  void 0 === b.bevelSize && (b.bevelSize = 8);
  void 0 === b.bevelEnabled && (b.bevelEnabled = !1);
  THREE.ExtrudeGeometry.call(this, c, b);
  this.type = "TextGeometry";
};
THREE.TextGeometry.prototype = Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TextGeometry.prototype.constructor = THREE.TextGeometry;
THREE.TorusGeometry = function(a, b, c, d, e) {
  THREE.Geometry.call(this);
  this.type = "TorusGeometry";
  this.parameters = {
    radius: a,
    tube: b,
    radialSegments: c,
    tubularSegments: d,
    arc: e
  };
  a = a || 100;
  b = b || 40;
  c = c || 8;
  d = d || 6;
  e = e || 2 * Math.PI;
  for (var f = new THREE.Vector3,
      g = [],
      h = [],
      k = 0; k <= c; k++)
    for (var n = 0; n <= d; n++) {
      var p = n / d * e,
          q = k / c * Math.PI * 2;
      f.x = a * Math.cos(p);
      f.y = a * Math.sin(p);
      var m = new THREE.Vector3;
      m.x = (a + b * Math.cos(q)) * Math.cos(p);
      m.y = (a + b * Math.cos(q)) * Math.sin(p);
      m.z = b * Math.sin(q);
      this.vertices.push(m);
      g.push(new THREE.Vector2(n / d, k / c));
      h.push(m.clone().sub(f).normalize());
    }
  for (k = 1; k <= c; k++)
    for (n = 1; n <= d; n++)
      a = (d + 1) * k + n - 1, b = (d + 1) * (k - 1) + n - 1, e = (d + 1) * (k - 1) + n, f = (d + 1) * k + n, p = new THREE.Face3(a, b, f, [h[a].clone(), h[b].clone(), h[f].clone()]), this.faces.push(p), this.faceVertexUvs[0].push([g[a].clone(), g[b].clone(), g[f].clone()]), p = new THREE.Face3(b, e, f, [h[b].clone(), h[e].clone(), h[f].clone()]), this.faces.push(p), this.faceVertexUvs[0].push([g[b].clone(), g[e].clone(), g[f].clone()]);
  this.computeFaceNormals();
};
THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;
THREE.TorusKnotGeometry = function(a, b, c, d, e, f, g) {
  function h(a, b, c, d, e) {
    var f = Math.cos(a),
        g = Math.sin(a);
    a *= b / c;
    b = Math.cos(a);
    f *= d * (2 + b) * .5;
    g = d * (2 + b) * g * .5;
    d = e * d * Math.sin(a) * .5;
    return new THREE.Vector3(f, g, d);
  }
  THREE.Geometry.call(this);
  this.type = "TorusKnotGeometry";
  this.parameters = {
    radius: a,
    tube: b,
    radialSegments: c,
    tubularSegments: d,
    p: e,
    q: f,
    heightScale: g
  };
  a = a || 100;
  b = b || 40;
  c = c || 64;
  d = d || 8;
  e = e || 2;
  f = f || 3;
  g = g || 1;
  for (var k = Array(c),
      n = new THREE.Vector3,
      p = new THREE.Vector3,
      q = new THREE.Vector3,
      m = 0; m < c; ++m) {
    k[m] = Array(d);
    var t = m / c * 2 * e * Math.PI,
        s = h(t, f, e, a, g),
        t = h(t + .01, f, e, a, g);
    n.subVectors(t, s);
    p.addVectors(t, s);
    q.crossVectors(n, p);
    p.crossVectors(q, n);
    q.normalize();
    p.normalize();
    for (t = 0; t < d; ++t) {
      var r = t / d * 2 * Math.PI,
          u = -b * Math.cos(r),
          r = b * Math.sin(r),
          v = new THREE.Vector3;
      v.x = s.x + u * p.x + r * q.x;
      v.y = s.y + u * p.y + r * q.y;
      v.z = s.z + u * p.z + r * q.z;
      k[m][t] = this.vertices.push(v) - 1;
    }
  }
  for (m = 0; m < c; ++m)
    for (t = 0; t < d; ++t)
      e = (m + 1) % c, f = (t + 1) % d, a = k[m][t], b = k[e][t], e = k[e][f], f = k[m][f], g = new THREE.Vector2(m / c, t / d), n = new THREE.Vector2((m + 1) / c, t / d), p = new THREE.Vector2((m + 1) / c, (t + 1) / d), q = new THREE.Vector2(m / c, (t + 1) / d), this.faces.push(new THREE.Face3(a, b, f)), this.faceVertexUvs[0].push([g, n, q]), this.faces.push(new THREE.Face3(b, e, f)), this.faceVertexUvs[0].push([n.clone(), p, q.clone()]);
  this.computeFaceNormals();
  this.computeVertexNormals();
};
THREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;
THREE.TubeGeometry = function(a, b, c, d, e, f) {
  THREE.Geometry.call(this);
  this.type = "TubeGeometry";
  this.parameters = {
    path: a,
    segments: b,
    radius: c,
    radialSegments: d,
    closed: e
  };
  b = b || 64;
  c = c || 1;
  d = d || 8;
  e = e || !1;
  f = f || THREE.TubeGeometry.NoTaper;
  var g = [],
      h,
      k,
      n = b + 1,
      p,
      q,
      m,
      t,
      s,
      r = new THREE.Vector3,
      u,
      v,
      y;
  u = new THREE.TubeGeometry.FrenetFrames(a, b, e);
  v = u.normals;
  y = u.binormals;
  this.tangents = u.tangents;
  this.normals = v;
  this.binormals = y;
  for (u = 0; u < n; u++)
    for (g[u] = [], p = u / (n - 1), s = a.getPointAt(p), h = v[u], k = y[u], m = c * f(p), p = 0; p < d; p++)
      q = p / d * 2 * Math.PI, t = -m * Math.cos(q), q = m * Math.sin(q), r.copy(s), r.x += t * h.x + q * k.x, r.y += t * h.y + q * k.y, r.z += t * h.z + q * k.z, g[u][p] = this.vertices.push(new THREE.Vector3(r.x, r.y, r.z)) - 1;
  for (u = 0; u < b; u++)
    for (p = 0; p < d; p++)
      f = e ? (u + 1) % b : u + 1, n = (p + 1) % d, a = g[u][p], c = g[f][p], f = g[f][n], n = g[u][n], r = new THREE.Vector2(u / b, p / d), v = new THREE.Vector2((u + 1) / b, p / d), y = new THREE.Vector2((u + 1) / b, (p + 1) / d), h = new THREE.Vector2(u / b, (p + 1) / d), this.faces.push(new THREE.Face3(a, c, n)), this.faceVertexUvs[0].push([r, v, h]), this.faces.push(new THREE.Face3(c, f, n)), this.faceVertexUvs[0].push([v.clone(), y, h.clone()]);
  this.computeFaceNormals();
  this.computeVertexNormals();
};
THREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;
THREE.TubeGeometry.NoTaper = function(a) {
  return 1;
};
THREE.TubeGeometry.SinusoidalTaper = function(a) {
  return Math.sin(Math.PI * a);
};
THREE.TubeGeometry.FrenetFrames = function(a, b, c) {
  new THREE.Vector3;
  var d = new THREE.Vector3;
  new THREE.Vector3;
  var e = [],
      f = [],
      g = [],
      h = new THREE.Vector3,
      k = new THREE.Matrix4;
  b += 1;
  var n,
      p,
      q;
  this.tangents = e;
  this.normals = f;
  this.binormals = g;
  for (n = 0; n < b; n++)
    p = n / (b - 1), e[n] = a.getTangentAt(p), e[n].normalize();
  f[0] = new THREE.Vector3;
  g[0] = new THREE.Vector3;
  a = Number.MAX_VALUE;
  n = Math.abs(e[0].x);
  p = Math.abs(e[0].y);
  q = Math.abs(e[0].z);
  n <= a && (a = n, d.set(1, 0, 0));
  p <= a && (a = p, d.set(0, 1, 0));
  q <= a && d.set(0, 0, 1);
  h.crossVectors(e[0], d).normalize();
  f[0].crossVectors(e[0], h);
  g[0].crossVectors(e[0], f[0]);
  for (n = 1; n < b; n++)
    f[n] = f[n - 1].clone(), g[n] = g[n - 1].clone(), h.crossVectors(e[n - 1], e[n]), 1E-4 < h.length() && (h.normalize(), d = Math.acos(THREE.Math.clamp(e[n - 1].dot(e[n]), -1, 1)), f[n].applyMatrix4(k.makeRotationAxis(h, d))), g[n].crossVectors(e[n], f[n]);
  if (c)
    for (d = Math.acos(THREE.Math.clamp(f[0].dot(f[b - 1]), -1, 1)), d /= b - 1, 0 < e[0].dot(h.crossVectors(f[0], f[b - 1])) && (d = -d), n = 1; n < b; n++)
      f[n].applyMatrix4(k.makeRotationAxis(e[n], d * n)), g[n].crossVectors(e[n], f[n]);
};
THREE.PolyhedronGeometry = function(a, b, c, d) {
  function e(a) {
    var b = a.normalize().clone();
    b.index = k.vertices.push(b) - 1;
    var c = Math.atan2(a.z, -a.x) / 2 / Math.PI + .5;
    a = Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + .5;
    b.uv = new THREE.Vector2(c, 1 - a);
    return b;
  }
  function f(a, b, c) {
    var d = new THREE.Face3(a.index, b.index, c.index, [a.clone(), b.clone(), c.clone()]);
    k.faces.push(d);
    u.copy(a).add(b).add(c).divideScalar(3);
    d = Math.atan2(u.z, -u.x);
    k.faceVertexUvs[0].push([h(a.uv, a, d), h(b.uv, b, d), h(c.uv, c, d)]);
  }
  function g(a, b) {
    var c = Math.pow(2, b);
    Math.pow(4, b);
    for (var d = e(k.vertices[a.a]),
        g = e(k.vertices[a.b]),
        h = e(k.vertices[a.c]),
        m = [],
        n = 0; n <= c; n++) {
      m[n] = [];
      for (var p = e(d.clone().lerp(h, n / c)),
          q = e(g.clone().lerp(h, n / c)),
          s = c - n,
          r = 0; r <= s; r++)
        m[n][r] = 0 == r && n == c ? p : e(p.clone().lerp(q, r / s));
    }
    for (n = 0; n < c; n++)
      for (r = 0; r < 2 * (c - n) - 1; r++)
        d = Math.floor(r / 2), 0 == r % 2 ? f(m[n][d + 1], m[n + 1][d], m[n][d]) : f(m[n][d + 1], m[n + 1][d + 1], m[n + 1][d]);
  }
  function h(a, b, c) {
    0 > c && 1 === a.x && (a = new THREE.Vector2(a.x - 1, a.y));
    0 === b.x && 0 === b.z && (a = new THREE.Vector2(c / 2 / Math.PI + .5, a.y));
    return a.clone();
  }
  THREE.Geometry.call(this);
  this.type = "PolyhedronGeometry";
  this.parameters = {
    vertices: a,
    indices: b,
    radius: c,
    detail: d
  };
  c = c || 1;
  d = d || 0;
  for (var k = this,
      n = 0,
      p = a.length; n < p; n += 3)
    e(new THREE.Vector3(a[n], a[n + 1], a[n + 2]));
  a = this.vertices;
  for (var q = [],
      m = n = 0,
      p = b.length; n < p; n += 3, m++) {
    var t = a[b[n]],
        s = a[b[n + 1]],
        r = a[b[n + 2]];
    q[m] = new THREE.Face3(t.index, s.index, r.index, [t.clone(), s.clone(), r.clone()]);
  }
  for (var u = new THREE.Vector3,
      n = 0,
      p = q.length; n < p; n++)
    g(q[n], d);
  n = 0;
  for (p = this.faceVertexUvs[0].length; n < p; n++)
    b = this.faceVertexUvs[0][n], d = b[0].x, a = b[1].x, q = b[2].x, m = Math.max(d, Math.max(a, q)), t = Math.min(d, Math.min(a, q)), .9 < m && .1 > t && (.2 > d && (b[0].x += 1), .2 > a && (b[1].x += 1), .2 > q && (b[2].x += 1));
  n = 0;
  for (p = this.vertices.length; n < p; n++)
    this.vertices[n].multiplyScalar(c);
  this.mergeVertices();
  this.computeFaceNormals();
  this.boundingSphere = new THREE.Sphere(new THREE.Vector3, c);
};
THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;
THREE.DodecahedronGeometry = function(a, b) {
  this.parameters = {
    radius: a,
    detail: b
  };
  var c = (1 + Math.sqrt(5)) / 2,
      d = 1 / c;
  THREE.PolyhedronGeometry.call(this, [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, 0, -c, 0, -d, c, 0, -d, -c, 0, d, c, 0, d], [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], a, b);
};
THREE.DodecahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;
THREE.IcosahedronGeometry = function(a, b) {
  var c = (1 + Math.sqrt(5)) / 2;
  THREE.PolyhedronGeometry.call(this, [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1], [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], a, b);
  this.type = "IcosahedronGeometry";
  this.parameters = {
    radius: a,
    detail: b
  };
};
THREE.IcosahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;
THREE.OctahedronGeometry = function(a, b) {
  this.parameters = {
    radius: a,
    detail: b
  };
  THREE.PolyhedronGeometry.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], a, b);
  this.type = "OctahedronGeometry";
  this.parameters = {
    radius: a,
    detail: b
  };
};
THREE.OctahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;
THREE.TetrahedronGeometry = function(a, b) {
  THREE.PolyhedronGeometry.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], a, b);
  this.type = "TetrahedronGeometry";
  this.parameters = {
    radius: a,
    detail: b
  };
};
THREE.TetrahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;
THREE.ParametricGeometry = function(a, b, c) {
  THREE.Geometry.call(this);
  this.type = "ParametricGeometry";
  this.parameters = {
    func: a,
    slices: b,
    stacks: c
  };
  var d = this.vertices,
      e = this.faces,
      f = this.faceVertexUvs[0],
      g,
      h,
      k,
      n,
      p = b + 1;
  for (g = 0; g <= c; g++)
    for (n = g / c, h = 0; h <= b; h++)
      k = h / b, k = a(k, n), d.push(k);
  var q,
      m,
      t,
      s;
  for (g = 0; g < c; g++)
    for (h = 0; h < b; h++)
      a = g * p + h, d = g * p + h + 1, n = (g + 1) * p + h + 1, k = (g + 1) * p + h, q = new THREE.Vector2(h / b, g / c), m = new THREE.Vector2((h + 1) / b, g / c), t = new THREE.Vector2((h + 1) / b, (g + 1) / c), s = new THREE.Vector2(h / b, (g + 1) / c), e.push(new THREE.Face3(a, d, k)), f.push([q, m, s]), e.push(new THREE.Face3(d, n, k)), f.push([m.clone(), t, s.clone()]);
  this.computeFaceNormals();
  this.computeVertexNormals();
};
THREE.ParametricGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;
THREE.AxisHelper = function(a) {
  a = a || 1;
  var b = new Float32Array([0, 0, 0, a, 0, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, a]),
      c = new Float32Array([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1]);
  a = new THREE.BufferGeometry;
  a.addAttribute("position", new THREE.BufferAttribute(b, 3));
  a.addAttribute("color", new THREE.BufferAttribute(c, 3));
  b = new THREE.LineBasicMaterial({vertexColors: THREE.VertexColors});
  THREE.Line.call(this, a, b, THREE.LinePieces);
};
THREE.AxisHelper.prototype = Object.create(THREE.Line.prototype);
THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;
THREE.ArrowHelper = function() {
  var a = new THREE.Geometry;
  a.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));
  var b = new THREE.CylinderGeometry(0, .5, 1, 5, 1);
  b.applyMatrix((new THREE.Matrix4).makeTranslation(0, -.5, 0));
  return function(c, d, e, f, g, h) {
    THREE.Object3D.call(this);
    void 0 === f && (f = 16776960);
    void 0 === e && (e = 1);
    void 0 === g && (g = .2 * e);
    void 0 === h && (h = .2 * g);
    this.position.copy(d);
    this.line = new THREE.Line(a, new THREE.LineBasicMaterial({color: f}));
    this.line.matrixAutoUpdate = !1;
    this.add(this.line);
    this.cone = new THREE.Mesh(b, new THREE.MeshBasicMaterial({color: f}));
    this.cone.matrixAutoUpdate = !1;
    this.add(this.cone);
    this.setDirection(c);
    this.setLength(e, g, h);
  };
}();
THREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;
THREE.ArrowHelper.prototype.setDirection = function() {
  var a = new THREE.Vector3,
      b;
  return function(c) {
    .99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), b = Math.acos(c.y), this.quaternion.setFromAxisAngle(a, b));
  };
}();
THREE.ArrowHelper.prototype.setLength = function(a, b, c) {
  void 0 === b && (b = .2 * a);
  void 0 === c && (c = .2 * b);
  this.line.scale.set(1, a - b, 1);
  this.line.updateMatrix();
  this.cone.scale.set(c, b, c);
  this.cone.position.y = a;
  this.cone.updateMatrix();
};
THREE.ArrowHelper.prototype.setColor = function(a) {
  this.line.material.color.set(a);
  this.cone.material.color.set(a);
};
THREE.BoxHelper = function(a) {
  var b = new THREE.BufferGeometry;
  b.addAttribute("position", new THREE.BufferAttribute(new Float32Array(72), 3));
  THREE.Line.call(this, b, new THREE.LineBasicMaterial({color: 16776960}), THREE.LinePieces);
  void 0 !== a && this.update(a);
};
THREE.BoxHelper.prototype = Object.create(THREE.Line.prototype);
THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;
THREE.BoxHelper.prototype.update = function(a) {
  var b = a.geometry;
  null === b.boundingBox && b.computeBoundingBox();
  var c = b.boundingBox.min,
      b = b.boundingBox.max,
      d = this.geometry.attributes.position.array;
  d[0] = b.x;
  d[1] = b.y;
  d[2] = b.z;
  d[3] = c.x;
  d[4] = b.y;
  d[5] = b.z;
  d[6] = c.x;
  d[7] = b.y;
  d[8] = b.z;
  d[9] = c.x;
  d[10] = c.y;
  d[11] = b.z;
  d[12] = c.x;
  d[13] = c.y;
  d[14] = b.z;
  d[15] = b.x;
  d[16] = c.y;
  d[17] = b.z;
  d[18] = b.x;
  d[19] = c.y;
  d[20] = b.z;
  d[21] = b.x;
  d[22] = b.y;
  d[23] = b.z;
  d[24] = b.x;
  d[25] = b.y;
  d[26] = c.z;
  d[27] = c.x;
  d[28] = b.y;
  d[29] = c.z;
  d[30] = c.x;
  d[31] = b.y;
  d[32] = c.z;
  d[33] = c.x;
  d[34] = c.y;
  d[35] = c.z;
  d[36] = c.x;
  d[37] = c.y;
  d[38] = c.z;
  d[39] = b.x;
  d[40] = c.y;
  d[41] = c.z;
  d[42] = b.x;
  d[43] = c.y;
  d[44] = c.z;
  d[45] = b.x;
  d[46] = b.y;
  d[47] = c.z;
  d[48] = b.x;
  d[49] = b.y;
  d[50] = b.z;
  d[51] = b.x;
  d[52] = b.y;
  d[53] = c.z;
  d[54] = c.x;
  d[55] = b.y;
  d[56] = b.z;
  d[57] = c.x;
  d[58] = b.y;
  d[59] = c.z;
  d[60] = c.x;
  d[61] = c.y;
  d[62] = b.z;
  d[63] = c.x;
  d[64] = c.y;
  d[65] = c.z;
  d[66] = b.x;
  d[67] = c.y;
  d[68] = b.z;
  d[69] = b.x;
  d[70] = c.y;
  d[71] = c.z;
  this.geometry.attributes.position.needsUpdate = !0;
  this.geometry.computeBoundingSphere();
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
};
THREE.BoundingBoxHelper = function(a, b) {
  var c = void 0 !== b ? b : 8947848;
  this.object = a;
  this.box = new THREE.Box3;
  THREE.Mesh.call(this, new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({
    color: c,
    wireframe: !0
  }));
};
THREE.BoundingBoxHelper.prototype = Object.create(THREE.Mesh.prototype);
THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;
THREE.BoundingBoxHelper.prototype.update = function() {
  this.box.setFromObject(this.object);
  this.box.size(this.scale);
  this.box.center(this.position);
};
THREE.CameraHelper = function(a) {
  function b(a, b, d) {
    c(a, d);
    c(b, d);
  }
  function c(a, b) {
    d.vertices.push(new THREE.Vector3);
    d.colors.push(new THREE.Color(b));
    void 0 === f[a] && (f[a] = []);
    f[a].push(d.vertices.length - 1);
  }
  var d = new THREE.Geometry,
      e = new THREE.LineBasicMaterial({
        color: 16777215,
        vertexColors: THREE.FaceColors
      }),
      f = {};
  b("n1", "n2", 16755200);
  b("n2", "n4", 16755200);
  b("n4", "n3", 16755200);
  b("n3", "n1", 16755200);
  b("f1", "f2", 16755200);
  b("f2", "f4", 16755200);
  b("f4", "f3", 16755200);
  b("f3", "f1", 16755200);
  b("n1", "f1", 16755200);
  b("n2", "f2", 16755200);
  b("n3", "f3", 16755200);
  b("n4", "f4", 16755200);
  b("p", "n1", 16711680);
  b("p", "n2", 16711680);
  b("p", "n3", 16711680);
  b("p", "n4", 16711680);
  b("u1", "u2", 43775);
  b("u2", "u3", 43775);
  b("u3", "u1", 43775);
  b("c", "t", 16777215);
  b("p", "c", 3355443);
  b("cn1", "cn2", 3355443);
  b("cn3", "cn4", 3355443);
  b("cf1", "cf2", 3355443);
  b("cf3", "cf4", 3355443);
  THREE.Line.call(this, d, e, THREE.LinePieces);
  this.camera = a;
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
  this.pointMap = f;
  this.update();
};
THREE.CameraHelper.prototype = Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;
THREE.CameraHelper.prototype.update = function() {
  var a,
      b,
      c = new THREE.Vector3,
      d = new THREE.Camera,
      e = function(e, g, h, k) {
        c.set(g, h, k).unproject(d);
        e = b[e];
        if (void 0 !== e)
          for (g = 0, h = e.length; g < h; g++)
            a.vertices[e[g]].copy(c);
      };
  return function() {
    a = this.geometry;
    b = this.pointMap;
    d.projectionMatrix.copy(this.camera.projectionMatrix);
    e("c", 0, 0, -1);
    e("t", 0, 0, 1);
    e("n1", -1, -1, -1);
    e("n2", 1, -1, -1);
    e("n3", -1, 1, -1);
    e("n4", 1, 1, -1);
    e("f1", -1, -1, 1);
    e("f2", 1, -1, 1);
    e("f3", -1, 1, 1);
    e("f4", 1, 1, 1);
    e("u1", .7, 1.1, -1);
    e("u2", -.7, 1.1, -1);
    e("u3", 0, 2, -1);
    e("cf1", -1, 0, 1);
    e("cf2", 1, 0, 1);
    e("cf3", 0, -1, 1);
    e("cf4", 0, 1, 1);
    e("cn1", -1, 0, -1);
    e("cn2", 1, 0, -1);
    e("cn3", 0, -1, -1);
    e("cn4", 0, 1, -1);
    a.verticesNeedUpdate = !0;
  };
}();
THREE.DirectionalLightHelper = function(a, b) {
  THREE.Object3D.call(this);
  this.light = a;
  this.light.updateMatrixWorld();
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
  b = b || 1;
  var c = new THREE.Geometry;
  c.vertices.push(new THREE.Vector3(-b, b, 0), new THREE.Vector3(b, b, 0), new THREE.Vector3(b, -b, 0), new THREE.Vector3(-b, -b, 0), new THREE.Vector3(-b, b, 0));
  var d = new THREE.LineBasicMaterial({fog: !1});
  d.color.copy(this.light.color).multiplyScalar(this.light.intensity);
  this.lightPlane = new THREE.Line(c, d);
  this.add(this.lightPlane);
  c = new THREE.Geometry;
  c.vertices.push(new THREE.Vector3, new THREE.Vector3);
  d = new THREE.LineBasicMaterial({fog: !1});
  d.color.copy(this.light.color).multiplyScalar(this.light.intensity);
  this.targetLine = new THREE.Line(c, d);
  this.add(this.targetLine);
  this.update();
};
THREE.DirectionalLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;
THREE.DirectionalLightHelper.prototype.dispose = function() {
  this.lightPlane.geometry.dispose();
  this.lightPlane.material.dispose();
  this.targetLine.geometry.dispose();
  this.targetLine.material.dispose();
};
THREE.DirectionalLightHelper.prototype.update = function() {
  var a = new THREE.Vector3,
      b = new THREE.Vector3,
      c = new THREE.Vector3;
  return function() {
    a.setFromMatrixPosition(this.light.matrixWorld);
    b.setFromMatrixPosition(this.light.target.matrixWorld);
    c.subVectors(b, a);
    this.lightPlane.lookAt(c);
    this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    this.targetLine.geometry.vertices[1].copy(c);
    this.targetLine.geometry.verticesNeedUpdate = !0;
    this.targetLine.material.color.copy(this.lightPlane.material.color);
  };
}();
THREE.EdgesHelper = function(a, b) {
  var c = void 0 !== b ? b : 16777215,
      d = [0, 0],
      e = {},
      f = function(a, b) {
        return a - b;
      },
      g = ["a", "b", "c"],
      h = new THREE.BufferGeometry,
      k = a.geometry.clone();
  k.mergeVertices();
  k.computeFaceNormals();
  for (var n = k.vertices,
      k = k.faces,
      p = 0,
      q = 0,
      m = k.length; q < m; q++)
    for (var t = k[q],
        s = 0; 3 > s; s++) {
      d[0] = t[g[s]];
      d[1] = t[g[(s + 1) % 3]];
      d.sort(f);
      var r = d.toString();
      void 0 === e[r] ? (e[r] = {
        vert1: d[0],
        vert2: d[1],
        face1: q,
        face2: void 0
      }, p++) : e[r].face2 = q;
    }
  d = new Float32Array(6 * p);
  f = 0;
  for (r in e)
    if (g = e[r], void 0 === g.face2 || .9999 > k[g.face1].normal.dot(k[g.face2].normal))
      p = n[g.vert1], d[f++] = p.x, d[f++] = p.y, d[f++] = p.z, p = n[g.vert2], d[f++] = p.x, d[f++] = p.y, d[f++] = p.z;
  h.addAttribute("position", new THREE.BufferAttribute(d, 3));
  THREE.Line.call(this, h, new THREE.LineBasicMaterial({color: c}), THREE.LinePieces);
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
};
THREE.EdgesHelper.prototype = Object.create(THREE.Line.prototype);
THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;
THREE.FaceNormalsHelper = function(a, b, c, d) {
  this.object = a;
  this.size = void 0 !== b ? b : 1;
  a = void 0 !== c ? c : 16776960;
  d = void 0 !== d ? d : 1;
  b = new THREE.Geometry;
  c = 0;
  for (var e = this.object.geometry.faces.length; c < e; c++)
    b.vertices.push(new THREE.Vector3, new THREE.Vector3);
  THREE.Line.call(this, b, new THREE.LineBasicMaterial({
    color: a,
    linewidth: d
  }), THREE.LinePieces);
  this.matrixAutoUpdate = !1;
  this.normalMatrix = new THREE.Matrix3;
  this.update();
};
THREE.FaceNormalsHelper.prototype = Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;
THREE.FaceNormalsHelper.prototype.update = function() {
  var a = this.geometry.vertices,
      b = this.object,
      c = b.geometry.vertices,
      d = b.geometry.faces,
      e = b.matrixWorld;
  b.updateMatrixWorld(!0);
  this.normalMatrix.getNormalMatrix(e);
  for (var f = b = 0,
      g = d.length; b < g; b++, f += 2) {
    var h = d[b];
    a[f].copy(c[h.a]).add(c[h.b]).add(c[h.c]).divideScalar(3).applyMatrix4(e);
    a[f + 1].copy(h.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size).add(a[f]);
  }
  this.geometry.verticesNeedUpdate = !0;
  return this;
};
THREE.GridHelper = function(a, b) {
  var c = new THREE.Geometry,
      d = new THREE.LineBasicMaterial({vertexColors: THREE.VertexColors});
  this.color1 = new THREE.Color(4473924);
  this.color2 = new THREE.Color(8947848);
  for (var e = -a; e <= a; e += b) {
    c.vertices.push(new THREE.Vector3(-a, 0, e), new THREE.Vector3(a, 0, e), new THREE.Vector3(e, 0, -a), new THREE.Vector3(e, 0, a));
    var f = 0 === e ? this.color1 : this.color2;
    c.colors.push(f, f, f, f);
  }
  THREE.Line.call(this, c, d, THREE.LinePieces);
};
THREE.GridHelper.prototype = Object.create(THREE.Line.prototype);
THREE.GridHelper.prototype.constructor = THREE.GridHelper;
THREE.GridHelper.prototype.setColors = function(a, b) {
  this.color1.set(a);
  this.color2.set(b);
  this.geometry.colorsNeedUpdate = !0;
};
THREE.HemisphereLightHelper = function(a, b, c, d) {
  THREE.Object3D.call(this);
  this.light = a;
  this.light.updateMatrixWorld();
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
  this.colors = [new THREE.Color, new THREE.Color];
  a = new THREE.SphereGeometry(b, 4, 2);
  a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI / 2));
  for (b = 0; 8 > b; b++)
    a.faces[b].color = this.colors[4 > b ? 0 : 1];
  b = new THREE.MeshBasicMaterial({
    vertexColors: THREE.FaceColors,
    wireframe: !0
  });
  this.lightSphere = new THREE.Mesh(a, b);
  this.add(this.lightSphere);
  this.update();
};
THREE.HemisphereLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;
THREE.HemisphereLightHelper.prototype.dispose = function() {
  this.lightSphere.geometry.dispose();
  this.lightSphere.material.dispose();
};
THREE.HemisphereLightHelper.prototype.update = function() {
  var a = new THREE.Vector3;
  return function() {
    this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);
    this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);
    this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());
    this.lightSphere.geometry.colorsNeedUpdate = !0;
  };
}();
THREE.PointLightHelper = function(a, b) {
  this.light = a;
  this.light.updateMatrixWorld();
  var c = new THREE.SphereGeometry(b, 4, 2),
      d = new THREE.MeshBasicMaterial({
        wireframe: !0,
        fog: !1
      });
  d.color.copy(this.light.color).multiplyScalar(this.light.intensity);
  THREE.Mesh.call(this, c, d);
  this.matrix = this.light.matrixWorld;
  this.matrixAutoUpdate = !1;
};
THREE.PointLightHelper.prototype = Object.create(THREE.Mesh.prototype);
THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;
THREE.PointLightHelper.prototype.dispose = function() {
  this.geometry.dispose();
  this.material.dispose();
};
THREE.PointLightHelper.prototype.update = function() {
  this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
};
THREE.SkeletonHelper = function(a) {
  this.bones = this.getBoneList(a);
  for (var b = new THREE.Geometry,
      c = 0; c < this.bones.length; c++)
    this.bones[c].parent instanceof THREE.Bone && (b.vertices.push(new THREE.Vector3), b.vertices.push(new THREE.Vector3), b.colors.push(new THREE.Color(0, 0, 1)), b.colors.push(new THREE.Color(0, 1, 0)));
  c = new THREE.LineBasicMaterial({
    vertexColors: THREE.VertexColors,
    depthTest: !1,
    depthWrite: !1,
    transparent: !0
  });
  THREE.Line.call(this, b, c, THREE.LinePieces);
  this.root = a;
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
  this.update();
};
THREE.SkeletonHelper.prototype = Object.create(THREE.Line.prototype);
THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;
THREE.SkeletonHelper.prototype.getBoneList = function(a) {
  var b = [];
  a instanceof THREE.Bone && b.push(a);
  for (var c = 0; c < a.children.length; c++)
    b.push.apply(b, this.getBoneList(a.children[c]));
  return b;
};
THREE.SkeletonHelper.prototype.update = function() {
  for (var a = this.geometry,
      b = (new THREE.Matrix4).getInverse(this.root.matrixWorld),
      c = new THREE.Matrix4,
      d = 0,
      e = 0; e < this.bones.length; e++) {
    var f = this.bones[e];
    f.parent instanceof THREE.Bone && (c.multiplyMatrices(b, f.matrixWorld), a.vertices[d].setFromMatrixPosition(c), c.multiplyMatrices(b, f.parent.matrixWorld), a.vertices[d + 1].setFromMatrixPosition(c), d += 2);
  }
  a.verticesNeedUpdate = !0;
  a.computeBoundingSphere();
};
THREE.SpotLightHelper = function(a) {
  THREE.Object3D.call(this);
  this.light = a;
  this.light.updateMatrixWorld();
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
  a = new THREE.CylinderGeometry(0, 1, 1, 8, 1, !0);
  a.applyMatrix((new THREE.Matrix4).makeTranslation(0, -.5, 0));
  a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI / 2));
  var b = new THREE.MeshBasicMaterial({
    wireframe: !0,
    fog: !1
  });
  this.cone = new THREE.Mesh(a, b);
  this.add(this.cone);
  this.update();
};
THREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;
THREE.SpotLightHelper.prototype.dispose = function() {
  this.cone.geometry.dispose();
  this.cone.material.dispose();
};
THREE.SpotLightHelper.prototype.update = function() {
  var a = new THREE.Vector3,
      b = new THREE.Vector3;
  return function() {
    var c = this.light.distance ? this.light.distance : 1E4,
        d = c * Math.tan(this.light.angle);
    this.cone.scale.set(d, d, c);
    a.setFromMatrixPosition(this.light.matrixWorld);
    b.setFromMatrixPosition(this.light.target.matrixWorld);
    this.cone.lookAt(b.sub(a));
    this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
  };
}();
THREE.VertexNormalsHelper = function(a, b, c, d) {
  this.object = a;
  this.size = void 0 !== b ? b : 1;
  b = void 0 !== c ? c : 16711680;
  d = void 0 !== d ? d : 1;
  c = new THREE.Geometry;
  a = a.geometry.faces;
  for (var e = 0,
      f = a.length; e < f; e++)
    for (var g = 0,
        h = a[e].vertexNormals.length; g < h; g++)
      c.vertices.push(new THREE.Vector3, new THREE.Vector3);
  THREE.Line.call(this, c, new THREE.LineBasicMaterial({
    color: b,
    linewidth: d
  }), THREE.LinePieces);
  this.matrixAutoUpdate = !1;
  this.normalMatrix = new THREE.Matrix3;
  this.update();
};
THREE.VertexNormalsHelper.prototype = Object.create(THREE.Line.prototype);
THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;
THREE.VertexNormalsHelper.prototype.update = function(a) {
  var b = new THREE.Vector3;
  return function(a) {
    a = ["a", "b", "c", "d"];
    this.object.updateMatrixWorld(!0);
    this.normalMatrix.getNormalMatrix(this.object.matrixWorld);
    for (var d = this.geometry.vertices,
        e = this.object.geometry.vertices,
        f = this.object.geometry.faces,
        g = this.object.matrixWorld,
        h = 0,
        k = 0,
        n = f.length; k < n; k++)
      for (var p = f[k],
          q = 0,
          m = p.vertexNormals.length; q < m; q++) {
        var t = p.vertexNormals[q];
        d[h].copy(e[p[a[q]]]).applyMatrix4(g);
        b.copy(t).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
        b.add(d[h]);
        h += 1;
        d[h].copy(b);
        h += 1;
      }
    this.geometry.verticesNeedUpdate = !0;
    return this;
  };
}();
THREE.VertexTangentsHelper = function(a, b, c, d) {
  this.object = a;
  this.size = void 0 !== b ? b : 1;
  b = void 0 !== c ? c : 255;
  d = void 0 !== d ? d : 1;
  c = new THREE.Geometry;
  a = a.geometry.faces;
  for (var e = 0,
      f = a.length; e < f; e++)
    for (var g = 0,
        h = a[e].vertexTangents.length; g < h; g++)
      c.vertices.push(new THREE.Vector3), c.vertices.push(new THREE.Vector3);
  THREE.Line.call(this, c, new THREE.LineBasicMaterial({
    color: b,
    linewidth: d
  }), THREE.LinePieces);
  this.matrixAutoUpdate = !1;
  this.update();
};
THREE.VertexTangentsHelper.prototype = Object.create(THREE.Line.prototype);
THREE.VertexTangentsHelper.prototype.constructor = THREE.VertexTangentsHelper;
THREE.VertexTangentsHelper.prototype.update = function(a) {
  var b = new THREE.Vector3;
  return function(a) {
    a = ["a", "b", "c", "d"];
    this.object.updateMatrixWorld(!0);
    for (var d = this.geometry.vertices,
        e = this.object.geometry.vertices,
        f = this.object.geometry.faces,
        g = this.object.matrixWorld,
        h = 0,
        k = 0,
        n = f.length; k < n; k++)
      for (var p = f[k],
          q = 0,
          m = p.vertexTangents.length; q < m; q++) {
        var t = p.vertexTangents[q];
        d[h].copy(e[p[a[q]]]).applyMatrix4(g);
        b.copy(t).transformDirection(g).multiplyScalar(this.size);
        b.add(d[h]);
        h += 1;
        d[h].copy(b);
        h += 1;
      }
    this.geometry.verticesNeedUpdate = !0;
    return this;
  };
}();
THREE.WireframeHelper = function(a, b) {
  var c = void 0 !== b ? b : 16777215,
      d = [0, 0],
      e = {},
      f = function(a, b) {
        return a - b;
      },
      g = ["a", "b", "c"],
      h = new THREE.BufferGeometry;
  if (a.geometry instanceof THREE.Geometry) {
    for (var k = a.geometry.vertices,
        n = a.geometry.faces,
        p = 0,
        q = new Uint32Array(6 * n.length),
        m = 0,
        t = n.length; m < t; m++)
      for (var s = n[m],
          r = 0; 3 > r; r++) {
        d[0] = s[g[r]];
        d[1] = s[g[(r + 1) % 3]];
        d.sort(f);
        var u = d.toString();
        void 0 === e[u] && (q[2 * p] = d[0], q[2 * p + 1] = d[1], e[u] = !0, p++);
      }
    d = new Float32Array(6 * p);
    m = 0;
    for (t = p; m < t; m++)
      for (r = 0; 2 > r; r++)
        p = k[q[2 * m + r]], g = 6 * m + 3 * r, d[g + 0] = p.x, d[g + 1] = p.y, d[g + 2] = p.z;
    h.addAttribute("position", new THREE.BufferAttribute(d, 3));
  } else if (a.geometry instanceof THREE.BufferGeometry) {
    if (void 0 !== a.geometry.attributes.index) {
      k = a.geometry.attributes.position.array;
      t = a.geometry.attributes.index.array;
      n = a.geometry.drawcalls;
      p = 0;
      0 === n.length && (n = [{
        count: t.length,
        index: 0,
        start: 0
      }]);
      for (var q = new Uint32Array(2 * t.length),
          s = 0,
          v = n.length; s < v; ++s)
        for (var r = n[s].start,
            u = n[s].count,
            g = n[s].index,
            m = r,
            y = r + u; m < y; m += 3)
          for (r = 0; 3 > r; r++)
            d[0] = g + t[m + r], d[1] = g + t[m + (r + 1) % 3], d.sort(f), u = d.toString(), void 0 === e[u] && (q[2 * p] = d[0], q[2 * p + 1] = d[1], e[u] = !0, p++);
      d = new Float32Array(6 * p);
      m = 0;
      for (t = p; m < t; m++)
        for (r = 0; 2 > r; r++)
          g = 6 * m + 3 * r, p = 3 * q[2 * m + r], d[g + 0] = k[p], d[g + 1] = k[p + 1], d[g + 2] = k[p + 2];
    } else
      for (k = a.geometry.attributes.position.array, p = k.length / 3, q = p / 3, d = new Float32Array(6 * p), m = 0, t = q; m < t; m++)
        for (r = 0; 3 > r; r++)
          g = 18 * m + 6 * r, q = 9 * m + 3 * r, d[g + 0] = k[q], d[g + 1] = k[q + 1], d[g + 2] = k[q + 2], p = 9 * m + (r + 1) % 3 * 3, d[g + 3] = k[p], d[g + 4] = k[p + 1], d[g + 5] = k[p + 2];
    h.addAttribute("position", new THREE.BufferAttribute(d, 3));
  }
  THREE.Line.call(this, h, new THREE.LineBasicMaterial({color: c}), THREE.LinePieces);
  this.matrix = a.matrixWorld;
  this.matrixAutoUpdate = !1;
};
THREE.WireframeHelper.prototype = Object.create(THREE.Line.prototype);
THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;
THREE.ImmediateRenderObject = function() {
  THREE.Object3D.call(this);
  this.render = function(a) {};
};
THREE.ImmediateRenderObject.prototype = Object.create(THREE.Object3D.prototype);
THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;
THREE.MorphBlendMesh = function(a, b) {
  THREE.Mesh.call(this, a, b);
  this.animationsMap = {};
  this.animationsList = [];
  var c = this.geometry.morphTargets.length;
  this.createAnimation("__default", 0, c - 1, c / 1);
  this.setAnimationWeight("__default", 1);
};
THREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;
THREE.MorphBlendMesh.prototype.createAnimation = function(a, b, c, d) {
  b = {
    startFrame: b,
    endFrame: c,
    length: c - b + 1,
    fps: d,
    duration: (c - b) / d,
    lastFrame: 0,
    currentFrame: 0,
    active: !1,
    time: 0,
    direction: 1,
    weight: 1,
    directionBackwards: !1,
    mirroredLoop: !1
  };
  this.animationsMap[a] = b;
  this.animationsList.push(b);
};
THREE.MorphBlendMesh.prototype.autoCreateAnimations = function(a) {
  for (var b = /([a-z]+)_?(\d+)/,
      c,
      d = {},
      e = this.geometry,
      f = 0,
      g = e.morphTargets.length; f < g; f++) {
    var h = e.morphTargets[f].name.match(b);
    if (h && 1 < h.length) {
      var k = h[1];
      d[k] || (d[k] = {
        start: Infinity,
        end: -Infinity
      });
      h = d[k];
      f < h.start && (h.start = f);
      f > h.end && (h.end = f);
      c || (c = k);
    }
  }
  for (k in d)
    h = d[k], this.createAnimation(k, h.start, h.end, a);
  this.firstAnimation = c;
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function(a) {
  if (a = this.animationsMap[a])
    a.direction = 1, a.directionBackwards = !1;
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function(a) {
  if (a = this.animationsMap[a])
    a.direction = -1, a.directionBackwards = !0;
};
THREE.MorphBlendMesh.prototype.setAnimationFPS = function(a, b) {
  var c = this.animationsMap[a];
  c && (c.fps = b, c.duration = (c.end - c.start) / c.fps);
};
THREE.MorphBlendMesh.prototype.setAnimationDuration = function(a, b) {
  var c = this.animationsMap[a];
  c && (c.duration = b, c.fps = (c.end - c.start) / c.duration);
};
THREE.MorphBlendMesh.prototype.setAnimationWeight = function(a, b) {
  var c = this.animationsMap[a];
  c && (c.weight = b);
};
THREE.MorphBlendMesh.prototype.setAnimationTime = function(a, b) {
  var c = this.animationsMap[a];
  c && (c.time = b);
};
THREE.MorphBlendMesh.prototype.getAnimationTime = function(a) {
  var b = 0;
  if (a = this.animationsMap[a])
    b = a.time;
  return b;
};
THREE.MorphBlendMesh.prototype.getAnimationDuration = function(a) {
  var b = -1;
  if (a = this.animationsMap[a])
    b = a.duration;
  return b;
};
THREE.MorphBlendMesh.prototype.playAnimation = function(a) {
  var b = this.animationsMap[a];
  b ? (b.time = 0, b.active = !0) : console.warn("animation[" + a + "] undefined");
};
THREE.MorphBlendMesh.prototype.stopAnimation = function(a) {
  if (a = this.animationsMap[a])
    a.active = !1;
};
THREE.MorphBlendMesh.prototype.update = function(a) {
  for (var b = 0,
      c = this.animationsList.length; b < c; b++) {
    var d = this.animationsList[b];
    if (d.active) {
      var e = d.duration / d.length;
      d.time += d.direction * a;
      if (d.mirroredLoop) {
        if (d.time > d.duration || 0 > d.time)
          d.direction *= -1, d.time > d.duration && (d.time = d.duration, d.directionBackwards = !0), 0 > d.time && (d.time = 0, d.directionBackwards = !1);
      } else
        d.time %= d.duration, 0 > d.time && (d.time += d.duration);
      var f = d.startFrame + THREE.Math.clamp(Math.floor(d.time / e), 0, d.length - 1),
          g = d.weight;
      f !== d.currentFrame && (this.morphTargetInfluences[d.lastFrame] = 0, this.morphTargetInfluences[d.currentFrame] = 1 * g, this.morphTargetInfluences[f] = 0, d.lastFrame = d.currentFrame, d.currentFrame = f);
      e = d.time % e / e;
      d.directionBackwards && (e = 1 - e);
      this.morphTargetInfluences[d.currentFrame] = e * g;
      this.morphTargetInfluences[d.lastFrame] = (1 - e) * g;
    }
  }
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/three.min.js
},{}],11:[function(require,module,exports){
"use strict";
module.exports = function(gameState) {
  var now = (new Date()).getTime();
  if (!gameState.timing) {
    gameState.timing = {previous: now};
  }
  gameState.timing.delta = now - gameState.timing.previous;
  gameState.timing.previous = now;
};


//# sourceURL=/Users/olli/Development/games/kloetzchen/app/timing.js
},{}],12:[function(require,module,exports){
(function (global){
/*
 * Copyright (c) 2014 cannon.js Authors
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&false)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.CANNON=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
module.exports={
  "name": "cannon",
  "version": "0.6.1",
  "description": "A lightweight 3D physics engine written in JavaScript.",
  "homepage": "https://github.com/schteppe/cannon.js",
  "author": "Stefan Hedman <schteppe@gmail.com> (http://steffe.se)",
  "keywords": [
    "cannon.js",
    "cannon",
    "physics",
    "engine",
    "3d"
  ],
  "main": "./build/cannon.js",
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/schteppe/cannon.js.git"
  },
  "bugs": {
    "url": "https://github.com/schteppe/cannon.js/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "jshint": "latest",
    "uglify-js": "latest",
    "nodeunit": "^0.9.0",
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-uglify": "^0.5.1",
    "grunt-browserify": "^2.1.4",
    "grunt-contrib-yuidoc": "^0.5.2",
    "browserify": "*"
  },
  "dependencies": {}
}

},{}],2:[function(_dereq_,module,exports){
// Export classes
module.exports = {
    version :                       _dereq_('../package.json').version,

    ArrayCollisionMatrix :          _dereq_('./collision/ArrayCollisionMatrix'),
    Body :                          _dereq_('./objects/Body'),
    Box :                           _dereq_('./shapes/Box'),
    Broadphase :                    _dereq_('./collision/Broadphase'),
    Constraint :                    _dereq_('./constraints/Constraint'),
    ContactEquation :               _dereq_('./equations/ContactEquation'),
    Narrowphase :                   _dereq_('./world/Narrowphase'),
    ContactMaterial :               _dereq_('./material/ContactMaterial'),
    ConvexPolyhedron :              _dereq_('./shapes/ConvexPolyhedron'),
    Cylinder :                      _dereq_('./shapes/Cylinder'),
    DistanceConstraint :            _dereq_('./constraints/DistanceConstraint'),
    Equation :                      _dereq_('./equations/Equation'),
    EventTarget :                   _dereq_('./utils/EventTarget'),
    FrictionEquation :              _dereq_('./equations/FrictionEquation'),
    GSSolver :                      _dereq_('./solver/GSSolver'),
    GridBroadphase :                _dereq_('./collision/GridBroadphase'),
    Heightfield :                   _dereq_('./shapes/Heightfield'),
    HingeConstraint :               _dereq_('./constraints/HingeConstraint'),
    Mat3 :                          _dereq_('./math/Mat3'),
    Material :                      _dereq_('./material/Material'),
    NaiveBroadphase :               _dereq_('./collision/NaiveBroadphase'),
    ObjectCollisionMatrix :         _dereq_('./collision/ObjectCollisionMatrix'),
    Pool :                          _dereq_('./utils/Pool'),
    Particle :                      _dereq_('./shapes/Particle'),
    Plane :                         _dereq_('./shapes/Plane'),
    PointToPointConstraint :        _dereq_('./constraints/PointToPointConstraint'),
    Quaternion :                    _dereq_('./math/Quaternion'),
    Ray :                           _dereq_('./collision/Ray'),
    RaycastVehicle :                _dereq_('./objects/RaycastVehicle'),
    RaycastResult :                 _dereq_('./collision/RaycastResult'),
    RigidVehicle :                  _dereq_('./objects/RigidVehicle'),
    RotationalEquation :            _dereq_('./equations/RotationalEquation'),
    RotationalMotorEquation :       _dereq_('./equations/RotationalMotorEquation'),
    SAPBroadphase :                 _dereq_('./collision/SAPBroadphase'),
    SPHSystem :                     _dereq_('./objects/SPHSystem'),
    Shape :                         _dereq_('./shapes/Shape'),
    Solver :                        _dereq_('./solver/Solver'),
    Sphere :                        _dereq_('./shapes/Sphere'),
    SplitSolver :                   _dereq_('./solver/SplitSolver'),
    Spring :                        _dereq_('./objects/Spring'),
    Vec3 :                          _dereq_('./math/Vec3'),
    Vec3Pool :                      _dereq_('./utils/Vec3Pool'),
    World :                         _dereq_('./world/World'),
};

},{"../package.json":1,"./collision/ArrayCollisionMatrix":4,"./collision/Broadphase":5,"./collision/GridBroadphase":6,"./collision/NaiveBroadphase":7,"./collision/ObjectCollisionMatrix":8,"./collision/Ray":9,"./collision/RaycastResult":10,"./collision/SAPBroadphase":11,"./constraints/Constraint":12,"./constraints/DistanceConstraint":13,"./constraints/HingeConstraint":14,"./constraints/PointToPointConstraint":15,"./equations/ContactEquation":16,"./equations/Equation":17,"./equations/FrictionEquation":18,"./equations/RotationalEquation":19,"./equations/RotationalMotorEquation":20,"./material/ContactMaterial":21,"./material/Material":22,"./math/Mat3":24,"./math/Quaternion":25,"./math/Vec3":27,"./objects/Body":28,"./objects/RaycastVehicle":29,"./objects/RigidVehicle":30,"./objects/SPHSystem":31,"./objects/Spring":32,"./shapes/Box":34,"./shapes/ConvexPolyhedron":35,"./shapes/Cylinder":36,"./shapes/Heightfield":37,"./shapes/Particle":38,"./shapes/Plane":39,"./shapes/Shape":40,"./shapes/Sphere":41,"./solver/GSSolver":42,"./solver/Solver":43,"./solver/SplitSolver":44,"./utils/EventTarget":45,"./utils/Pool":46,"./utils/Vec3Pool":49,"./world/Narrowphase":50,"./world/World":51}],3:[function(_dereq_,module,exports){
var Vec3 = _dereq_('../math/Vec3');
var Utils = _dereq_('../utils/Utils');

module.exports = AABB;

/**
 * Axis aligned bounding box class.
 * @class AABB
 * @constructor
 * @param {Object}  [options]
 * @param {Array}   [options.upperBound]
 * @param {Array}   [options.lowerBound]
 */
function AABB(options){
    options = options || {};

    /**
     * The lower bound of the bounding box.
     * @property lowerBound
     * @type {Array}
     */
    this.lowerBound = new Vec3();
    if(options.lowerBound){
        this.lowerBound.copy(options.lowerBound);
    }

    /**
     * The upper bound of the bounding box.
     * @property upperBound
     * @type {Array}
     */
    this.upperBound = new Vec3();
    if(options.upperBound){
        this.upperBound.copy(options.upperBound);
    }
}

var tmp = new Vec3();

/**
 * Set the AABB bounds from a set of points.
 * @method setFromPoints
 * @param {Array} points An array of Vec3's.
 * @param {Vec3} position
 * @param {Quaternion} quaternion
 * @param {number} skinSize
 */
AABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){
    var l = this.lowerBound,
        u = this.upperBound,
        q = quaternion;

    // Set to the first point
    l.copy(points[0]);
    if(q){
        q.vmult(l, l);
    }
    u.copy(l);

    for(var i = 1; i<points.length; i++){
        var p = points[i];

        if(q){
            q.vmult(p, tmp);
            p = tmp;
        }

        if(p.x > u.x){ u.x = p.x; }
        if(p.x < l.x){ l.x = p.x; }
        if(p.y > u.y){ u.y = p.y; }
        if(p.y < l.y){ l.y = p.y; }
        if(p.z > u.z){ u.z = p.z; }
        if(p.z < l.z){ l.z = p.z; }
    }

    // Add offset
    if (position) {
        position.vadd(l, l);
        position.vadd(u, u);
    }

    if(skinSize){
        l.x -= skinSize;
        l.y -= skinSize;
        l.z -= skinSize;
        u.x += skinSize;
        u.y += skinSize;
        u.z += skinSize;
    }
};

/**
 * Copy bounds from an AABB to this AABB
 * @method copy
 * @param  {AABB} aabb Source to copy from
 */
AABB.prototype.copy = function(aabb){
    this.lowerBound.copy(aabb.lowerBound);
    this.upperBound.copy(aabb.upperBound);
};

/**
 * Extend this AABB so that it covers the given AABB too.
 * @method extend
 * @param  {AABB} aabb
 */
AABB.prototype.extend = function(aabb){
    // Extend lower bound
    var l = aabb.lowerBound.x;
    if(this.lowerBound.x > l){
        this.lowerBound.x = l;
    }

    // Upper
    var u = aabb.upperBound.x;
    if(this.upperBound.x < u){
        this.upperBound.x = u;
    }

    // Extend lower bound
    var l = aabb.lowerBound.y;
    if(this.lowerBound.y > l){
        this.lowerBound.y = l;
    }

    // Upper
    var u = aabb.upperBound.y;
    if(this.upperBound.y < u){
        this.upperBound.y = u;
    }

    // Extend lower bound
    var l = aabb.lowerBound.z;
    if(this.lowerBound.z > l){
        this.lowerBound.z = l;
    }

    // Upper
    var u = aabb.upperBound.z;
    if(this.upperBound.z < u){
        this.upperBound.z = u;
    }
};

/**
 * Returns true if the given AABB overlaps this AABB.
 * @method overlaps
 * @param  {AABB} aabb
 * @return {Boolean}
 */
AABB.prototype.overlaps = function(aabb){
    var l1 = this.lowerBound,
        u1 = this.upperBound,
        l2 = aabb.lowerBound,
        u2 = aabb.upperBound;

    //      l2        u2
    //      |---------|
    // |--------|
    // l1       u1

    return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&
           ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&
           ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));
};

},{"../math/Vec3":27,"../utils/Utils":48}],4:[function(_dereq_,module,exports){
module.exports = ArrayCollisionMatrix;

/**
 * Collision "matrix". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step
 * @class ArrayCollisionMatrix
 * @constructor
 */
function ArrayCollisionMatrix() {

    /**
     * The matrix storage
     * @property matrix
     * @type {Array}
     */
	this.matrix = [];
}

/**
 * Get an element
 * @method get
 * @param  {Number} i
 * @param  {Number} j
 * @return {Number}
 */
ArrayCollisionMatrix.prototype.get = function(i, j) {
	i = i.index;
	j = j.index;
    if (j > i) {
        var temp = j;
        j = i;
        i = temp;
    }
	return this.matrix[(i*(i + 1)>>1) + j-1];
};

/**
 * Set an element
 * @method set
 * @param {Number} i
 * @param {Number} j
 * @param {Number} value
 */
ArrayCollisionMatrix.prototype.set = function(i, j, value) {
	i = i.index;
	j = j.index;
    if (j > i) {
        var temp = j;
        j = i;
        i = temp;
    }
	this.matrix[(i*(i + 1)>>1) + j-1] = value ? 1 : 0;
};

/**
 * Sets all elements to zero
 * @method reset
 */
ArrayCollisionMatrix.prototype.reset = function() {
	for (var i=0, l=this.matrix.length; i!==l; i++) {
		this.matrix[i]=0;
	}
};

/**
 * Sets the max number of objects
 * @method setNumObjects
 * @param {Number} n
 */
ArrayCollisionMatrix.prototype.setNumObjects = function(n) {
	this.matrix.length = n*(n-1)>>1;
};

},{}],5:[function(_dereq_,module,exports){
var Body = _dereq_('../objects/Body');
var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var Shape = _dereq_('../shapes/Shape');
var Plane = _dereq_('../shapes/Plane');

module.exports = Broadphase;

/**
 * Base class for broadphase implementations
 * @class Broadphase
 * @constructor
 * @author schteppe
 */
function Broadphase(){
    /**
    * The world to search for collisions in.
    * @property world
    * @type {World}
    */
    this.world = null;

    /**
     * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.
     * @property useBoundingBoxes
     * @type {Boolean}
     */
    this.useBoundingBoxes = false;

    /**
     * Set to true if the objects in the world moved.
     * @property {Boolean} dirty
     */
    this.dirty = true;
}

/**
 * Get the collision pairs from the world
 * @method collisionPairs
 * @param {World} world The world to search in
 * @param {Array} p1 Empty array to be filled with body objects
 * @param {Array} p2 Empty array to be filled with body objects
 */
Broadphase.prototype.collisionPairs = function(world,p1,p2){
    throw new Error("collisionPairs not implemented for this BroadPhase class!");
};

/**
 * Check if a body pair needs to be intersection tested at all.
 * @method needBroadphaseCollision
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @return {bool}
 */
var Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;
Broadphase.prototype.needBroadphaseCollision = function(bodyA,bodyB){

    // Check collision filter masks
    if( (bodyA.collisionFilterGroup & bodyB.collisionFilterMask)===0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask)===0){
        return false;
    }

    // Check types
    if(((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyA.sleepState === Body.SLEEPING) &&
       ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyB.sleepState === Body.SLEEPING)) {
        // Both bodies are static, kinematic or sleeping. Skip.
        return false;
    }

    return true;
};

/**
 * Check if the bounding volumes of two bodies intersect.
 * @method intersectionTest
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {array} pairs1
 * @param {array} pairs2
  */
Broadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2){
    if(this.useBoundingBoxes){
        this.doBoundingBoxBroadphase(bodyA,bodyB,pairs1,pairs2);
    } else {
        this.doBoundingSphereBroadphase(bodyA,bodyB,pairs1,pairs2);
    }
};

/**
 * Check if the bounding spheres of two bodies are intersecting.
 * @method doBoundingSphereBroadphase
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Array} pairs1 bodyA is appended to this array if intersection
 * @param {Array} pairs2 bodyB is appended to this array if intersection
 */
var Broadphase_collisionPairs_r = new Vec3(), // Temp objects
    Broadphase_collisionPairs_normal =  new Vec3(),
    Broadphase_collisionPairs_quat =  new Quaternion(),
    Broadphase_collisionPairs_relpos  =  new Vec3();
Broadphase.prototype.doBoundingSphereBroadphase = function(bodyA,bodyB,pairs1,pairs2){
    var r = Broadphase_collisionPairs_r;
    bodyB.position.vsub(bodyA.position,r);
    var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);
    var norm2 = r.norm2();
    if(norm2 < boundingRadiusSum2){
        pairs1.push(bodyA);
        pairs2.push(bodyB);
    }
};

/**
 * Check if the bounding boxes of two bodies are intersecting.
 * @method doBoundingBoxBroadphase
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Array} pairs1
 * @param {Array} pairs2
 */
Broadphase.prototype.doBoundingBoxBroadphase = function(bodyA,bodyB,pairs1,pairs2){
    if(bodyA.aabbNeedsUpdate){
        bodyA.computeAABB();
    }
    if(bodyB.aabbNeedsUpdate){
        bodyB.computeAABB();
    }

    // Check AABB / AABB
    if(bodyA.aabb.overlaps(bodyB.aabb)){
        pairs1.push(bodyA);
        pairs2.push(bodyB);
    }
};

/**
 * Removes duplicate pairs from the pair arrays.
 * @method makePairsUnique
 * @param {Array} pairs1
 * @param {Array} pairs2
 */
var Broadphase_makePairsUnique_temp = { keys:[] },
    Broadphase_makePairsUnique_p1 = [],
    Broadphase_makePairsUnique_p2 = [];
Broadphase.prototype.makePairsUnique = function(pairs1,pairs2){
    var t = Broadphase_makePairsUnique_temp,
        p1 = Broadphase_makePairsUnique_p1,
        p2 = Broadphase_makePairsUnique_p2,
        N = pairs1.length;

    for(var i=0; i!==N; i++){
        p1[i] = pairs1[i];
        p2[i] = pairs2[i];
    }

    pairs1.length = 0;
    pairs2.length = 0;

    for(var i=0; i!==N; i++){
        var id1 = p1[i].id,
            id2 = p2[i].id;
        var key = id1 < id2 ? id1+","+id2 :  id2+","+id1;
        t[key] = i;
        t.keys.push(key);
    }

    for(var i=0; i!==t.keys.length; i++){
        var key = t.keys.pop(),
            pairIndex = t[key];
        pairs1.push(p1[pairIndex]);
        pairs2.push(p2[pairIndex]);
        delete t[key];
    }
};

/**
 * To be implemented by subcasses
 * @method setWorld
 * @param {World} world
 */
Broadphase.prototype.setWorld = function(world){
};

/**
 * Check if the bounding spheres of two bodies overlap.
 * @method boundingSphereCheck
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @return {boolean}
 */
var bsc_dist = new Vec3();
Broadphase.boundingSphereCheck = function(bodyA,bodyB){
    var dist = bsc_dist;
    bodyA.position.vsub(bodyB.position,dist);
    return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius,2) > dist.norm2();
};

/**
 * Returns all the bodies within the AABB.
 * @method aabbQuery
 * @param  {World} world
 * @param  {AABB} aabb
 * @return {array}
 */
Broadphase.prototype.aabbQuery = function(world, aabb){
    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');
    return [];
};
},{"../math/Quaternion":25,"../math/Vec3":27,"../objects/Body":28,"../shapes/Plane":39,"../shapes/Shape":40}],6:[function(_dereq_,module,exports){
module.exports = GridBroadphase;

var Broadphase = _dereq_('./Broadphase');
var Vec3 = _dereq_('../math/Vec3');
var Shape = _dereq_('../shapes/Shape');

/**
 * Axis aligned uniform grid broadphase.
 * @class GridBroadphase
 * @constructor
 * @extends Broadphase
 * @todo Needs support for more than just planes and spheres.
 * @param {Vec3} aabbMin
 * @param {Vec3} aabbMax
 * @param {Number} nx Number of boxes along x
 * @param {Number} ny Number of boxes along y
 * @param {Number} nz Number of boxes along z
 */
function GridBroadphase(aabbMin,aabbMax,nx,ny,nz){
    Broadphase.apply(this);
    this.nx = nx || 10;
    this.ny = ny || 10;
    this.nz = nz || 10;
    this.aabbMin = aabbMin || new Vec3(100,100,100);
    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);
	var nbins = this.nx * this.ny * this.nz;
	if (nbins <= 0) {
		throw "GridBroadphase: Each dimension's n must be >0";
	}
    this.bins = [];
	this.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow
	this.bins.length = nbins;
	this.binLengths.length = nbins;
	for (var i=0;i<nbins;i++) {
		this.bins[i]=[];
		this.binLengths[i]=0;
	}
}
GridBroadphase.prototype = new Broadphase();
GridBroadphase.prototype.constructor = GridBroadphase;

/**
 * Get all the collision pairs in the physics world
 * @method collisionPairs
 * @param {World} world
 * @param {Array} pairs1
 * @param {Array} pairs2
 */
var GridBroadphase_collisionPairs_d = new Vec3();
var GridBroadphase_collisionPairs_binPos = new Vec3();
GridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){
    var N = world.numObjects(),
        bodies = world.bodies;

    var max = this.aabbMax,
        min = this.aabbMin,
        nx = this.nx,
        ny = this.ny,
        nz = this.nz;

	var xstep = ny*nz;
	var ystep = nz;
	var zstep = 1;

    var xmax = max.x,
        ymax = max.y,
        zmax = max.z,
        xmin = min.x,
        ymin = min.y,
        zmin = min.z;

    var xmult = nx / (xmax-xmin),
        ymult = ny / (ymax-ymin),
        zmult = nz / (zmax-zmin);

    var binsizeX = (xmax - xmin) / nx,
        binsizeY = (ymax - ymin) / ny,
        binsizeZ = (zmax - zmin) / nz;

	var binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;

    var types = Shape.types;
    var SPHERE =            types.SPHERE,
        PLANE =             types.PLANE,
        BOX =               types.BOX,
        COMPOUND =          types.COMPOUND,
        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;

    var bins=this.bins,
		binLengths=this.binLengths,
        Nbins=this.bins.length;

    // Reset bins
    for(var i=0; i!==Nbins; i++){
        binLengths[i] = 0;
    }

    var ceil = Math.ceil;
	var min = Math.min;
	var max = Math.max;

	function addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {
		var xoff0 = ((x0 - xmin) * xmult)|0,
			yoff0 = ((y0 - ymin) * ymult)|0,
			zoff0 = ((z0 - zmin) * zmult)|0,
			xoff1 = ceil((x1 - xmin) * xmult),
			yoff1 = ceil((y1 - ymin) * ymult),
			zoff1 = ceil((z1 - zmin) * zmult);

		if (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }
		if (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }
		if (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }
		if (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }
		if (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }
		if (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }

		xoff0 *= xstep;
		yoff0 *= ystep;
		zoff0 *= zstep;
		xoff1 *= xstep;
		yoff1 *= ystep;
		zoff1 *= zstep;

		for (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {
			for (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {
				for (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {
					var idx = xoff+yoff+zoff;
					bins[idx][binLengths[idx]++] = bi;
				}
			}
		}
	}

    // Put all bodies into the bins
    for(var i=0; i!==N; i++){
        var bi = bodies[i];
        var si = bi.shape;

        switch(si.type){
        case SPHERE:
            // Put in bin
            // check if overlap with other bins
            var x = bi.position.x,
                y = bi.position.y,
                z = bi.position.z;
            var r = si.radius;

			addBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);
            break;

        case PLANE:
            if(si.worldNormalNeedsUpdate){
                si.computeWorldNormal(bi.quaternion);
            }
            var planeNormal = si.worldNormal;

			//Relative position from origin of plane object to the first bin
			//Incremented as we iterate through the bins
			var xreset = xmin + binsizeX*0.5 - bi.position.x,
				yreset = ymin + binsizeY*0.5 - bi.position.y,
				zreset = zmin + binsizeZ*0.5 - bi.position.z;

            var d = GridBroadphase_collisionPairs_d;
			d.set(xreset, yreset, zreset);

			for (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {
				for (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {
					for (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {
						if (d.dot(planeNormal) < binRadius) {
							var idx = xoff + yoff + zoff;
							bins[idx][binLengths[idx]++] = bi;
						}
					}
				}
			}
            break;

        default:
			if (bi.aabbNeedsUpdate) {
				bi.computeAABB();
			}

			addBoxToBins(
				bi.aabb.lowerBound.x,
				bi.aabb.lowerBound.y,
				bi.aabb.lowerBound.z,
				bi.aabb.upperBound.x,
				bi.aabb.upperBound.y,
				bi.aabb.upperBound.z,
				bi);
            break;
        }
    }

    // Check each bin
    for(var i=0; i!==Nbins; i++){
		var binLength = binLengths[i];
		//Skip bins with no potential collisions
		if (binLength > 1) {
			var bin = bins[i];

			// Do N^2 broadphase inside
			for(var xi=0; xi!==binLength; xi++){
				var bi = bin[xi];
				for(var yi=0; yi!==xi; yi++){
					var bj = bin[yi];
					if(this.needBroadphaseCollision(bi,bj)){
						this.intersectionTest(bi,bj,pairs1,pairs2);
					}
				}
			}
		}
    }

//	for (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {
//		console.log("layer "+zi);
//		for (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {
//			var row = '';
//			for (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {
//				var idx = xoff + yoff + zoff;
//				row += ' ' + binLengths[idx];
//			}
//			console.log(row);
//		}
//	}

    this.makePairsUnique(pairs1,pairs2);
};

},{"../math/Vec3":27,"../shapes/Shape":40,"./Broadphase":5}],7:[function(_dereq_,module,exports){
module.exports = NaiveBroadphase;

var Broadphase = _dereq_('./Broadphase');
var AABB = _dereq_('./AABB');

/**
 * Naive broadphase implementation, used in lack of better ones.
 * @class NaiveBroadphase
 * @constructor
 * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)
 * @extends Broadphase
 */
function NaiveBroadphase(){
    Broadphase.apply(this);
}
NaiveBroadphase.prototype = new Broadphase();
NaiveBroadphase.prototype.constructor = NaiveBroadphase;

/**
 * Get all the collision pairs in the physics world
 * @method collisionPairs
 * @param {World} world
 * @param {Array} pairs1
 * @param {Array} pairs2
 */
NaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){
    var bodies = world.bodies,
        n = bodies.length,
        i,j,bi,bj;

    // Naive N^2 ftw!
    for(i=0; i!==n; i++){
        for(j=0; j!==i; j++){

            bi = bodies[i];
            bj = bodies[j];

            if(!this.needBroadphaseCollision(bi,bj)){
                continue;
            }

            this.intersectionTest(bi,bj,pairs1,pairs2);
        }
    }
};

var tmpAABB = new AABB();

/**
 * Returns all the bodies within an AABB.
 * @method aabbQuery
 * @param  {World} world
 * @param  {AABB} aabb
 * @param {array} result An array to store resulting bodies in.
 * @return {array}
 */
NaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){
    result = result || [];

    for(var i = 0; i < world.bodies.length; i++){
        var b = world.bodies[i];

        if(b.aabbNeedsUpdate){
            b.computeAABB();
        }

        // Ugly hack until RigidBody gets aabb
        if(b.aabb.overlaps(aabb)){
            result.push(b);
        }
    }

    return result;
};
},{"./AABB":3,"./Broadphase":5}],8:[function(_dereq_,module,exports){
module.exports = ObjectCollisionMatrix;

/**
 * Records what objects are colliding with each other
 * @class ObjectCollisionMatrix
 * @constructor
 */
function ObjectCollisionMatrix() {

    /**
     * The matrix storage
     * @property matrix
     * @type {Object}
     */
	this.matrix = {};
}

/**
 * @method get
 * @param  {Number} i
 * @param  {Number} j
 * @return {Number}
 */
ObjectCollisionMatrix.prototype.get = function(i, j) {
	i = i.id;
	j = j.id;
    if (j > i) {
        var temp = j;
        j = i;
        i = temp;
    }
	return i+'-'+j in this.matrix;
};

/**
 * @method set
 * @param  {Number} i
 * @param  {Number} j
 * @param {Number} value
 */
ObjectCollisionMatrix.prototype.set = function(i, j, value) {
	i = i.id;
	j = j.id;
    if (j > i) {
        var temp = j;
        j = i;
        i = temp;
	}
	if (value) {
		this.matrix[i+'-'+j] = true;
	}
	else {
		delete this.matrix[i+'-'+j];
	}
};

/**
 * Empty the matrix
 * @method reset
 */
ObjectCollisionMatrix.prototype.reset = function() {
	this.matrix = {};
};

/**
 * Set max number of objects
 * @method setNumObjects
 * @param {Number} n
 */
ObjectCollisionMatrix.prototype.setNumObjects = function(n) {
};

},{}],9:[function(_dereq_,module,exports){
module.exports = Ray;

var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var Transform = _dereq_('../math/Transform');
var ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');
var Box = _dereq_('../shapes/Box');
var RaycastResult = _dereq_('../collision/RaycastResult');
var Shape = _dereq_('../shapes/Shape');
var AABB = _dereq_('../collision/AABB');

/**
 * A line in 3D space that intersects bodies and return points.
 * @class Ray
 * @constructor
 * @param {Vec3} from
 * @param {Vec3} to
 */
function Ray(from, to){
    /**
     * @property {Vec3} from
     */
    this.from = from ? from.clone() : new Vec3();

    /**
     * @property {Vec3} to
     */
    this.to = to ? to.clone() : new Vec3();

    this._direction = new Vec3();

    /**
     * The precision of the ray. Used when checking parallelity etc.
     * @property {Number} precision
     */
    this.precision = 0.0001;

    /**
     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.
     * @property {Boolean} checkCollisionResponse
     */
    this.checkCollisionResponse = true;
}
Ray.prototype.constructor = Ray;

var v1 = new Vec3(),
    v2 = new Vec3();

/*
 * As per "Barycentric Technique" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division
 */
function pointInTriangle(p, a, b, c) {
    c.vsub(a,v0);
    b.vsub(a,v1);
    p.vsub(a,v2);

    var dot00 = v0.dot( v0 );
    var dot01 = v0.dot( v1 );
    var dot02 = v0.dot( v2 );
    var dot11 = v1.dot( v1 );
    var dot12 = v1.dot( v2 );

    var u,v;

    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&
            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&
            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );
}

/**
 * Shoot a ray at a body, get back information about the hit.
 * @method intersectBody
 * @private
 * @param {Body} body
 * @param {RaycastResult} result
 * @param {Vec3} [direction]
 */
Ray.prototype.intersectBody = function (body, result, direction) {
    var checkCollisionResponse = this.checkCollisionResponse;

    if(checkCollisionResponse && !body.collisionResponse){
        return result;
    }

    if(!direction){
        this._updateDirection();
        direction = this._direction;
    }

    var xi = new Vec3();
    var qi = new Quaternion();
    for (var i = 0; i < body.shapes.length; i++) {
        var shape = body.shapes[i];

        if(checkCollisionResponse && !shape.collisionResponse){
            continue; // Skip
        }

        body.quaternion.mult(body.shapeOrientations[i], qi);
        body.quaternion.vmult(body.shapeOffsets[i], xi);
        xi.vadd(body.position, xi);

        this.intersectShape(
            shape,
            qi,
            xi,
            body,
            direction,
            result
        );
    }

    return result;
};

/**
 * @method intersectBodies
 * @param {Array} bodies An array of Body objects.
 * @param {RaycastResult} result
 */
Ray.prototype.intersectBodies = function (bodies, result) {
    this._updateDirection();
    var direction = this._direction;

    if(result instanceof RaycastResult){
        result.reset();
    }

    for ( var i = 0, l = bodies.length; i < l; i ++ ) {
        this.intersectBody(bodies[i], result, direction);
    }
};

Ray.prototype._updateDirection = function(){
    this.to.vsub(this.from, this._direction);
    this._direction.normalize();
};

/**
 * @method intersectShape
 * @private
 * @param {Shape} shape
 * @param {Quaternion} quat
 * @param {Vec3} position
 * @param {Body} body
 * @param {Vec3} direction
 * @param {RaycastResult} result
 */
Ray.prototype.intersectShape = function(shape, quat, position, body, direction, result){
    var from = this.from;

    // Checking boundingSphere
    var distance = distanceFromIntersection(from, direction, position);
    if ( distance > shape.boundingSphereRadius ) {
        return result;
    }

    this[shape.type](shape, quat, position, body, direction, result);

    return result;
};

var vector = new Vec3();
var normal = new Vec3();
var intersectPoint = new Vec3();

var a = new Vec3();
var b = new Vec3();
var c = new Vec3();
var d = new Vec3();

var tmpRaycastResult = new RaycastResult();

/**
 * @method intersectBox
 * @private
 * @param  {Shape} shape
 * @param  {Quaternion} quat
 * @param  {Vec3} position
 * @param  {Body} body
 * @param  {Vec3} direction
 * @param  {RaycastResult} result
 */
Ray.prototype.intersectBox = function(shape, quat, position, body, direction, result){
    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body, direction, result);
};
Ray.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;

/**
 * @method intersectPlane
 * @private
 * @param  {Shape} shape
 * @param  {Quaternion} quat
 * @param  {Vec3} position
 * @param  {Body} body
 * @param  {Vec3} direction
 * @param  {RaycastResult} result
 */
Ray.prototype.intersectPlane = function(shape, quat, position, body, direction, result){
    var from = this.from;
    var to = this.to;

    // Get plane normal
    var worldNormal = new Vec3(0, 0, 1);
    quat.vmult(worldNormal, worldNormal);

    var len = new Vec3();
    from.vsub(position, len);
    var planeToFrom = len.dot(worldNormal);
    to.vsub(position, len);
    var planeToTo = len.dot(worldNormal);

    if(planeToFrom * planeToTo > 0){
        // "from" and "to" are on the same side of the plane... bail out
        return result;
    }

    if(from.distanceTo(to) < planeToFrom){
        return result;
    }

    var n_dot_dir = worldNormal.dot(direction);

    if (Math.abs(n_dot_dir) < this.precision) {
        // No intersection
        return result;
    }

    var planePointToFrom = new Vec3();
    var dir_scaled_with_t = new Vec3();
    var hitPointWorld = new Vec3();

    from.vsub(position, planePointToFrom);
    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;
    direction.scale(t, dir_scaled_with_t);
    from.vadd(dir_scaled_with_t, hitPointWorld);

    if(this.reportIntersection(worldNormal, hitPointWorld, shape, body, result)){
        return result;
    }

    return result;
};
Ray.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;

/**
 * Get the AABB of the ray.
 * @method getAABB
 * @param  {AABB} aabb
 */
Ray.prototype.getAABB = function(result){
    var to = this.to;
    var from = this.from;
    result.lowerBound.x = Math.min(to.x, from.x);
    result.lowerBound.y = Math.min(to.y, from.y);
    result.lowerBound.z = Math.min(to.z, from.z);
    result.upperBound.x = Math.max(to.x, from.x);
    result.upperBound.y = Math.max(to.y, from.y);
    result.upperBound.z = Math.max(to.z, from.z);
};

var intersectConvexOptions = {
    faceList: [0]
};

/**
 * @method intersectHeightfield
 * @private
 * @param  {Shape} shape
 * @param  {Quaternion} quat
 * @param  {Vec3} position
 * @param  {Body} body
 * @param  {Vec3} direction
 * @param  {RaycastResult} result
 */
Ray.prototype.intersectHeightfield = function(shape, quat, position, body, direction, result){
    var data = shape.data,
        w = shape.elementSize,
        worldPillarOffset = new Vec3();

    // Convert the ray to local heightfield coordinates
    var localRay = new Ray(this.from, this.to);
    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);
    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);

    // Get the index of the data points to test against
    var index = [];
    var iMinX = null;
    var iMinY = null;
    var iMaxX = null;
    var iMaxY = null;

    var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);
    if(inside){
        iMinX = index[0];
        iMinY = index[1];
        iMaxX = index[0];
        iMaxY = index[1];
    }
    inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);
    if(inside){
        if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }
        if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }
        if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }
        if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }
    }

    if(iMinX === null){
        return result;
    }

    var minMax = [];
    shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
    var min = minMax[0];
    var max = minMax[1];

    // // Bail out if the ray can't touch the bounding box
    // // TODO
    // var aabb = new AABB();
    // this.getAABB(aabb);
    // if(aabb.intersects()){
    //     return;
    // }

    for(var i = iMinX; i <= iMaxX; i++){
        for(var j = iMinY; j <= iMaxY; j++){

            // Lower triangle
            shape.getConvexTrianglePillar(i, j, false);
            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);
            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, direction, result, intersectConvexOptions);

            // Upper triangle
            shape.getConvexTrianglePillar(i, j, true);
            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);
            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, direction, result, intersectConvexOptions);
        }
    }

    return result;
};
Ray.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;

/**
 * @method intersectSphere
 * @private
 * @param  {Shape} shape
 * @param  {Quaternion} quat
 * @param  {Vec3} position
 * @param  {Body} body
 * @param  {Vec3} direction
 * @param  {RaycastResult} result
 */
Ray.prototype.intersectSphere = function(shape, quat, position, body, direction, result){
    var from = this.from,
        to = this.to,
        r = shape.radius;

    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);
    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));
    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);

    var delta = Math.pow(b, 2) - 4 * a * c;

    if(delta < 0){
        // No intersection
        return result;

    } else if(delta === 0){
        // single intersection point
        var intersectionPoint = new Vec3();
        from.lerp(to, delta, intersectionPoint);

        var normal = new Vec3();
        intersectionPoint.vsub(position, normal);
        normal.normalize();

        if(this.reportIntersection(normal, intersectionPoint, shape, body, result)){
            return result;
        }
    } else {
        var d1 = (- b - Math.sqrt(delta)) / (2 * a);
        var d2 = (- b + Math.sqrt(delta)) / (2 * a);

        var intersectionPoint = new Vec3();
        from.lerp(to, d1, intersectionPoint);
        var normal = new Vec3();
        intersectionPoint.vsub(position, normal);
        normal.normalize();
        if(this.reportIntersection(normal, intersectionPoint, shape, body, result)){
            return result;
        }

        from.lerp(to, d2, intersectionPoint);
        var normal = new Vec3();
        intersectionPoint.vsub(position, normal);
        normal.normalize();
        if(this.reportIntersection(normal, intersectionPoint, shape, body, result)){
            return result;
        }
    }

    return result;
};
Ray.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;


var intersectConvex_normal = new Vec3();
var intersectConvex_minDistNormal = new Vec3();
var intersectConvex_minDistIntersect = new Vec3();
var intersectConvex_vector = new Vec3();

/**
 * @method intersectConvex
 * @private
 * @param  {Shape} shape
 * @param  {Quaternion} quat
 * @param  {Vec3} position
 * @param  {Body} body
 * @param  {Vec3} direction
 * @param  {RaycastResult} result
 * @param {object} [options]
 * @param {array} [options.faceList]
 */
Ray.prototype.intersectConvex = function intersectConvex(shape, quat, position, body, direction, result, options){
    var minDistNormal = intersectConvex_minDistNormal;
    var normal = intersectConvex_normal;
    var vector = intersectConvex_vector;
    var minDistIntersect = intersectConvex_minDistIntersect;
    var faceList = (options && options.faceList) || null;

    // Checking faces
    var faces = shape.faces,
        vertices = shape.vertices,
        normals = shape.faceNormals;

    var from = this.from;
    var to = this.to;
    var fromToDistance = from.distanceTo(to);

    var reportClosest = result instanceof RaycastResult;
    var minDist = -1;
    var Nfaces = faceList ? faceList.length : faces.length;

    for (var j = 0; j < Nfaces; j++) {
        var fi = faceList ? faceList[j] : j;

        var face = faces[fi];
        var faceNormal = normals[fi];
        var q = quat;
        var x = position;

        // determine if ray intersects the plane of the face
        // note: this works regardless of the direction of the face normal

        // Get plane point in world coordinates...
        vector.copy(vertices[face[0]]);
        q.vmult(vector,vector);
        vector.vadd(x,vector);

        // ...but make it relative to the ray from. We'll fix this later.
        vector.vsub(from,vector);

        // Get plane normal
        q.vmult(faceNormal,normal);

        // If this dot product is negative, we have something interesting
        var dot = direction.dot(normal);

        // Bail out if ray and plane are parallel
        if ( Math.abs( dot ) < this.precision ){
            continue;
        }

        // calc distance to plane
        var scalar = normal.dot(vector) / dot;

        // if negative distance, then plane is behind ray
        if (scalar < 0){
            continue;
        }

        if (dot < 0) {

            // Intersection point is from + direction * scalar
            direction.mult(scalar,intersectPoint);
            intersectPoint.vadd(from,intersectPoint);

            // a is the point we compare points b and c with.
            a.copy(vertices[face[0]]);
            q.vmult(a,a);
            x.vadd(a,a);

            for(var i = 1; i < face.length - 1; i++){
                // Transform 3 vertices to world coords
                b.copy(vertices[face[i]]);
                c.copy(vertices[face[i+1]]);
                q.vmult(b,b);
                q.vmult(c,c);
                x.vadd(b,b);
                x.vadd(c,c);

                var distance = intersectPoint.distanceTo(from);

                if(!pointInTriangle(intersectPoint, a, b, c) || distance > fromToDistance){
                    continue;
                }

                if(minDist === -1 || distance < minDist){
                    minDist = distance;
                    minDistNormal.copy(normal);
                    minDistIntersect.copy(intersectPoint);
                }
            }
        }
    }

    if(minDist !== -1 && this.reportIntersection(minDistNormal, minDistIntersect, shape, body, result)){
        return result;
    }

    return result;
};

Ray.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;

/**
 * @method reportIntersection
 * @private
 * @param  {Vec3} normal
 * @param  {Vec3} hitPointWorld
 * @param  {Shape} shape
 * @param  {Body} body
 * @param  {RaycastResult} result
 * @return {boolean} True if the intersections should continue
 */
Ray.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, result){
    var from = this.from;
    var to = this.to;
    var distance = from.distanceTo(hitPointWorld);

    if(!(result instanceof RaycastResult)){
        // Got a callback
        tmpRaycastResult.set(
            from,
            to,
            normal,
            hitPointWorld,
            shape,
            body,
            distance
        );
        tmpRaycastResult.hasHit = true;
        result(tmpRaycastResult);

        return true;

    } else {

        // Store if closer than current cloest
        if(distance < result.distance || !result.hasHit){
            result.hasHit = true;
            result.set(
                from,
                to,
                normal,
                hitPointWorld,
                shape,
                body,
                distance
            );
        }

        return false;
    }
};

var v0 = new Vec3(),
    intersect = new Vec3();
function distanceFromIntersection(from, direction, position) {

    // v0 is vector from from to position
    position.vsub(from,v0);
    var dot = v0.dot( direction );

    // intersect = direction*dot + from
    direction.mult(dot,intersect);
    intersect.vadd(from,intersect);

    var distance = position.distanceTo(intersect);

    return distance;
}


},{"../collision/AABB":3,"../collision/RaycastResult":10,"../math/Quaternion":25,"../math/Transform":26,"../math/Vec3":27,"../shapes/Box":34,"../shapes/ConvexPolyhedron":35,"../shapes/Shape":40}],10:[function(_dereq_,module,exports){
var Vec3 = _dereq_('../math/Vec3');

module.exports = RaycastResult;

/**
 * Storage for Ray casting data.
 * @class RaycastResult
 * @constructor
 */
function RaycastResult(){

	/**
	 * @property {Vec3} rayFromWorld
	 */
	this.rayFromWorld = new Vec3();

	/**
	 * @property {Vec3} rayToWorld
	 */
	this.rayToWorld = new Vec3();

	/**
	 * @property {Vec3} hitNormalWorld
	 */
	this.hitNormalWorld = new Vec3();

	/**
	 * @property {Vec3} hitPointWorld
	 */
	this.hitPointWorld = new Vec3();

	/**
	 * @property {boolean} hasHit
	 */
	this.hasHit = false;

	/**
	 * The hit shape, or null.
	 * @property {Shape} shape
	 */
	this.shape = null;

	/**
	 * The hit body, or null.
	 * @property {Body} body
	 */
	this.body = null;

	/**
	 * Distance to the hit. Will be set to -1 if there was no hit.
	 * @property {number} distance
	 */
	this.distance = -1;
}

/**
 * Reset all result data.
 * @method reset
 */
RaycastResult.prototype.reset = function () {
	this.rayFromWorld.setZero();
	this.rayToWorld.setZero();
	this.hitNormalWorld.setZero();
	this.hitPointWorld.setZero();
	this.hasHit = false;
	this.shape = null;
	this.body = null;
	this.distance = -1;
};

/**
 * @method set
 * @param {Vec3} rayFromWorld
 * @param {Vec3} rayToWorld
 * @param {Vec3} hitNormalWorld
 * @param {Vec3} hitPointWorld
 * @param {Shape} shape
 * @param {Body} body
 * @param {number} distance
 */
RaycastResult.prototype.set = function(
	rayFromWorld,
	rayToWorld,
	hitNormalWorld,
	hitPointWorld,
	shape,
	body,
	distance
){
	this.rayFromWorld.copy(rayFromWorld);
	this.rayToWorld.copy(rayToWorld);
	this.hitNormalWorld.copy(hitNormalWorld);
	this.hitPointWorld.copy(hitPointWorld);
	this.shape = shape;
	this.body = body;
	this.distance = distance;
};
},{"../math/Vec3":27}],11:[function(_dereq_,module,exports){
var Shape = _dereq_('../shapes/Shape');
var Broadphase = _dereq_('../collision/Broadphase');

module.exports = SAPBroadphase;

/**
 * Sweep and prune broadphase along one axis.
 *
 * @class SAPBroadphase
 * @constructor
 * @param {World} [world]
 * @extends Broadphase
 */
function SAPBroadphase(world){
    Broadphase.apply(this);

    /**
     * List of bodies currently in the broadphase.
     * @property axisList
     * @type {Array}
     */
    this.axisList = [];

    /**
     * The world to search in.
     * @property world
     * @type {World}
     */
    this.world = null;

    /**
     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.
     * @property axisIndex
     * @type {Number}
     */
    this.axisIndex = 0;

    var axisList = this.axisList;

    this._addBodyHandler = function(e){
        axisList.push(e.body);
    };

    this._removeBodyHandler = function(e){
        var idx = axisList.indexOf(e.body);
        if(idx !== -1){
            axisList.splice(idx,1);
        }
    };

    if(world){
        this.setWorld(world);
    }
}
SAPBroadphase.prototype = new Broadphase();

/**
 * Change the world
 * @method setWorld
 * @param  {World} world
 */
SAPBroadphase.prototype.setWorld = function(world){
    // Clear the old axis array
    this.axisList.length = 0;

    // Add all bodies from the new world
    for(var i=0; i<world.bodies.length; i++){
        this.axisList.push(world.bodies[i]);
    }

    // Remove old handlers, if any
    world.removeEventListener("addBody", this._addBodyHandler);
    world.removeEventListener("removeBody", this._removeBodyHandler);

    // Add handlers to update the list of bodies.
    world.addEventListener("addBody", this._addBodyHandler);
    world.addEventListener("removeBody", this._removeBodyHandler);

    this.world = world;
    this.dirty = true;
};

/**
 * @static
 * @method insertionSortX
 * @param  {Array} a
 * @return {Array}
 */
SAPBroadphase.insertionSortX = function(a) {
    for(var i=1,l=a.length;i<l;i++) {
        var v = a[i];
        for(var j=i - 1;j>=0;j--) {
            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){
                break;
            }
            a[j+1] = a[j];
        }
        a[j+1] = v;
    }
    return a;
};

/**
 * @static
 * @method insertionSortY
 * @param  {Array} a
 * @return {Array}
 */
SAPBroadphase.insertionSortY = function(a) {
    for(var i=1,l=a.length;i<l;i++) {
        var v = a[i];
        for(var j=i - 1;j>=0;j--) {
            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){
                break;
            }
            a[j+1] = a[j];
        }
        a[j+1] = v;
    }
    return a;
};

/**
 * @static
 * @method insertionSortZ
 * @param  {Array} a
 * @return {Array}
 */
SAPBroadphase.insertionSortZ = function(a) {
    for(var i=1,l=a.length;i<l;i++) {
        var v = a[i];
        for(var j=i - 1;j>=0;j--) {
            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){
                break;
            }
            a[j+1] = a[j];
        }
        a[j+1] = v;
    }
    return a;
};

/**
 * Collect all collision pairs
 * @method collisionPairs
 * @param  {World} world
 * @param  {Array} p1
 * @param  {Array} p2
 */
SAPBroadphase.prototype.collisionPairs = function(world,p1,p2){
    var bodies = this.axisList,
        N = bodies.length,
        axisIndex = this.axisIndex,
        i, j;

    if(this.dirty){
        this.sortList();
        this.dirty = false;
    }

    // Look through the list
    for(i=0; i !== N; i++){
        var bi = bodies[i];

        for(j=i+1; j < N; j++){
            var bj = bodies[j];

            if(!this.needBroadphaseCollision(bi,bj)){
                continue;
            }

            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){
                break;
            }

            this.intersectionTest(bi,bj,p1,p2);
        }
    }
};

SAPBroadphase.prototype.sortList = function(){
    var axisList = this.axisList;
    var axisIndex = this.axisIndex;
    var N = axisList.length;

    // Update AABBs
    for(var i = 0; i!==N; i++){
        var bi = axisList[i];
        if(bi.aabbNeedsUpdate){
            bi.computeAABB();
        }
    }

    // Sort the list
    if(axisIndex === 0){
        SAPBroadphase.insertionSortX(axisList);
    } else if(axisIndex === 1){
        SAPBroadphase.insertionSortY(axisList);
    } else if(axisIndex === 2){
        SAPBroadphase.insertionSortZ(axisList);
    }
};

/**
 * Check if the bounds of two bodies overlap, along the given SAP axis.
 * @static
 * @method checkBounds
 * @param  {Body} bi
 * @param  {Body} bj
 * @param  {Number} axisIndex
 * @return {Boolean}
 */
SAPBroadphase.checkBounds = function(bi, bj, axisIndex){
    var axis;
    if(axisIndex === 0){ axis = 'x'; }
    if(axisIndex === 1){ axis = 'y'; }
    if(axisIndex === 2){ axis = 'z'; }

    var biPos = bi.position[axis],
        ri = bi.boundingRadius,
        bjPos = bj.position[axis],
        rj = bj.boundingRadius,
        boundA1 = biPos - ri,
        boundA2 = biPos + ri,
        boundB1 = bjPos - rj,
        boundB2 = bjPos + rj;

    return boundB1 < boundA2;
};

/**
 * Computes the variance of the body positions and estimates the best
 * axis to use. Will automatically set property .axisIndex.
 * @method autoDetectAxis
 */
SAPBroadphase.prototype.autoDetectAxis = function(){
    var sumX=0,
        sumX2=0,
        sumY=0,
        sumY2=0,
        sumZ=0,
        sumZ2=0,
        bodies = this.axisList,
        N = bodies.length,
        invN=1/N;

    for(var i=0; i!==N; i++){
        var b = bodies[i];

        var centerX = b.position.x;
        sumX += centerX;
        sumX2 += centerX*centerX;

        var centerY = b.position.y;
        sumY += centerY;
        sumY2 += centerY*centerY;

        var centerZ = b.position.z;
        sumZ += centerZ;
        sumZ2 += centerZ*centerZ;
    }

    var varianceX = sumX2 - sumX*sumX*invN,
        varianceY = sumY2 - sumY*sumY*invN,
        varianceZ = sumZ2 - sumZ*sumZ*invN;

    if(varianceX > varianceY){
        if(varianceX > varianceZ){
            this.axisIndex = 0;
        } else{
            this.axisIndex = 2;
        }
    } else if(varianceY > varianceZ){
        this.axisIndex = 1;
    } else{
        this.axisIndex = 2;
    }
};

/**
 * Returns all the bodies within an AABB.
 * @method aabbQuery
 * @param  {World} world
 * @param  {AABB} aabb
 * @param {array} result An array to store resulting bodies in.
 * @return {array}
 */
SAPBroadphase.prototype.aabbQuery = function(world, aabb, result){
    result = result || [];

    if(this.dirty){
        this.sortList();
        this.dirty = false;
    }

    var axisIndex = this.axisIndex, axis = 'x';
    if(axisIndex === 1){ axis = 'y'; }
    if(axisIndex === 2){ axis = 'z'; }

    var axisList = this.axisList;
    var lower = aabb.lowerBound[axis];
    var upper = aabb.upperBound[axis];
    for(var i = 0; i < axisList.length; i++){
        var b = axisList[i];

        if(b.aabbNeedsUpdate){
            b.computeAABB();
        }

        if(b.aabb.overlaps(aabb)){
            result.push(b);
        }
    }

    return result;
};
},{"../collision/Broadphase":5,"../shapes/Shape":40}],12:[function(_dereq_,module,exports){
module.exports = Constraint;

var Utils = _dereq_('../utils/Utils');

/**
 * Constraint base class
 * @class Constraint
 * @author schteppe
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {object} [options]
 * @param {boolean} [options.collideConnected=true]
 * @param {boolean} [options.wakeUpBodies=true]
 */
function Constraint(bodyA, bodyB, options){
    options = Utils.defaults(options,{
        collideConnected : true,
        wakeUpBodies : true,
    });

    /**
     * Equations to be solved in this constraint
     * @property equations
     * @type {Array}
     */
    this.equations = [];

    /**
     * @property {Body} bodyA
     */
    this.bodyA = bodyA;

    /**
     * @property {Body} bodyB
     */
    this.bodyB = bodyB;

    /**
     * @property {Number} id
     */
    this.id = Constraint.idCounter++;

    /**
     * Set to true if you want the bodies to collide when they are connected.
     * @property collideConnected
     * @type {boolean}
     */
    this.collideConnected = options.collideConnected;

    if(options.wakeUpBodies){
        if(bodyA){
            bodyA.wakeUp();
        }
        if(bodyB){
            bodyB.wakeUp();
        }
    }
}

/**
 * @method update
 */
Constraint.prototype.update = function(){
    throw new Error("method update() not implmemented in this Constraint subclass!");
};

Constraint.idCounter = 0;

},{"../utils/Utils":48}],13:[function(_dereq_,module,exports){
module.exports = DistanceConstraint;

var Constraint = _dereq_('./Constraint');
var ContactEquation = _dereq_('../equations/ContactEquation');

/**
 * Constrains two bodies to be at a constant distance from each other.
 * @class DistanceConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} distance
 * @param {Number} maxForce
 * @extends Constraint
 */
function DistanceConstraint(bodyA,bodyB,distance,maxForce){
    Constraint.call(this,bodyA,bodyB);

    if(typeof(maxForce)==="undefined" ) {
        maxForce = 1e6;
    }

    // Equations to be fed to the solver
    var eqs = this.equations = [
        new ContactEquation(bodyA,bodyB), // Just in the normal direction
    ];

    var normal = eqs[0];

    normal.minForce = -maxForce;
    normal.maxForce =  maxForce;

    // Update
    this.update = function(){
        bodyB.position.vsub(bodyA.position,normal.ni);
        normal.ni.normalize();
        /*bodyA.quaternion.vmult(pivotA,normal.ri);
        bodyB.quaternion.vmult(pivotB,normal.rj);*/
        normal.ni.mult( distance*0.5,normal.ri);
        normal.ni.mult( -distance*0.5,normal.rj);
    };
}
DistanceConstraint.prototype = new Constraint();

},{"../equations/ContactEquation":16,"./Constraint":12}],14:[function(_dereq_,module,exports){
module.exports = HingeConstraint;

var Constraint = _dereq_('./Constraint');
var RotationalEquation = _dereq_('../equations/RotationalEquation');
var RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');
var ContactEquation = _dereq_('../equations/ContactEquation');
var Vec3 = _dereq_('../math/Vec3');

/**
 * Hinge constraint. Tries to keep the local body axes equal.
 * @class HingeConstraint
 * @constructor
 * @author schteppe
 * @param {RigidBody} bodyA
 * @param {RigidBody} bodyB
 * @param {object} [options]
 * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.
 * @param {Vec3} [options.axisA] an axis that bodyA can rotate around.
 * @param {Vec3} [options.pivotB]
 * @param {Vec3} [options.axisB]
 * @param {Number} [options.maxForce=1e6]
 * @extends Constraint
 */
function HingeConstraint(bodyA, bodyB, options){ // bodyA, pivotA, axisA, bodyB, pivotB, axisB, maxForce
    Constraint.call(this, bodyA, bodyB, options);

    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;

    // TODO: use a clever default setup... how?
    var pivotA = this.pivotA = typeof(options.pivotA) !== 'undefined' ? options.pivotA.clone() : new Vec3();
    var pivotB = this.pivotB = typeof(options.pivotB) !== 'undefined' ? options.pivotB.clone() : new Vec3();
    var axisA = this.axisA = typeof(options.axisA) !== 'undefined' ? options.axisA.clone() : new Vec3(1,0,0);
    var axisB = this.axisB = typeof(options.axisB) !== 'undefined' ? options.axisB.clone() : new Vec3(1,0,0);

    var that = this;

    // Equations to be fed to the solver
    var eqs = this.equations = [
        new RotationalEquation(bodyA,bodyB), // rotational1
        new RotationalEquation(bodyA,bodyB), // rotational2
        new ContactEquation(bodyA,bodyB),    // p2pNormal
        new ContactEquation(bodyA,bodyB),    // p2pTangent1
        new ContactEquation(bodyA,bodyB),    // p2pTangent2
    ];

    var r1 =        this.getRotationalEquation1();
    var r2 =        this.getRotationalEquation2();
    var normal =    this.getPointToPointEquation1();
    var t1 =        this.getPointToPointEquation2();
    var t2 =        this.getPointToPointEquation3();
    var motor; // not activated by default

    t1.minForce = t2.minForce = normal.minForce = -maxForce;
    t1.maxForce = t2.maxForce = normal.maxForce =  maxForce;

    var unitPivotA = pivotA.unit();
    var unitPivotB = pivotB.unit();

    var axisA_x_pivotA = this.axisA_x_pivotA = new Vec3();
    var axisA_x_axisA_x_pivotA = this.axisA_x_axisA_x_pivotA = new Vec3();
    var axisB_x_pivotB = this.axisB_x_pivotB = new Vec3();
    axisA.cross(unitPivotA,axisA_x_pivotA);
    if(axisA_x_pivotA.norm2() < 0.001){ // pivotA is along the same line as axisA
        unitPivotA.tangents(axisA_x_pivotA,axisA_x_pivotA);
    }
    axisA.cross(axisA_x_pivotA,axisA_x_axisA_x_pivotA);
    axisB.cross(unitPivotB,axisB_x_pivotB);
    if(axisB_x_pivotB.norm2() < 0.001){ // pivotB is along the same line as axisB
        axisB.tangents(axisB_x_pivotB,axisB_x_pivotB);
    }

    axisA_x_pivotA.normalize();
    axisB_x_pivotB.normalize();

    // Motor stuff
    this.motorEnabled = false;
    this.motorTargetVelocity = 0;
    this.motorMinForce = -maxForce;
    this.motorMaxForce = maxForce;
    this.motorEquation = new RotationalMotorEquation(bodyA,bodyB,maxForce);
}
HingeConstraint.prototype = new Constraint();

/**
 * @method enableMotor
 */
HingeConstraint.prototype.enableMotor = function(){
    if(!this.motorEnabled){
        this.equations.push(this.motorEquation);
        this.motorEnabled = true;
    }
};

/**
 * @method disableMotor
 */
HingeConstraint.prototype.disableMotor = function(){
    if(this.motorEnabled){
        this.motorEnabled = false;
        this.equations.pop();
    }
};

HingeConstraint.prototype.update = function(){
    var bodyA = this.bodyA,
        bodyB = this.bodyB,
        eqs = this.equations,
        motor = this.motorEquation,
        r1 = eqs[0],
        r2 = eqs[1],
        normal = eqs[2],
        t1 = eqs[3],
        t2 = eqs[4];
    var axisA_x_pivotA = this.axisA_x_pivotA;
    var axisA = this.axisA;
    var axisB = this.axisB;
    var pivotA = this.pivotA;
    var pivotB = this.pivotB;
    var axisA_x_axisA_x_pivotA = this.axisA_x_axisA_x_pivotA;
    var axisB_x_pivotB = this.axisB_x_pivotB;

    // Update world positions of pivots
    /*
    bodyB.position.vsub(bodyA.position,normal.ni);
    normal.ni.normalize();
    */
    normal.ni.set(1,0,0);
    t1.ni.set(0,1,0);
    t2.ni.set(0,0,1);
    bodyA.quaternion.vmult(this.pivotA,normal.ri);
    bodyB.quaternion.vmult(this.pivotB,normal.rj);

    //normal.ni.tangents(t1.ni,t2.ni);
    t1.ri.copy(normal.ri);
    t1.rj.copy(normal.rj);
    t2.ri.copy(normal.ri);
    t2.rj.copy(normal.rj);

    axisA.cross(pivotA, axisA_x_pivotA);
    if(axisA_x_pivotA.norm2() < 0.001){ // pivotA is along the same line as axisA
        pivotA.tangents(axisA_x_pivotA, axisA_x_pivotA);
    }
    axisA.cross(axisA_x_pivotA, axisA_x_axisA_x_pivotA);
    axisB.cross(pivotB, axisB_x_pivotB);
    if(axisB_x_pivotB.norm2() < 0.001){ // pivotB is along the same line as axisB
        axisB.tangents(axisB_x_pivotB,axisB_x_pivotB);
    }

    axisA_x_pivotA.normalize();
    axisB_x_pivotB.normalize();

    // update rotational constraints
    bodyA.quaternion.vmult(axisA_x_pivotA, r1.ni);
    bodyB.quaternion.vmult(axisB, r1.nj);
    bodyA.quaternion.vmult(axisA_x_axisA_x_pivotA, r2.ni);
    bodyB.quaternion.vmult(axisB, r2.nj);

    if(this.motorEnabled){
        bodyA.quaternion.vmult(this.axisA, motor.axisA);
        bodyB.quaternion.vmult(this.axisB, motor.axisB);
        motor.targetVelocity = this.motorTargetVelocity;
        motor.maxForce = this.motorMaxForce;
        motor.minForce = this.motorMinForce;
    }
};

HingeConstraint.prototype.getRotationalEquation1 =   function(){ return this.equations[0]; };
HingeConstraint.prototype.getRotationalEquation2 =   function(){ return this.equations[1]; };
HingeConstraint.prototype.getPointToPointEquation1 = function(){ return this.equations[2]; };
HingeConstraint.prototype.getPointToPointEquation2 = function(){ return this.equations[3]; };
HingeConstraint.prototype.getPointToPointEquation3 = function(){ return this.equations[4]; };

},{"../equations/ContactEquation":16,"../equations/RotationalEquation":19,"../equations/RotationalMotorEquation":20,"../math/Vec3":27,"./Constraint":12}],15:[function(_dereq_,module,exports){
module.exports = PointToPointConstraint;

var Constraint = _dereq_('./Constraint');
var ContactEquation = _dereq_('../equations/ContactEquation');

/**
 * Connects two bodies at given offset points.
 * @class PointToPointConstraint
 * @extends Constraint
 * @constructor
 * @param {Body} bodyA
 * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.
 * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get sort of a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.
 * @param {Vec3} pivotB See pivotA.
 * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.
 *
 * @example
 *     var bodyA = new Body({ mass: 1 });
 *     var bodyB = new Body({ mass: 1 });
 *     bodyA.position.set(-1, 0, 0);
 *     bodyB.position.set(1, 0, 0);
 *     bodyA.addShape(shapeA);
 *     bodyB.addShape(shapeB);
 *     world.addBody(bodyA);
 *     world.addBody(bodyB);
 *     var localPivotA = new Vec3(1, 0, 0);
 *     var localPivotB = new Vec3(-1, 0, 0);
 *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);
 *     world.addConstraint(constraint);
 */
function PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){
    Constraint.call(this,bodyA,bodyB);

    // Equations to be fed to the solver
    var eqs = this.equations = [
        new ContactEquation(bodyA,bodyB), // Normal
        new ContactEquation(bodyA,bodyB), // Tangent2
        new ContactEquation(bodyA,bodyB), // Tangent2
    ];

    var normal = eqs[0];
    var t1 = eqs[1];
    var t2 = eqs[2];

    t1.minForce = t2.minForce = normal.minForce = -maxForce;
    t1.maxForce = t2.maxForce = normal.maxForce =  maxForce;

    // Update
    this.update = function(){
        bodyB.position.vsub(bodyA.position,normal.ni);
        normal.ni.normalize();
        bodyA.quaternion.vmult(pivotA,normal.ri);
        bodyB.quaternion.vmult(pivotB,normal.rj);

        normal.ni.tangents(t1.ni,t2.ni);
        t1.ri.copy(normal.ri);
        t1.rj.copy(normal.rj);
        t2.ri.copy(normal.ri);
        t2.rj.copy(normal.rj);
    };
}
PointToPointConstraint.prototype = new Constraint();

},{"../equations/ContactEquation":16,"./Constraint":12}],16:[function(_dereq_,module,exports){
module.exports = ContactEquation;

var Equation = _dereq_('./Equation');
var Vec3 = _dereq_('../math/Vec3');
var Mat3 = _dereq_('../math/Mat3');

/**
 * Contact/non-penetration constraint equation
 * @class ContactEquation
 * @constructor
 * @author schteppe
 * @param {Body} bj
 * @param {Body} bi
 * @extends Equation
 */
function ContactEquation(bi,bj){
    Equation.call(this,bi,bj,0,1e6);

    /**
     * @property restitution
     * @type {Number}
     */
    this.restitution = 0.0; // "bounciness": u1 = -e*u0

    /**
     * World-oriented vector that goes from the center of bi to the contact point.
     * @property {Vec3} ri
     */
    this.ri = new Vec3();

    /**
     * World-oriented vector that starts in body j position and goes to the contact point.
     * @property {Vec3} rj
     */
    this.rj = new Vec3();

    this.penetrationVec = new Vec3();

    /**
     * Contact normal, pointing out of body i.
     * @property {Vec3} ni
     */
    this.ni = new Vec3();

    this.rixn = new Vec3();
    this.rjxn = new Vec3();

    this.invIi = new Mat3();
    this.invIj = new Mat3();

    // Cache
    this.biInvInertiaTimesRixn =  new Vec3();
    this.bjInvInertiaTimesRjxn =  new Vec3();
}

ContactEquation.prototype = new Equation();
ContactEquation.prototype.constructor = ContactEquation;

var ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors
var ContactEquation_computeB_temp2 = new Vec3();
var ContactEquation_computeB_zero = new Vec3();
ContactEquation.prototype.computeB = function(h){
    var a = this.a,
        b = this.b,
        bi = this.bi,
        bj = this.bj,
        ri = this.ri,
        rj = this.rj,
        rixn = this.rixn,
        rjxn = this.rjxn,

        zero = ContactEquation_computeB_zero,

        vi = bi.velocity,
        wi = bi.angularVelocity ? bi.angularVelocity : zero,
        fi = bi.force,
        taui = bi.torque ? bi.torque : zero,

        vj = bj.velocity,
        wj = bj.angularVelocity ? bj.angularVelocity : zero,
        fj = bj.force,
        tauj = bj.torque ? bj.torque : zero,

        penetrationVec = this.penetrationVec,
        invMassi = bi.invMass,
        invMassj = bj.invMass,

        invIi = this.invIi,
        invIj = this.invIj,

        GA = this.jacobianElementA,
        GB = this.jacobianElementB,

        n = this.ni;

    // Caluclate cross products
    ri.cross(n,rixn);
    rj.cross(n,rjxn);

    // g = xj+rj -(xi+ri)
    // G = [ -ni  -rixn  ni  rjxn ]
    n.negate(GA.spatial);
    rixn.negate(GA.rotational);
    GB.spatial.copy(n);
    GB.rotational.copy(rjxn);

    // Calculate the penetration vector
    var penetrationVec = this.penetrationVec;
    penetrationVec.set(0,0,0);
    penetrationVec.vadd(bj.position,penetrationVec);
    penetrationVec.vadd(rj,penetrationVec);
    penetrationVec.vsub(bi.position,penetrationVec);
    penetrationVec.vsub(ri,penetrationVec);

    var g = n.dot(penetrationVec);

    var invIi_vmult_taui = ContactEquation_computeB_temp1;
    var invIj_vmult_tauj = ContactEquation_computeB_temp2;
    if(bi.invInertiaWorld){
        bi.invInertiaWorld.vmult(taui,invIi_vmult_taui);
    } else {
        invIi_vmult_taui.set(0,0,0);
    }
    if(bj.invInertiaWorld){
        bj.invInertiaWorld.vmult(tauj,invIj_vmult_tauj);
    } else {
        invIj_vmult_tauj.set(0,0,0);
    }

    // Compute iteration
    var ePlusOne = this.restitution+1;
    var GW = ePlusOne*vj.dot(n) - ePlusOne*vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);
    var GiMf = this.computeGiMf();//fj.dot(n)*invMassj - fi.dot(n)*invMassi + rjxn.dot(invIj_vmult_tauj) - rixn.dot(invIi_vmult_taui);

    var B = - g * a - GW * b - h*GiMf;

    return B;
};

// Compute C = GMG+eps in the SPOOK equation
/*
var computeC_temp1 = new Vec3();
var computeC_temp2 = new Vec3();
ContactEquation.prototype.computeC = function(){
    var bi = this.bi;
    var bj = this.bj;
    var rixn = this.rixn;
    var rjxn = this.rjxn;
    var invMassi = bi.invMass;
    var invMassj = bj.invMass;

    var C = invMassi + invMassj + this.eps;

    var invIi = this.invIi;
    var invIj = this.invIj;

    // Compute rxn * I * rxn for each body
    if(bi.invInertiaWorld) bi.invInertiaWorld.vmult(rixn, this.biInvInertiaTimesRixn);
    if(bj.invInertiaWorld) bj.invInertiaWorld.vmult(rjxn, this.bjInvInertiaTimesRjxn);

    C += this.biInvInertiaTimesRixn.dot(rixn);
    C += this.bjInvInertiaTimesRjxn.dot(rjxn);

    return C;
};

var computeGWlambda_ulambda = new Vec3();
ContactEquation.prototype.computeGWlambda = function(){
    var bi = this.bi;
    var bj = this.bj;
    var ulambda = computeGWlambda_ulambda;

    var GWlambda = 0.0;

    bj.vlambda.vsub(bi.vlambda, ulambda);
    GWlambda += ulambda.dot(this.ni);

    // Angular
    if(bi.wlambda){
        GWlambda -= bi.wlambda.dot(this.rixn);
    }
    if(bj.wlambda){
        GWlambda += bj.wlambda.dot(this.rjxn);
    }

    return GWlambda;
};

var ContactEquation_addToWlambda_temp1 = new Vec3();
var ContactEquation_addToWlambda_temp2 = new Vec3();
ContactEquation.prototype.addToWlambda = function(deltalambda){
    var bi = this.bi,
        bj = this.bj,
        rixn = this.rixn,
        rjxn = this.rjxn,
        invMassi = bi.invMass,
        invMassj = bj.invMass,
        n = this.ni,
        temp1 = ContactEquation_addToWlambda_temp1,
        temp2 = ContactEquation_addToWlambda_temp2;


    // Add to linear velocity
    n.mult(invMassi * deltalambda, temp2);
    bi.vlambda.vsub(temp2,bi.vlambda);
    n.mult(invMassj * deltalambda, temp2);
    bj.vlambda.vadd(temp2,bj.vlambda);

    // Add to angular velocity
    if(bi.wlambda !== undefined){
        this.biInvInertiaTimesRixn.mult(deltalambda,temp1);

        bi.wlambda.vsub(temp1,bi.wlambda);
    }
    if(bj.wlambda !== undefined){
        this.bjInvInertiaTimesRjxn.mult(deltalambda,temp1);
        bj.wlambda.vadd(temp1,bj.wlambda);
    }
};
*/

},{"../math/Mat3":24,"../math/Vec3":27,"./Equation":17}],17:[function(_dereq_,module,exports){
module.exports = Equation;

var JacobianElement = _dereq_('../math/JacobianElement'),
    Vec3 = _dereq_('../math/Vec3');

/**
 * Equation base class
 * @class Equation
 * @constructor
 * @author schteppe
 * @param {Body} bi
 * @param {Body} bj
 * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.
 * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.
 */
function Equation(bi,bj,minForce,maxForce){
    this.id = -1;

    /**
     * @property {number} minForce
     */
    this.minForce = typeof(minForce)==="undefined" ? -1e6 : minForce;

    /**
     * @property {number} maxForce
     */
    this.maxForce = typeof(maxForce)==="undefined" ? 1e6 : maxForce;

    /**
     * @property bi
     * @type {Body}
     */
    this.bi = bi;

    /**
     * @property bj
     * @type {Body}
     */
    this.bj = bj;

    /**
     * SPOOK parameter
     * @property {number} a
     */
    this.a = 0.0;

    /**
     * SPOOK parameter
     * @property {number} b
     */
    this.b = 0.0;

    /**
     * SPOOK parameter
     * @property {number} eps
     */
    this.eps = 0.0;

    /**
     * @property {JacobianElement} jacobianElementA
     */
    this.jacobianElementA = new JacobianElement();

    /**
     * @property {JacobianElement} jacobianElementA
     */
    this.jacobianElementB = new JacobianElement();

    // Set typical spook params
    this.setSpookParams(1e7,4,1/60);

    this.enabled = true;
}
Equation.prototype.constructor = Equation;

/**
 * Recalculates a,b,eps.
 * @method setSpookParams
 */
Equation.prototype.setSpookParams = function(stiffness,relaxation,timeStep){
    var d = relaxation,
        k = stiffness,
        h = timeStep;
    this.a = 4.0 / (h * (1 + 4 * d));
    this.b = (4.0 * d) / (1 + 4 * d);
    this.eps = 4.0 / (h * h * k * (1 + 4 * d));
};

/**
 * Computes the RHS of the SPOOK equation
 * @method computeB
 * @return {Number}
 */
Equation.prototype.computeB = function(a,b,h){
    var GW = this.computeGW(),
        Gq = this.computeGq(),
        GiMf = this.computeGiMf();
    return - Gq * a - GW * b - GiMf*h;
};

/**
 * Computes G*q, where q are the generalized body coordinates
 * @method computeGq
 * @return {Number}
 */
Equation.prototype.computeGq = function(){
    var GA = this.jacobianElementA,
        GB = this.jacobianElementB,
        bi = this.bi,
        bj = this.bj,
        xi = bi.position,
        xj = bj.position;
    return GA.spatial.dot(xi) + GB.spatial.dot(xj);
};

var zero = new Vec3();

/**
 * Computes G*W, where W are the body velocities
 * @method computeGW
 * @return {Number}
 */
Equation.prototype.computeGW = function(){
    var GA = this.jacobianElementA,
        GB = this.jacobianElementB,
        bi = this.bi,
        bj = this.bj,
        vi = bi.velocity,
        vj = bj.velocity,
        wi = bi.angularVelocity || zero,
        wj = bj.angularVelocity || zero;
    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);
};


/**
 * Computes G*Wlambda, where W are the body velocities
 * @method computeGWlambda
 * @return {Number}
 */
Equation.prototype.computeGWlambda = function(){
    var GA = this.jacobianElementA,
        GB = this.jacobianElementB,
        bi = this.bi,
        bj = this.bj,
        vi = bi.vlambda,
        vj = bj.vlambda,
        wi = bi.wlambda || zero,
        wj = bj.wlambda || zero;
    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);
};

/**
 * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.
 * @method computeGiMf
 * @return {Number}
 */
var iMfi = new Vec3(),
    iMfj = new Vec3(),
    invIi_vmult_taui = new Vec3(),
    invIj_vmult_tauj = new Vec3();
Equation.prototype.computeGiMf = function(){
    var GA = this.jacobianElementA,
        GB = this.jacobianElementB,
        bi = this.bi,
        bj = this.bj,
        fi = bi.force,
        ti = bi.torque,
        fj = bj.force,
        tj = bj.torque,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve;

    if(bi.invInertiaWorldSolve){ bi.invInertiaWorldSolve.vmult(ti,invIi_vmult_taui); }
    else { invIi_vmult_taui.set(0,0,0); }
    if(bj.invInertiaWorldSolve){ bj.invInertiaWorldSolve.vmult(tj,invIj_vmult_tauj); }
    else { invIj_vmult_tauj.set(0,0,0); }

    fi.mult(invMassi,iMfi);
    fj.mult(invMassj,iMfj);

    return GA.multiplyVectors(iMfi,invIi_vmult_taui) + GB.multiplyVectors(iMfj,invIj_vmult_tauj);
};

/**
 * Computes G*inv(M)*G'
 * @method computeGiMGt
 * @return {Number}
 */
var tmp = new Vec3();
Equation.prototype.computeGiMGt = function(){
    var GA = this.jacobianElementA,
        GB = this.jacobianElementB,
        bi = this.bi,
        bj = this.bj,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve,
        invIi = bi.invInertiaWorldSolve,
        invIj = bj.invInertiaWorldSolve,
        result = invMassi + invMassj;

    if(invIi){
        invIi.vmult(GA.rotational,tmp);
        result += tmp.dot(GA.rotational);
    }

    if(invIj){
        invIj.vmult(GB.rotational,tmp);
        result += tmp.dot(GB.rotational);
    }

    return  result;
};

var addToWlambda_temp = new Vec3(),
    addToWlambda_Gi = new Vec3(),
    addToWlambda_Gj = new Vec3(),
    addToWlambda_ri = new Vec3(),
    addToWlambda_rj = new Vec3(),
    addToWlambda_Mdiag = new Vec3();

/**
 * Add constraint velocity to the bodies.
 * @method addToWlambda
 * @param {Number} deltalambda
 */
Equation.prototype.addToWlambda = function(deltalambda){
    var GA = this.jacobianElementA,
        GB = this.jacobianElementB,
        bi = this.bi,
        bj = this.bj,
        temp = addToWlambda_temp;

    // Add to linear velocity
    // v_lambda += inv(M) * delta_lamba * G
    GA.spatial.mult(bi.invMassSolve * deltalambda,temp);
    bi.vlambda.vadd(temp, bi.vlambda);

    GB.spatial.mult(bj.invMassSolve * deltalambda,temp);
    bj.vlambda.vadd(temp, bj.vlambda);

    // Add to angular velocity
    if(bi.invInertiaWorldSolve){
        bi.invInertiaWorldSolve.vmult(GA.rotational,temp);
        temp.mult(deltalambda,temp);
        bi.wlambda.vadd(temp,bi.wlambda);
    }

    if(bj.invInertiaWorldSolve){
        bj.invInertiaWorldSolve.vmult(GB.rotational,temp);
        temp.mult(deltalambda,temp);
        bj.wlambda.vadd(temp,bj.wlambda);
    }
};

/**
 * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps
 * @method computeInvC
 * @param  {Number} eps
 * @return {Number}
 */
Equation.prototype.computeC = function(){
    return this.computeGiMGt() + this.eps;
};

},{"../math/JacobianElement":23,"../math/Vec3":27}],18:[function(_dereq_,module,exports){
module.exports = FrictionEquation;

var Equation = _dereq_('./Equation');
var Vec3 = _dereq_('../math/Vec3');
var Mat3 = _dereq_('../math/Mat3');

/**
 * Constrains the slipping in a contact along a tangent
 * @class FrictionEquation
 * @constructor
 * @author schteppe
 * @param {Body} bi
 * @param {Body} bj
 * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g
 * @extends Equation
 */
function FrictionEquation(bi,bj,slipForce){
    Equation.call(this,bi,bj,-slipForce,slipForce);
    this.ri = new Vec3();
    this.rj = new Vec3();
    this.t = new Vec3(); // tangent


    // The following is just cache
    this.rixt = new Vec3();
    this.rjxt = new Vec3();
    this.wixri = new Vec3();
    this.wjxrj = new Vec3();

    this.invIi = new Mat3();
    this.invIj = new Mat3();

    this.relVel = new Vec3();
    this.relForce = new Vec3();

    this.biInvInertiaTimesRixt =  new Vec3();
    this.bjInvInertiaTimesRjxt =  new Vec3();
}

FrictionEquation.prototype = new Equation();
FrictionEquation.prototype.constructor = FrictionEquation;

var FrictionEquation_computeB_temp1 = new Vec3();
var FrictionEquation_computeB_temp2 = new Vec3();
var FrictionEquation_computeB_zero = new Vec3();
FrictionEquation.prototype.computeB = function(h){
    var a = this.a,
        b = this.b,
        bi = this.bi,
        bj = this.bj,
        ri = this.ri,
        rj = this.rj,
        rixt = this.rixt,
        rjxt = this.rjxt,
        wixri = this.wixri,
        wjxrj = this.wjxrj,
        zero = FrictionEquation_computeB_zero;

    var vi = bi.velocity,
        wi = bi.angularVelocity ? bi.angularVelocity : zero,
        fi = bi.force,
        taui = bi.torque ? bi.torque : zero,

        vj = bj.velocity,
        wj = bj.angularVelocity ? bj.angularVelocity : zero,
        fj = bj.force,
        tauj = bj.torque ? bj.torque : zero,

        relVel = this.relVel,
        relForce = this.relForce,
        invMassi = bi.invMass,
        invMassj = bj.invMass,

        invIi = this.invIi,
        invIj = this.invIj,

        t = this.t,

        invIi_vmult_taui = FrictionEquation_computeB_temp1,
        invIj_vmult_tauj = FrictionEquation_computeB_temp2;

    // Caluclate cross products
    ri.cross(t,rixt);
    rj.cross(t,rjxt);

    wi.cross(ri,wixri);
    wj.cross(rj,wjxrj);

    // G = [-t -rixt t rjxt]
    // And remember, this is a pure velocity constraint, g is always zero!
    var GA = this.jacobianElementA,
        GB = this.jacobianElementB;
    t.negate(GA.spatial);
    rixt.negate(GA.rotational);
    GB.spatial.copy(t);
    GB.rotational.copy(rjxt);

    if(bi.invInertiaWorld){ bi.invInertiaWorld.vmult(taui,invIi_vmult_taui); }
    else { invIi_vmult_taui.set(0,0,0); }
    if(bj.invInertiaWorld){ bj.invInertiaWorld.vmult(tauj,invIj_vmult_tauj); }
    else { invIj_vmult_tauj.set(0,0,0); }

    var GW = this.computeGW();//vj.dot(t) - vi.dot(t) + wjxrj.dot(t) - wixri.dot(t), // eq. 40
    var GiMf = this.computeGiMf();//fj.dot(t)*invMassj - fi.dot(t)*invMassi + rjxt.dot(invIj_vmult_tauj) - rixt.dot(invIi_vmult_taui);

    // we do only want to constrain velocity, so g=0
    var B = - GW * b - h*GiMf;

    return B;
};

/*
// Compute C = G * Minv * G + eps
//var FEcomputeC_temp1 = new Vec3();
//var FEcomputeC_temp2 = new Vec3();
FrictionEquation.prototype.computeC = function(){
    var bi = this.bi,
        bj = this.bj,
        rixt = this.rixt,
        rjxt = this.rjxt,
        invMassi = bi.invMass,
        invMassj = bj.invMass,
        C = invMassi + invMassj + this.eps,
        invIi = this.invIi,
        invIj = this.invIj;

    // Compute rxt * I * rxt for each body
    if(bi.invInertiaWorld) bi.invInertiaWorld.vmult(rixt,this.biInvInertiaTimesRixt);
    if(bj.invInertiaWorld) bj.invInertiaWorld.vmult(rjxt,this.bjInvInertiaTimesRjxt);
    C += this.biInvInertiaTimesRixt.dot(rixt);
    C += this.bjInvInertiaTimesRjxt.dot(rjxt);

    return C;
};

var FrictionEquation_computeGWlambda_ulambda = new Vec3();
FrictionEquation.prototype.computeGWlambda = function(){
    var bi = this.bi;
    var bj = this.bj;

    var GWlambda = 0.0;
    var ulambda = FrictionEquation_computeGWlambda_ulambda;
    bj.vlambda.vsub(bi.vlambda,ulambda);
    GWlambda += ulambda.dot(this.t);

    // Angular
    if(bi.wlambda){
        GWlambda -= bi.wlambda.dot(this.rixt);
    }
    if(bj.wlambda){
        GWlambda += bj.wlambda.dot(this.rjxt);
    }

    return GWlambda;
};

var FrictionEquation_addToWlambda_tmp = new Vec3();
FrictionEquation.prototype.addToWlambda = function(deltalambda){
    var bi = this.bi,
        bj = this.bj,
        rixt = this.rixt,
        rjxt = this.rjxt,
        invMassi = bi.invMass,
        invMassj = bj.invMass,
        t = this.t,
        tmp = FrictionEquation_addToWlambda_tmp,
        wi = bi.wlambda,
        wj = bj.wlambda;

    // Add to linear velocity
    t.mult(invMassi * deltalambda, tmp);
    bi.vlambda.vsub(tmp,bi.vlambda);

    t.mult(invMassj * deltalambda, tmp);
    bj.vlambda.vadd(tmp,bj.vlambda);

    // Add to angular velocity
    if(wi){
        this.biInvInertiaTimesRixt.mult(deltalambda,tmp);
        wi.vsub(tmp,wi);
    }
    if(wj){
        this.bjInvInertiaTimesRjxt.mult(deltalambda,tmp);
        wj.vadd(tmp,wj);
    }
};
*/

},{"../math/Mat3":24,"../math/Vec3":27,"./Equation":17}],19:[function(_dereq_,module,exports){
module.exports = RotationalEquation;

var Vec3 = _dereq_('../math/Vec3');
var Mat3 = _dereq_('../math/Mat3');
var Equation = _dereq_('./Equation');

/**
 * Rotational constraint. Works to keep the local vectors orthogonal to each other.
 * @class RotationalEquation
 * @constructor
 * @author schteppe
 * @param {RigidBody} bj
 * @param {Vec3} localVectorInBodyA
 * @param {RigidBody} bi
 * @param {Vec3} localVectorInBodyB
 * @extends Equation
 */
function RotationalEquation(bodyA, bodyB){
    Equation.call(this,bodyA,bodyB,-1e6,1e6);
    this.ni = new Vec3(); // World oriented localVectorInBodyA
    this.nj = new Vec3(); // ...and B

    this.nixnj = new Vec3();
    this.njxni = new Vec3();

    this.invIi = new Mat3();
    this.invIj = new Mat3();

    this.relVel = new Vec3();
    this.relForce = new Vec3();
}

RotationalEquation.prototype = new Equation();
RotationalEquation.prototype.constructor = RotationalEquation;

var zero = new Vec3();

RotationalEquation.prototype.computeB = function(h){
    var a = this.a,
        b = this.b,
        bi = this.bi,
        bj = this.bj,

        ni = this.ni,
        nj = this.nj,

        nixnj = this.nixnj,
        njxni = this.njxni,

        vi = bi.velocity,
        wi = bi.angularVelocity ? bi.angularVelocity : zero,
        fi = bi.force,
        taui = bi.torque ? bi.torque : zero,

        vj = bj.velocity,
        wj = bj.angularVelocity ? bj.angularVelocity : zero,
        fj = bj.force,
        tauj = bj.torque ? bj.torque : zero,

        invMassi = bi.invMass,
        invMassj = bj.invMass,

        GA = this.jacobianElementA,
        GB = this.jacobianElementB,

        invIi = this.invIi,
        invIj = this.invIj;

    // Caluclate cross products
    ni.cross(nj,nixnj);
    nj.cross(ni,njxni);

    // g = ni * nj
    // gdot = (nj x ni) * wi + (ni x nj) * wj
    // G = [0 njxni 0 nixnj]
    // W = [vi wi vj wj]
    GA.rotational.copy(njxni);
    GB.rotational.copy(nixnj);

    var g = -ni.dot(nj),
        GW = this.computeGW(),//njxni.dot(wi) + nixnj.dot(wj),
        GiMf = this.computeGiMf();//njxni.dot(invIi.vmult(taui)) + nixnj.dot(invIj.vmult(tauj));

    var B = - g * a - GW * b - h*GiMf;

    return B;
};

/*
// Compute C = GMG+eps
RotationalEquation.prototype.computeC = function(){
    var bi = this.bi;
    var bj = this.bj;
    var nixnj = this.nixnj;
    var njxni = this.njxni;
    var invMassi = bi.invMass;
    var invMassj = bj.invMass;

    var C = this.eps;


    C += bi.invInertiaWorld.vmult(njxni).dot(njxni);
    C += bj.invInertiaWorld.vmult(nixnj).dot(nixnj);

    return C;
};

var computeGWlambda_ulambda = new Vec3();
RotationalEquation.prototype.computeGWlambda = function(){
    var bi = this.bi;
    var bj = this.bj;
    var ulambda = computeGWlambda_ulambda;

    var GWlambda = 0.0;
    //bj.vlambda.vsub(bi.vlambda, ulambda);
    //GWlambda += ulambda.dot(this.ni);

    // Angular
    if(bi.wlambda){
        GWlambda += bi.wlambda.dot(this.njxni);
    }
    if(bj.wlambda){
        GWlambda += bj.wlambda.dot(this.nixnj);
    }

    //console.log("GWlambda:",GWlambda);

    return GWlambda;
};

RotationalEquation.prototype.addToWlambda = function(deltalambda){
    var bi = this.bi;
    var bj = this.bj;
    var nixnj = this.nixnj;
    var njxni = this.njxni;
    var invMassi = bi.invMass;
    var invMassj = bj.invMass;

    // Add to linear velocity
    //bi.vlambda.vsub(n.mult(invMassi * deltalambda),bi.vlambda);
    //bj.vlambda.vadd(n.mult(invMassj * deltalambda),bj.vlambda);

    // Add to angular velocity
    if(bi.wlambda){
        var I = bi.invInertiaWorld;
        bi.wlambda.vsub(I.vmult(nixnj).mult(deltalambda),bi.wlambda);
    }
    if(bj.wlambda){
        var I = bj.invInertiaWorld;
        bj.wlambda.vadd(I.vmult(nixnj).mult(deltalambda),bj.wlambda);
    }
};
*/

},{"../math/Mat3":24,"../math/Vec3":27,"./Equation":17}],20:[function(_dereq_,module,exports){
module.exports = RotationalMotorEquation;

var Vec3 = _dereq_('../math/Vec3');
var Mat3 = _dereq_('../math/Mat3');
var Equation = _dereq_('./Equation');

/**
 * Rotational motor constraint. Works to keep the relative angular velocity of the bodies to a given value
 * @class RotationalMotorEquation
 * @constructor
 * @author schteppe
 * @param {RigidBody} bodyA
 * @param {RigidBody} bodyB
 * @param {Number} maxForce
 * @extends Equation
 */
function RotationalMotorEquation(bodyA, bodyB, maxForce){
    maxForce = maxForce || 1e6;
    Equation.call(this,bodyA,bodyB,-maxForce,maxForce);
    this.axisA = new Vec3(); // World oriented rotational axis
    this.axisB = new Vec3(); // World oriented rotational axis

    this.invIi = new Mat3();
    this.invIj = new Mat3();

    /**
     * Motor velocity
     * @property {Number} targetVelocity
     */
    this.targetVelocity = 0;
}

RotationalMotorEquation.prototype = new Equation();
RotationalMotorEquation.prototype.constructor = RotationalMotorEquation;

var zero = new Vec3();

RotationalMotorEquation.prototype.computeB = function(h){
    var a = this.a,
        b = this.b,
        bi = this.bi,
        bj = this.bj,

        axisA = this.axisA,
        axisB = this.axisB,

        vi = bi.velocity,
        wi = bi.angularVelocity ? bi.angularVelocity : zero,
        fi = bi.force,
        taui = bi.torque ? bi.torque : zero,

        vj = bj.velocity,
        wj = bj.angularVelocity ? bj.angularVelocity : zero,
        fj = bj.force,
        tauj = bj.torque ? bj.torque : zero,

        GA = this.jacobianElementA,
        GB = this.jacobianElementB,

        invMassi = bi.invMass,
        invMassj = bj.invMass;

    // g = 0
    // gdot = axisA * wi - axisB * wj
    // G = [0 axisA 0 -axisB]
    // W = [vi wi vj wj]

    GA.rotational.copy(axisA);
    axisB.negate(GB.rotational);

    var GW = this.computeGW() - this.targetVelocity,
        GiMf = this.computeGiMf();//axis.dot(invIi.vmult(taui)) + axis.dot(invIj.vmult(tauj));

    var B = - GW * b - h*GiMf;

    return B;
};

/*
// Compute C = GMG+eps
RotationalMotorEquation.prototype.computeC = function(){
    var bi = this.bi;
    var bj = this.bj;
    var axisA = this.axisA;
    var axisB = this.axisB;
    var invMassi = bi.invMass;
    var invMassj = bj.invMass;

    var C = this.eps;

    C += bi.invInertiaWorld.vmult(axisA).dot(axisB);
    C += bj.invInertiaWorld.vmult(axisB).dot(axisB);

    return C;
};

var computeGWlambda_ulambda = new Vec3();
RotationalMotorEquation.prototype.computeGWlambda = function(){
    var bi = this.bi;
    var bj = this.bj;
    var ulambda = computeGWlambda_ulambda;
    var axisA = this.axisA;
    var axisB = this.axisB;

    var GWlambda = 0.0;
    //bj.vlambda.vsub(bi.vlambda, ulambda);
    //GWlambda += ulambda.dot(this.ni);

    // Angular
    if(bi.wlambda){
        GWlambda += bi.wlambda.dot(axisA);
    }
    if(bj.wlambda){
        GWlambda += bj.wlambda.dot(axisB);
    }

    //console.log("GWlambda:",GWlambda);

    return GWlambda;
};

RotationalMotorEquation.prototype.addToWlambda = function(deltalambda){
    var bi = this.bi;
    var bj = this.bj;
    var axisA = this.axisA;
    var axisB = this.axisB;
    var invMassi = bi.invMass;
    var invMassj = bj.invMass;

    // Add to linear velocity
    //bi.vlambda.vsub(n.mult(invMassi * deltalambda),bi.vlambda);
    //bj.vlambda.vadd(n.mult(invMassj * deltalambda),bj.vlambda);

    // Add to angular velocity
    if(bi.wlambda){
        var I = bi.invInertiaWorld;
        bi.wlambda.vsub(I.vmult(axisA).mult(deltalambda),bi.wlambda);
    }
    if(bj.wlambda){
        var I = bj.invInertiaWorld;
        bj.wlambda.vadd(I.vmult(axisB).mult(deltalambda),bj.wlambda);
    }
};
*/

},{"../math/Mat3":24,"../math/Vec3":27,"./Equation":17}],21:[function(_dereq_,module,exports){
var Utils = _dereq_('../utils/Utils');

module.exports = ContactMaterial;

/**
 * Defines what happens when two materials meet.
 * @class ContactMaterial
 * @constructor
 * @param {Material} m1
 * @param {Material} m2
 * @param {object} [options]
 * @param {Number} [options.friction=0.3]
 * @param {Number} [options.restitution=0.3]
 * @param {number} [options.contactEquationStiffness=1e7]
 * @param {number} [options.contactEquationRelaxation=3]
 * @param {number} [options.frictionEquationStiffness=1e7]
 * @param {Number} [options.frictionEquationRelaxation=3]
 */
function ContactMaterial(m1, m2, options){
    options = Utils.defaults(options, {
        friction: 0.3,
        restitution: 0.3,
        contactEquationStiffness: 1e7,
        contactEquationRelaxation: 3,
        frictionEquationStiffness: 1e7,
        frictionEquationRelaxation: 3
    });

    /**
     * Identifier of this material
     * @property {Number} id
     */
    this.id = ContactMaterial.idCounter++;

    /**
     * Participating materials
     * @property {Array} materials
     * @todo  Should be .materialA and .materialB instead
     */
    this.materials = [m1, m2];

    /**
     * Friction coefficient
     * @property {Number} friction
     */
    this.friction = options.friction;

    /**
     * Restitution coefficient
     * @property {Number} restitution
     */
    this.restitution = options.restitution;

    /**
     * Stiffness of the produced contact equations
     * @property {Number} contactEquationStiffness
     */
    this.contactEquationStiffness = options.contactEquationStiffness;

    /**
     * Relaxation time of the produced contact equations
     * @property {Number} contactEquationRelaxation
     */
    this.contactEquationRelaxation = options.contactEquationRelaxation;

    /**
     * Stiffness of the produced friction equations
     * @property {Number} frictionEquationStiffness
     */
    this.frictionEquationStiffness = options.frictionEquationStiffness;

    /**
     * Relaxation time of the produced friction equations
     * @property {Number} frictionEquationRelaxation
     */
    this.frictionEquationRelaxation = options.frictionEquationRelaxation;
}

ContactMaterial.idCounter = 0;

},{"../utils/Utils":48}],22:[function(_dereq_,module,exports){
module.exports = Material;

/**
 * Defines a physics material.
 * @class Material
 * @constructor
 * @param {String} name
 * @author schteppe
 */
function Material(name){
    /**
     * @property name
     * @type {String}
     */
    this.name = name;
    
    /**
     * material id.
     * @property id
     */
    this.id = Material.idCounter++;
}

Material.idCounter = 0;

},{}],23:[function(_dereq_,module,exports){
module.exports = JacobianElement;

var Vec3 = _dereq_('./Vec3');

/**
 * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.
 * @class JacobianElement
 * @constructor
 */
function JacobianElement(){

    /**
     * @property {Vec3} spatial
     */
    this.spatial = new Vec3();

    /**
     * @property {Vec3} rotational
     */
    this.rotational = new Vec3();
}

/**
 * Multiply with other JacobianElement
 * @method multiplyElement
 * @param  {JacobianElement} element
 * @return {Number}
 */
JacobianElement.prototype.multiplyElement = function(element){
    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);
};

/**
 * Multiply with two vectors
 * @method multiplyVectors
 * @param  {Vec3} spatial
 * @param  {Vec3} rotational
 * @return {Number}
 */
JacobianElement.prototype.multiplyVectors = function(spatial,rotational){
    return spatial.dot(this.spatial) + rotational.dot(this.rotational);
};

},{"./Vec3":27}],24:[function(_dereq_,module,exports){
module.exports = Mat3;

var Vec3 = _dereq_('./Vec3');

/**
 * A 3x3 matrix.
 * @class Mat3
 * @constructor
 * @param array elements Array of nine elements. Optional.
 * @author schteppe / http://github.com/schteppe
 */
function Mat3(elements){
    /**
     * A vector of length 9, containing all matrix elements
     * @property {Array} elements
     */
    if(elements){
        this.elements = elements;
    } else {
        this.elements = [0,0,0,0,0,0,0,0,0];
    }
}

/**
 * Sets the matrix to identity
 * @method identity
 * @todo Should perhaps be renamed to setIdentity() to be more clear.
 * @todo Create another function that immediately creates an identity matrix eg. eye()
 */
Mat3.prototype.identity = function(){
    this.elements[0] = 1;
    this.elements[1] = 0;
    this.elements[2] = 0;

    this.elements[3] = 0;
    this.elements[4] = 1;
    this.elements[5] = 0;

    this.elements[6] = 0;
    this.elements[7] = 0;
    this.elements[8] = 1;
};

/**
 * Set all elements to zero
 * @method setZero
 */
Mat3.prototype.setZero = function(){
    var e = this.elements;
    e[0] = 0;
    e[1] = 0;
    e[2] = 0;
    e[3] = 0;
    e[4] = 0;
    e[5] = 0;
    e[6] = 0;
    e[7] = 0;
    e[8] = 0;
};

/**
 * Sets the matrix diagonal elements from a Vec3
 * @method setTrace
 */
Mat3.prototype.setTrace = function(vec3){
    var e = this.elements;
    e[0] = vec3.x;
    e[4] = vec3.y;
    e[8] = vec3.z;
};

/**
 * Sets the matrix diagonal elements from a Vec3
 * @method setTrace
 */
Mat3.prototype.getTrace = function(target){
    var target = target || new Vec3();
    var e = this.elements;
    target.x = e[0];
    target.y = e[4];
    target.z = e[8];
};

/**
 * Matrix-Vector multiplication
 * @method vmult
 * @param {Vec3} v The vector to multiply with
 * @param {Vec3} target Optional, target to save the result in.
 */
Mat3.prototype.vmult = function(v,target){
    target = target || new Vec3();

    var e = this.elements,
        x = v.x,
        y = v.y,
        z = v.z;
    target.x = e[0]*x + e[1]*y + e[2]*z;
    target.y = e[3]*x + e[4]*y + e[5]*z;
    target.z = e[6]*x + e[7]*y + e[8]*z;

    return target;
};

/**
 * Matrix-scalar multiplication
 * @method smult
 * @param {Number} s
 */
Mat3.prototype.smult = function(s){
    for(var i=0; i<this.elements.length; i++){
        this.elements[i] *= s;
    }
};

/**
 * Matrix multiplication
 * @method mmult
 * @param {Mat3} m Matrix to multiply with from left side.
 * @return {Mat3} The result.
 */
Mat3.prototype.mmult = function(m,target){
    var r = target || new Mat3();
    for(var i=0; i<3; i++){
        for(var j=0; j<3; j++){
            var sum = 0.0;
            for(var k=0; k<3; k++){
                sum += m.elements[i+k*3] * this.elements[k+j*3];
            }
            r.elements[i+j*3] = sum;
        }
    }
    return r;
};

/**
 * Scale each column of the matrix
 * @method scale
 * @param {Vec3} v
 * @return {Mat3} The result.
 */
Mat3.prototype.scale = function(v,target){
    target = target || new Mat3();
    var e = this.elements,
        t = target.elements;
    for(var i=0; i!==3; i++){
        t[3*i + 0] = v.x * e[3*i + 0];
        t[3*i + 1] = v.y * e[3*i + 1];
        t[3*i + 2] = v.z * e[3*i + 2];
    }
    return target;
};

/**
 * Solve Ax=b
 * @method solve
 * @param {Vec3} b The right hand side
 * @param {Vec3} target Optional. Target vector to save in.
 * @return {Vec3} The solution x
 * @todo should reuse arrays
 */
Mat3.prototype.solve = function(b,target){
    target = target || new Vec3();

    // Construct equations
    var nr = 3; // num rows
    var nc = 4; // num cols
    var eqns = [];
    for(var i=0; i<nr*nc; i++){
        eqns.push(0);
    }
    var i,j;
    for(i=0; i<3; i++){
        for(j=0; j<3; j++){
            eqns[i+nc*j] = this.elements[i+3*j];
        }
    }
    eqns[3+4*0] = b.x;
    eqns[3+4*1] = b.y;
    eqns[3+4*2] = b.z;

    // Compute right upper triangular version of the matrix - Gauss elimination
    var n = 3, k = n, np;
    var kp = 4; // num rows
    var p, els;
    do {
        i = k - n;
        if (eqns[i+nc*i] === 0) {
            // the pivot is null, swap lines
            for (j = i + 1; j < k; j++) {
                if (eqns[i+nc*j] !== 0) {
                    np = kp;
                    do {  // do ligne( i ) = ligne( i ) + ligne( k )
                        p = kp - np;
                        eqns[p+nc*i] += eqns[p+nc*j];
                    } while (--np);
                    break;
                }
            }
        }
        if (eqns[i+nc*i] !== 0) {
            for (j = i + 1; j < k; j++) {
                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];
                np = kp;
                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )
                    p = kp - np;
                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;
                } while (--np);
            }
        }
    } while (--n);

    // Get the solution
    target.z = eqns[2*nc+3] / eqns[2*nc+2];
    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];
    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];

    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){
        throw "Could not solve equation! Got x=["+target.toString()+"], b=["+b.toString()+"], A=["+this.toString()+"]";
    }

    return target;
};

/**
 * Get an element in the matrix by index. Index starts at 0, not 1!!!
 * @method e
 * @param {Number} row
 * @param {Number} column
 * @param {Number} value Optional. If provided, the matrix element will be set to this value.
 * @return {Number}
 */
Mat3.prototype.e = function( row , column ,value){
    if(value===undefined){
        return this.elements[column+3*row];
    } else {
        // Set value
        this.elements[column+3*row] = value;
    }
};

/**
 * Copy another matrix into this matrix object.
 * @method copy
 * @param {Mat3} source
 * @return {Mat3} this
 */
Mat3.prototype.copy = function(source){
    for(var i=0; i < source.elements.length; i++){
        this.elements[i] = source.elements[i];
    }
    return this;
};

/**
 * Returns a string representation of the matrix.
 * @method toString
 * @return string
 */
Mat3.prototype.toString = function(){
    var r = "";
    var sep = ",";
    for(var i=0; i<9; i++){
        r += this.elements[i] + sep;
    }
    return r;
};

/**
 * reverse the matrix
 * @method reverse
 * @param {Mat3} target Optional. Target matrix to save in.
 * @return {Mat3} The solution x
 */
Mat3.prototype.reverse = function(target){

    target = target || new Mat3();

    // Construct equations
    var nr = 3; // num rows
    var nc = 6; // num cols
    var eqns = [];
    for(var i=0; i<nr*nc; i++){
        eqns.push(0);
    }
    var i,j;
    for(i=0; i<3; i++){
        for(j=0; j<3; j++){
            eqns[i+nc*j] = this.elements[i+3*j];
        }
    }
    eqns[3+6*0] = 1;
    eqns[3+6*1] = 0;
    eqns[3+6*2] = 0;
    eqns[4+6*0] = 0;
    eqns[4+6*1] = 1;
    eqns[4+6*2] = 0;
    eqns[5+6*0] = 0;
    eqns[5+6*1] = 0;
    eqns[5+6*2] = 1;

    // Compute right upper triangular version of the matrix - Gauss elimination
    var n = 3, k = n, np;
    var kp = nc; // num rows
    var p;
    do {
        i = k - n;
        if (eqns[i+nc*i] === 0) {
            // the pivot is null, swap lines
            for (j = i + 1; j < k; j++) {
                if (eqns[i+nc*j] !== 0) {
                    np = kp;
                    do { // do line( i ) = line( i ) + line( k )
                        p = kp - np;
                        eqns[p+nc*i] += eqns[p+nc*j];
                    } while (--np);
                    break;
                }
            }
        }
        if (eqns[i+nc*i] !== 0) {
            for (j = i + 1; j < k; j++) {
                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];
                np = kp;
                do { // do line( k ) = line( k ) - multiplier * line( i )
                    p = kp - np;
                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;
                } while (--np);
            }
        }
    } while (--n);

    // eliminate the upper left triangle of the matrix
    i = 2;
    do {
        j = i-1;
        do {
            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];
            np = nc;
            do {
                p = nc - np;
                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;
            } while (--np);
        } while (j--);
    } while (--i);

    // operations on the diagonal
    i = 2;
    do {
        var multiplier = 1 / eqns[i+nc*i];
        np = nc;
        do {
            p = nc - np;
            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;
        } while (--np);
    } while (i--);

    i = 2;
    do {
        j = 2;
        do {
            p = eqns[nr+j+nc*i];
            if( isNaN( p ) || p ===Infinity ){
                throw "Could not reverse! A=["+this.toString()+"]";
            }
            target.e( i , j , p );
        } while (j--);
    } while (i--);

    return target;
};

/**
 * Set the matrix from a quaterion
 * @method setRotationFromQuaternion
 * @param {Quaternion} q
 */
Mat3.prototype.setRotationFromQuaternion = function( q ) {
    var x = q.x, y = q.y, z = q.z, w = q.w,
        x2 = x + x, y2 = y + y, z2 = z + z,
        xx = x * x2, xy = x * y2, xz = x * z2,
        yy = y * y2, yz = y * z2, zz = z * z2,
        wx = w * x2, wy = w * y2, wz = w * z2,
        e = this.elements;

    e[3*0 + 0] = 1 - ( yy + zz );
    e[3*0 + 1] = xy - wz;
    e[3*0 + 2] = xz + wy;

    e[3*1 + 0] = xy + wz;
    e[3*1 + 1] = 1 - ( xx + zz );
    e[3*1 + 2] = yz - wx;

    e[3*2 + 0] = xz - wy;
    e[3*2 + 1] = yz + wx;
    e[3*2 + 2] = 1 - ( xx + yy );

    return this;
};

/**
 * Transpose the matrix
 * @method transpose
 * @param  {Mat3} target Where to store the result.
 * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.
 */
Mat3.prototype.transpose = function( target ) {
    target = target || new Mat3();

    var Mt = target.elements,
        M = this.elements;

    for(var i=0; i!==3; i++){
        for(var j=0; j!==3; j++){
            Mt[3*i + j] = M[3*j + i];
        }
    }

    return target;
};

},{"./Vec3":27}],25:[function(_dereq_,module,exports){
module.exports = Quaternion;

var Vec3 = _dereq_('./Vec3');

/**
 * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.
 * @class Quaternion
 * @constructor
 * @param {Number} x Multiplier of the imaginary basis vector i.
 * @param {Number} y Multiplier of the imaginary basis vector j.
 * @param {Number} z Multiplier of the imaginary basis vector k.
 * @param {Number} w Multiplier of the real part.
 * @see http://en.wikipedia.org/wiki/Quaternion
 */
function Quaternion(x,y,z,w){
    /**
     * @property {Number} x
     */
    this.x = x!==undefined ? x : 0;

    /**
     * @property {Number} y
     */
    this.y = y!==undefined ? y : 0;

    /**
     * @property {Number} z
     */
    this.z = z!==undefined ? z : 0;

    /**
     * The multiplier of the real quaternion basis vector.
     * @property {Number} w
     */
    this.w = w!==undefined ? w : 1;
}

/**
 * Set the value of the quaternion.
 * @method set
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 * @param {Number} w
 */
Quaternion.prototype.set = function(x,y,z,w){
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
};

/**
 * Convert to a readable format
 * @method toString
 * @return string
 */
Quaternion.prototype.toString = function(){
    return this.x+","+this.y+","+this.z+","+this.w;
};

/**
 * Convert to an Array
 * @method toArray
 * @return Array
 */
Quaternion.prototype.toArray = function(){
    return [this.x, this.y, this.z, this.w];
};

/**
 * Set the quaternion components given an axis and an angle.
 * @method setFromAxisAngle
 * @param {Vec3} axis
 * @param {Number} angle in radians
 */
Quaternion.prototype.setFromAxisAngle = function(axis,angle){
    var s = Math.sin(angle*0.5);
    this.x = axis.x * s;
    this.y = axis.y * s;
    this.z = axis.z * s;
    this.w = Math.cos(angle*0.5);
};

/**
 * Converts the quaternion to axis/angle representation.
 * @method setFromAxisAngle
 * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.
 * @return Array An array, first elemnt is the axis and the second is the angle in radians.
 */
Quaternion.prototype.toAxisAngle = function(targetAxis){
    targetAxis = targetAxis || new Vec3();
    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised
    var angle = 2 * Math.acos(this.w);
    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.
    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt
        // if s close to zero then direction of axis not important
        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;
        targetAxis.y = this.y;
        targetAxis.z = this.z;
    } else {
        targetAxis.x = this.x / s; // normalise axis
        targetAxis.y = this.y / s;
        targetAxis.z = this.z / s;
    }
    return [targetAxis,angle];
};

var sfv_t1 = new Vec3(),
    sfv_t2 = new Vec3();

/**
 * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.
 * @method setFromVectors
 * @param {Vec3} u
 * @param {Vec3} v
 */
Quaternion.prototype.setFromVectors = function(u,v){
    if(u.isAntiparallelTo(v)){
        var t1 = sfv_t1;
        var t2 = sfv_t2;

        u.tangents(t1,t2);
        this.setFromAxisAngle(t1,Math.PI);
    } else {
        var a = u.cross(v);
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);
        this.normalize();
    }
};

/**
 * Quaternion multiplication
 * @method mult
 * @param {Quaternion} q
 * @param {Quaternion} target Optional.
 * @return {Quaternion}
 */
var Quaternion_mult_va = new Vec3();
var Quaternion_mult_vb = new Vec3();
var Quaternion_mult_vaxvb = new Vec3();
Quaternion.prototype.mult = function(q,target){
    target = target || new Quaternion();
    var w = this.w,
        va = Quaternion_mult_va,
        vb = Quaternion_mult_vb,
        vaxvb = Quaternion_mult_vaxvb;

    va.set(this.x,this.y,this.z);
    vb.set(q.x,q.y,q.z);
    target.w = w*q.w - va.dot(vb);
    va.cross(vb,vaxvb);

    target.x = w * vb.x + q.w*va.x + vaxvb.x;
    target.y = w * vb.y + q.w*va.y + vaxvb.y;
    target.z = w * vb.z + q.w*va.z + vaxvb.z;

    return target;
};

/**
 * Get the inverse quaternion rotation.
 * @method inverse
 * @param {Quaternion} target
 * @return {Quaternion}
 */
Quaternion.prototype.inverse = function(target){
    var x = this.x, y = this.y, z = this.z, w = this.w;
    target = target || new Quaternion();

    this.conjugate(target);
    var inorm2 = 1/(x*x + y*y + z*z + w*w);
    target.x *= inorm2;
    target.y *= inorm2;
    target.z *= inorm2;
    target.w *= inorm2;

    return target;
};

/**
 * Get the quaternion conjugate
 * @method conjugate
 * @param {Quaternion} target
 * @return {Quaternion}
 */
Quaternion.prototype.conjugate = function(target){
    target = target || new Quaternion();

    target.x = -this.x;
    target.y = -this.y;
    target.z = -this.z;
    target.w = this.w;

    return target;
};

/**
 * Normalize the quaternion. Note that this changes the values of the quaternion.
 * @method normalize
 */
Quaternion.prototype.normalize = function(){
    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);
    if ( l === 0 ) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
    } else {
        l = 1 / l;
        this.x *= l;
        this.y *= l;
        this.z *= l;
        this.w *= l;
    }
};

/**
 * Approximation of quaternion normalization. Works best when quat is already almost-normalized.
 * @method normalizeFast
 * @see http://jsperf.com/fast-quaternion-normalization
 * @author unphased, https://github.com/unphased
 */
Quaternion.prototype.normalizeFast = function () {
    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;
    if ( f === 0 ) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
    } else {
        this.x *= f;
        this.y *= f;
        this.z *= f;
        this.w *= f;
    }
};

/**
 * Multiply the quaternion by a vector
 * @method vmult
 * @param {Vec3} v
 * @param {Vec3} target Optional
 * @return {Vec3}
 */
Quaternion.prototype.vmult = function(v,target){
    target = target || new Vec3();

    var x = v.x,
        y = v.y,
        z = v.z;

    var qx = this.x,
        qy = this.y,
        qz = this.z,
        qw = this.w;

    // q*v
    var ix =  qw * x + qy * z - qz * y,
    iy =  qw * y + qz * x - qx * z,
    iz =  qw * z + qx * y - qy * x,
    iw = -qx * x - qy * y - qz * z;

    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

    return target;
};

/**
 * Copies value of source to this quaternion.
 * @method copy
 * @param {Quaternion} source
 * @return {Quaternion} this
 */
Quaternion.prototype.copy = function(source){
    this.x = source.x;
    this.y = source.y;
    this.z = source.z;
    this.w = source.w;
    return this;
};

/**
 * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm
 * @method toEuler
 * @param {Vec3} target
 * @param string order Three-character string e.g. "YZX", which also is default.
 */
Quaternion.prototype.toEuler = function(target,order){
    order = order || "YZX";

    var heading, attitude, bank;
    var x = this.x, y = this.y, z = this.z, w = this.w;

    switch(order){
    case "YZX":
        var test = x*y + z*w;
        if (test > 0.499) { // singularity at north pole
            heading = 2 * Math.atan2(x,w);
            attitude = Math.PI/2;
            bank = 0;
        }
        if (test < -0.499) { // singularity at south pole
            heading = -2 * Math.atan2(x,w);
            attitude = - Math.PI/2;
            bank = 0;
        }
        if(isNaN(heading)){
            var sqx = x*x;
            var sqy = y*y;
            var sqz = z*z;
            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading
            attitude = Math.asin(2*test); // attitude
            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank
        }
        break;
    default:
        throw new Error("Euler order "+order+" not supported yet.");
    }

    target.y = heading;
    target.z = attitude;
    target.x = bank;
};

/**
 * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m
 * @method setFromEuler
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination
 */
Quaternion.prototype.setFromEuler = function ( x, y, z, order ) {
    order = order || "XYZ";

    var c1 = Math.cos( x / 2 );
    var c2 = Math.cos( y / 2 );
    var c3 = Math.cos( z / 2 );
    var s1 = Math.sin( x / 2 );
    var s2 = Math.sin( y / 2 );
    var s3 = Math.sin( z / 2 );

    if ( order === 'XYZ' ) {

        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;

    } else if ( order === 'YXZ' ) {

        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;

    } else if ( order === 'ZXY' ) {

        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;

    } else if ( order === 'ZYX' ) {

        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;

    } else if ( order === 'YZX' ) {

        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;

    } else if ( order === 'XZY' ) {

        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;

    }

    return this;

};

Quaternion.prototype.clone = function(){
    return new Quaternion(this.x, this.y, this.z, this.w);
};
},{"./Vec3":27}],26:[function(_dereq_,module,exports){
var Vec3 = _dereq_('./Vec3');
var Quaternion = _dereq_('./Quaternion');

module.exports = Transform;

/**
 * @class Transform
 * @constructor
 */
function Transform() {
	/**
	 * @property {Vec3} position
	 */
	this.position = new Vec3();
	
	/**
	 * @property {Quaternion} quaternion
	 */
	this.quaternion = new Quaternion();
}

var tmpQuat = new Quaternion();

/**
 * @static
 * @method pointToLocaFrame
 * @param {Vec3} position
 * @param {Quaternion} quaternion
 * @param {Vec3} worldPoint
 * @param {Vec3} result
 */
Transform.pointToLocalFrame = function(position, quaternion, worldPoint, result){
    var result = result || new Vec3();
    worldPoint.vsub(position, result);
    quaternion.conjugate(tmpQuat);
    tmpQuat.vmult(result, result);
    return result;
};

/**
 * @static
 * @method pointToWorldFrame
 * @param {Vec3} position
 * @param {Vec3} quaternion
 * @param {Vec3} localPoint
 * @param {Vec3} result
 */
Transform.pointToWorldFrame = function(position, quaternion, localPoint, result){
    var result = result || new Vec3();
    quaternion.vmult(localPoint, result);
    result.vadd(position, result);
    return result;
};

Transform.prototype.vectorToWorldFrame = function(localVector, result){
    var result = result || new Vec3();
    this.quaternion.vmult(localVector, result);
    return result;
};

Transform.vectorToLocalFrame = function(position, quaternion, worldVector, result){
    var result = result || new Vec3();
    quaternion.w *= -1;
    quaternion.vmult(worldVector, result);
    quaternion.w *= -1;
    return result;
};

},{"./Quaternion":25,"./Vec3":27}],27:[function(_dereq_,module,exports){
module.exports = Vec3;

var Mat3 = _dereq_('./Mat3');

/**
 * 3-dimensional vector
 * @class Vec3
 * @constructor
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 * @author schteppe
 * @example
 *     var v = new Vec3(1, 2, 3);
 *     console.log('x=' + v.x); // x=1
 */
function Vec3(x,y,z){
    /**
     * @property x
     * @type {Number}
     */
    this.x = x||0.0;

    /**
     * @property y
     * @type {Number}
     */
    this.y = y||0.0;

    /**
     * @property z
     * @type {Number}
     */
    this.z = z||0.0;
}

Vec3.ZERO = new Vec3(0, 0, 0);

/**
 * Vector cross product
 * @method cross
 * @param {Vec3} v
 * @param {Vec3} target Optional. Target to save in.
 * @return {Vec3}
 */
Vec3.prototype.cross = function(v,target){
    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;
    target = target || new Vec3();

    target.x = (y * vz) - (z * vy);
    target.y = (z * vx) - (x * vz);
    target.z = (x * vy) - (y * vx);

    return target;
};

/**
 * Set the vectors' 3 elements
 * @method set
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 * @return Vec3
 */
Vec3.prototype.set = function(x,y,z){
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
};

/**
 * Set all components of the vector to zero.
 * @method setZero
 */
Vec3.prototype.setZero = function(){
    this.x = this.y = this.z = 0;
};

/**
 * Vector addition
 * @method vadd
 * @param {Vec3} v
 * @param {Vec3} target Optional.
 * @return {Vec3}
 */
Vec3.prototype.vadd = function(v,target){
    if(target){
        target.x = v.x + this.x;
        target.y = v.y + this.y;
        target.z = v.z + this.z;
    } else {
        return new Vec3(this.x + v.x,
                               this.y + v.y,
                               this.z + v.z);
    }
};

/**
 * Vector subtraction
 * @method vsub
 * @param {Vec3} v
 * @param {Vec3} target Optional. Target to save in.
 * @return {Vec3}
 */
Vec3.prototype.vsub = function(v,target){
    if(target){
        target.x = this.x - v.x;
        target.y = this.y - v.y;
        target.z = this.z - v.z;
    } else {
        return new Vec3(this.x-v.x,
                               this.y-v.y,
                               this.z-v.z);
    }
};

/**
 * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c
 * @method crossmat
 * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf
 * @return {Mat3}
 */
Vec3.prototype.crossmat = function(){
    return new Mat3([     0,  -this.z,   this.y,
                            this.z,        0,  -this.x,
                           -this.y,   this.x,        0]);
};

/**
 * Normalize the vector. Note that this changes the values in the vector.
 * @method normalize
 * @return {Number} Returns the norm of the vector
 */
Vec3.prototype.normalize = function(){
    var x=this.x, y=this.y, z=this.z;
    var n = Math.sqrt(x*x + y*y + z*z);
    if(n>0.0){
        var invN = 1/n;
        this.x *= invN;
        this.y *= invN;
        this.z *= invN;
    } else {
        // Make something up
        this.x = 0;
        this.y = 0;
        this.z = 0;
    }
    return n;
};

/**
 * Get the version of this vector that is of length 1.
 * @method unit
 * @param {Vec3} target Optional target to save in
 * @return {Vec3} Returns the unit vector
 */
Vec3.prototype.unit = function(target){
    target = target || new Vec3();
    var x=this.x, y=this.y, z=this.z;
    var ninv = Math.sqrt(x*x + y*y + z*z);
    if(ninv>0.0){
        ninv = 1.0/ninv;
        target.x = x * ninv;
        target.y = y * ninv;
        target.z = z * ninv;
    } else {
        target.x = 1;
        target.y = 0;
        target.z = 0;
    }
    return target;
};

/**
 * Get the 2-norm (length) of the vector
 * @method norm
 * @return {Number}
 */
Vec3.prototype.norm = function(){
    var x=this.x, y=this.y, z=this.z;
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Get the squared length of the vector
 * @method norm2
 * @return {Number}
 */
Vec3.prototype.norm2 = function(){
    return this.dot(this);
};

/**
 * Get distance from this point to another point
 * @method distanceTo
 * @param  {Vec3} p
 * @return {Number}
 */
Vec3.prototype.distanceTo = function(p){
    var x=this.x, y=this.y, z=this.z;
    var px=p.x, py=p.y, pz=p.z;
    return Math.sqrt((px-x)*(px-x)+
                     (py-y)*(py-y)+
                     (pz-z)*(pz-z));
};

/**
 * Multiply the vector with a scalar
 * @deprecated Use .scale instead
 * @method mult
 * @param {Number} scalar
 * @param {Vec3} target
 * @return {Vec3}
 */
Vec3.prototype.mult = function(scalar,target){
    target = target || new Vec3();
    var x = this.x,
        y = this.y,
        z = this.z;
    target.x = scalar * x;
    target.y = scalar * y;
    target.z = scalar * z;
    return target;
};

/**
 * Multiply the vector with a scalar.
 * @method scale
 * @param {Number} scalar
 * @param {Vec3} target
 * @return {Vec3}
 */
Vec3.prototype.scale = Vec3.prototype.mult;

/**
 * Calculate dot product
 * @method dot
 * @param {Vec3} v
 * @return {Number}
 */
Vec3.prototype.dot = function(v){
    return this.x * v.x + this.y * v.y + this.z * v.z;
};

/**
 * @method isZero
 * @return bool
 */
Vec3.prototype.isZero = function(){
    return this.x===0 && this.y===0 && this.z===0;
};

/**
 * Make the vector point in the opposite direction.
 * @method negate
 * @param {Vec3} target Optional target to save in
 * @return {Vec3}
 */
Vec3.prototype.negate = function(target){
    target = target || new Vec3();
    target.x = -this.x;
    target.y = -this.y;
    target.z = -this.z;
    return target;
};

/**
 * Compute two artificial tangents to the vector
 * @method tangents
 * @param {Vec3} t1 Vector object to save the first tangent in
 * @param {Vec3} t2 Vector object to save the second tangent in
 */
var Vec3_tangents_n = new Vec3();
var Vec3_tangents_randVec = new Vec3();
Vec3.prototype.tangents = function(t1,t2){
    var norm = this.norm();
    if(norm>0.0){
        var n = Vec3_tangents_n;
        var inorm = 1/norm;
        n.set(this.x*inorm,this.y*inorm,this.z*inorm);
        var randVec = Vec3_tangents_randVec;
        if(Math.abs(n.x) < 0.9){
            randVec.set(1,0,0);
            n.cross(randVec,t1);
        } else {
            randVec.set(0,1,0);
            n.cross(randVec,t1);
        }
        n.cross(t1,t2);
    } else {
        // The normal length is zero, make something up
        t1.set(1,0,0).normalize();
        t2.set(0,1,0).normalize();
    }
};

/**
 * Converts to a more readable format
 * @method toString
 * @return string
 */
Vec3.prototype.toString = function(){
    return this.x+","+this.y+","+this.z;
};

/**
 * Converts to an array
 * @method toArray
 * @return Array
 */
Vec3.prototype.toArray = function(){
    return [this.x, this.y, this.z];
};

/**
 * Copies value of source to this vector.
 * @method copy
 * @param {Vec3} source
 * @return {Vec3} this
 */
Vec3.prototype.copy = function(source){
    this.x = source.x;
    this.y = source.y;
    this.z = source.z;
    return this;
};


/**
 * Do a linear interpolation between two vectors
 * @method lerp
 * @param {Vec3} v
 * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.
 * @param {Vec3} target
 */
Vec3.prototype.lerp = function(v,t,target){
    var x=this.x, y=this.y, z=this.z;
    target.x = x + (v.x-x)*t;
    target.y = y + (v.y-y)*t;
    target.z = z + (v.z-z)*t;
};

/**
 * Check if a vector equals is almost equal to another one.
 * @method almostEquals
 * @param {Vec3} v
 * @param {Number} precision
 * @return bool
 */
Vec3.prototype.almostEquals = function(v,precision){
    if(precision===undefined){
        precision = 1e-6;
    }
    if( Math.abs(this.x-v.x)>precision ||
        Math.abs(this.y-v.y)>precision ||
        Math.abs(this.z-v.z)>precision){
        return false;
    }
    return true;
};

/**
 * Check if a vector is almost zero
 * @method almostZero
 * @param {Number} precision
 */
Vec3.prototype.almostZero = function(precision){
    if(precision===undefined){
        precision = 1e-6;
    }
    if( Math.abs(this.x)>precision ||
        Math.abs(this.y)>precision ||
        Math.abs(this.z)>precision){
        return false;
    }
    return true;
};

var antip_neg = new Vec3();

/**
 * Check if the vector is anti-parallel to another vector.
 * @method isAntiparallelTo
 * @param  {Vec3}  v
 * @param  {Number}  precision Set to zero for exact comparisons
 * @return {Boolean}
 */
Vec3.prototype.isAntiparallelTo = function(v,precision){
    this.negate(antip_neg);
    return antip_neg.almostEquals(v,precision);
};

/**
 * Clone the vector
 * @method clone
 * @return {Vec3}
 */
Vec3.prototype.clone = function(){
    return new Vec3(this.x, this.y, this.z);
};
},{"./Mat3":24}],28:[function(_dereq_,module,exports){
module.exports = Body;

var EventTarget = _dereq_('../utils/EventTarget');
var Shape = _dereq_('../shapes/Shape');
var Vec3 = _dereq_('../math/Vec3');
var Mat3 = _dereq_('../math/Mat3');
var Quaternion = _dereq_('../math/Quaternion');
var Material = _dereq_('../material/Material');
var AABB = _dereq_('../collision/AABB');
var Box = _dereq_('../shapes/Box');

/**
 * Base class for all body types.
 * @class Body
 * @constructor
 * @extends EventTarget
 * @param {object} [options]
 * @param {Vec3} [options.position]
 * @param {Vec3} [options.velocity]
 * @param {Vec3} [options.angularVelocity]
 * @param {Quaternion} [options.quaternion]
 * @param {number} [options.mass]
 * @param {number} [options.type]
 * @param {number} [options.linearDamping]
 * @example
 *     var body = new Body({
 *         mass: 1
 *     });
 *     var shape = new Sphere(1);
 *     body.addShape(shape);
 *     world.add(body);
 */
function Body(options){
    options = options || {};

    EventTarget.apply(this);

    this.id = Body.idCounter++;

    /**
     * Reference to the world the body is living in
     * @property world
     * @type {World}
     */
    this.world = null;

    /**
     * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, "this" will refer to this Body object.
     * @property preStep
     * @type {Function}
     * @deprecated Use World events instead
     */
    this.preStep = null;

    /**
     * Callback function that is used AFTER stepping the system. Inside the function, "this" will refer to this Body object.
     * @property postStep
     * @type {Function}
     * @deprecated Use World events instead
     */
    this.postStep = null;

    this.vlambda = new Vec3();

    /**
     * @property {Number} collisionFilterGroup
     */
    this.collisionFilterGroup = 1;

    /**
     * @property {Number} collisionFilterMask
     */
    this.collisionFilterMask = 1;

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.
     * @property {Number} collisionResponse
     */
	this.collisionResponse = true;

    /**
     * @property position
     * @type {Vec3}
     */
    this.position = new Vec3();

    if(options.position){
        this.position.copy(options.position);
    }

    /**
     * @property {Vec3} previousPosition
     */
    this.previousPosition = new Vec3();

    /**
     * Initial position of the body
     * @property initPosition
     * @type {Vec3}
     */
    this.initPosition = new Vec3();

    /**
     * @property velocity
     * @type {Vec3}
     */
    this.velocity = new Vec3();

    if(options.velocity){
        this.velocity.copy(options.velocity);
    }

    /**
     * @property initVelocity
     * @type {Vec3}
     */
    this.initVelocity = new Vec3();

    /**
     * Linear force on the body
     * @property force
     * @type {Vec3}
     */
    this.force = new Vec3();

    var mass = typeof(options.mass) === 'number' ? options.mass : 0;

    /**
     * @property mass
     * @type {Number}
     */
    this.mass = mass;

    /**
     * @property invMass
     * @type {Number}
     */
    this.invMass = mass > 0 ? 1.0 / mass : 0;

    /**
     * @property material
     * @type {Material}
     */
    this.material = options.material || null;

    /**
     * @property linearDamping
     * @type {Number}
     */
    this.linearDamping = typeof(options.linearDamping) === 'number' ? options.linearDamping : 0.01;

    /**
     * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.
     * @property type
     * @type {Number}
     */
    this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);
    if(typeof(options.type) === typeof(Body.STATIC)){
        this.type = options.type;
    }

    /**
     * If true, the body will automatically fall to sleep.
     * @property allowSleep
     * @type {Boolean}
     */
    this.allowSleep = true;

    /**
     * Current sleep state.
     * @property sleepState
     * @type {Number}
     */
    this.sleepState = 0;

    /**
     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.
     * @property sleepSpeedLimit
     * @type {Number}
     */
    this.sleepSpeedLimit = 0.1;

    /**
     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.
     * @property sleepTimeLimit
     * @type {Number}
     */
    this.sleepTimeLimit = 1;

    this.timeLastSleepy = 0;

    this._wakeUpAfterNarrowphase = false;


    /**
     * Rotational force on the body, around center of mass
     * @property {Vec3} torque
     */
    this.torque = new Vec3();

    /**
     * Orientation of the body
     * @property quaternion
     * @type {Quaternion}
     */
    this.quaternion = new Quaternion();

    if(options.quaternion){
        this.quaternion.copy(options.quaternion);
    }

    /**
     * @property initQuaternion
     * @type {Quaternion}
     */
    this.initQuaternion = new Quaternion();

    /**
     * @property angularVelocity
     * @type {Vec3}
     */
    this.angularVelocity = new Vec3();

    if(options.angularVelocity){
        this.angularVelocity.copy(options.angularVelocity);
    }

    /**
     * @property initAngularVelocity
     * @type {Vec3}
     */
    this.initAngularVelocity = new Vec3();

    this.interpolatedPosition = new Vec3();
    this.interpolatedQuaternion = new Quaternion();

    /**
     * @property shapes
     * @type {array}
     */
    this.shapes = [];

    /**
     * @property shapeOffsets
     * @type {array}
     */
    this.shapeOffsets = [];

    /**
     * @property shapeOrientations
     * @type {array}
     */
    this.shapeOrientations = [];

    /**
     * @property inertia
     * @type {Vec3}
     */
    this.inertia = new Vec3();

    /**
     * @property {Vec3} invInertia
     */
    this.invInertia = new Vec3();

    /**
     * @property {Mat3} invInertiaWorld
     */
    this.invInertiaWorld = new Mat3();

    this.invMassSolve = 0;

    /**
     * @property {Vec3} invInertiaSolve
     */
    this.invInertiaSolve = new Vec3();

    /**
     * @property {Mat3} invInertiaWorldSolve
     */
    this.invInertiaWorldSolve = new Mat3();

    /**
     * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.
     * @property {Boolean} fixedRotation
     */
    this.fixedRotation = false;

    /**
     * @property {Number} angularDamping
     */
    this.angularDamping = 0.01; // Perhaps default should be zero here?

    /**
     * @property aabb
     * @type {Vec3}
     */
    this.aabb = new AABB();

    /**
     * Indicates if the AABB needs to be updated before use.
     * @property aabbNeedsUpdate
     * @type {Boolean}
     */
    this.aabbNeedsUpdate = true;

    this.wlambda = new Vec3();

    this.updateMassProperties();
}
Body.prototype = new EventTarget();
Body.prototype.constructor = Body;

/**
 * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.
 * @static
 * @property DYNAMIC
 * @type {Number}
 */
Body.DYNAMIC = 1;

/**
 * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.
 * @static
 * @property STATIC
 * @type {Number}
 */
Body.STATIC = 2;

/**
 * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.
 * @static
 * @property KINEMATIC
 * @type {Number}
 */
Body.KINEMATIC = 4;



/**
 * @static
 * @property AWAKE
 * @type {number}
 */
Body.AWAKE = 0;

/**
 * @static
 * @property SLEEPY
 * @type {number}
 */
Body.SLEEPY = 1;

/**
 * @static
 * @property SLEEPING
 * @type {number}
 */
Body.SLEEPING = 2;

Body.idCounter = 0;

/**
 * Wake the body up.
 * @method wakeUp
 */
Body.prototype.wakeUp = function(){
    var s = this.sleepState;
    this.sleepState = 0;
    if(s === Body.SLEEPING){
        this.dispatchEvent({type:"wakeup"});
    }
};

/**
 * Force body sleep
 * @method sleep
 */
Body.prototype.sleep = function(){
    this.sleepState = Body.SLEEPING;
    this.velocity.set(0,0,0);
    this.angularVelocity.set(0,0,0);
};

Body.sleepyEvent = {
    type: "sleepy"
};

Body.sleepEvent = {
    type: "sleep"
};

/**
 * Called every timestep to update internal sleep timer and change sleep state if needed.
 * @method sleepTick
 * @param {Number} time The world time in seconds
 */
Body.prototype.sleepTick = function(time){
    if(this.allowSleep){
        var sleepState = this.sleepState;
        var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();
        var speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);
        if(sleepState===Body.AWAKE && speedSquared < speedLimitSquared){
            this.sleepState = Body.SLEEPY; // Sleepy
            this.timeLastSleepy = time;
            this.dispatchEvent(Body.sleepyEvent);
        } else if(sleepState===Body.SLEEPY && speedSquared > speedLimitSquared){
            this.wakeUp(); // Wake up
        } else if(sleepState===Body.SLEEPY && (time - this.timeLastSleepy ) > this.sleepTimeLimit){
            this.sleep(); // Sleeping
            this.dispatchEvent(Body.sleepEvent);
        }
    }
};

/**
 * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate "solve mass".
 * @method updateSolveMassProperties
 */
Body.prototype.updateSolveMassProperties = function(){
    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){
        this.invMassSolve = 0;
        this.invInertiaSolve.setZero();
        this.invInertiaWorldSolve.setZero();
    } else {
        this.invMassSolve = this.invMass;
        this.invInertiaSolve.copy(this.invInertia);
        this.invInertiaWorldSolve.copy(this.invInertiaWorld);
    }
};

/**
 * Convert a world point to local body frame.
 * @method pointToLocalFrame
 * @param  {Vec3} worldPoint
 * @param  {Vec3} result
 * @return {Vec3}
 */
Body.prototype.pointToLocalFrame = function(worldPoint,result){
    var result = result || new Vec3();
    worldPoint.vsub(this.position,result);
    this.quaternion.conjugate().vmult(result,result);
    return result;
};

/**
 * Convert a local body point to world frame.
 * @method pointToWorldFrame
 * @param  {Vec3} localPoint
 * @param  {Vec3} result
 * @return {Vec3}
 */
Body.prototype.pointToWorldFrame = function(localPoint,result){
    var result = result || new Vec3();
    this.quaternion.vmult(localPoint,result);
    result.vadd(this.position,result);
    return result;
};

/**
 * Convert a local body point to world frame.
 * @method vectorToWorldFrame
 * @param  {Vec3} localVector
 * @param  {Vec3} result
 * @return {Vec3}
 */
Body.prototype.vectorToWorldFrame = function(localVector, result){
    var result = result || new Vec3();
    this.quaternion.vmult(localVector, result);
    return result;
};

var tmpVec = new Vec3();
var tmpQuat = new Quaternion();


Body.prototype.addShape = function(shape, _offset, _orientation){
    var offset = new Vec3();
    var orientation = new Quaternion();

    if(_offset){
        offset.copy(_offset);
    }
    if(_orientation){
        orientation.copy(_orientation);
    }

    this.shapes.push(shape);
    this.shapeOffsets.push(offset);
    this.shapeOrientations.push(orientation);
    this.updateMassProperties();
    this.updateBoundingRadius();

    this.aabbNeedsUpdate = true;
};

/**
 * Update the bounding radius of the body. Should be done if any of the shapes are changed.
 * @method updateBoundingRadius
 */
Body.prototype.updateBoundingRadius = function(){
    var shapes = this.shapes,
        shapeOffsets = this.shapeOffsets,
        N = shapes.length,
        radius = 0;

    for(var i=0; i!==N; i++){
        var shape = shapes[i];
        shape.updateBoundingSphereRadius();
        var offset = shapeOffsets[i].norm(),
            r = shape.boundingSphereRadius;
        if(offset + r > radius){
            radius = offset + r;
        }
    }

    this.boundingRadius = radius;
};

var computeAABB_shapeAABB = new AABB();

/**
 * Updates the .aabb
 * @method computeAABB
 * @todo rename to updateAABB()
 */
Body.prototype.computeAABB = function(){
    var shapes = this.shapes,
        shapeOffsets = this.shapeOffsets,
        shapeOrientations = this.shapeOrientations,
        N = shapes.length,
        offset = tmpVec,
        orientation = tmpQuat,
        bodyQuat = this.quaternion,
        aabb = this.aabb,
        shapeAABB = computeAABB_shapeAABB;

    for(var i=0; i!==N; i++){
        var shape = shapes[i];

        // Get shape world quaternion
        shapeOrientations[i].mult(bodyQuat, orientation);

        // Get shape world position
        orientation.vmult(shapeOffsets[i], offset);
        offset.vadd(this.position, offset);

        // vec2.rotate(offset, shapeOffsets[i], bodyAngle);
        // vec2.add(offset, offset, this.position);

        // Get shape AABB
        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);

        if(i === 0){
            aabb.copy(shapeAABB);
        } else {
            aabb.extend(shapeAABB);
        }
    }

    this.aabbNeedsUpdate = false;
};

var uiw_m1 = new Mat3(),
    uiw_m2 = new Mat3(),
    uiw_m3 = new Mat3();

/**
 * Update .inertiaWorld and .invInertiaWorld
 * @method updateInertiaWorld
 */
Body.prototype.updateInertiaWorld = function(force){
    var I = this.invInertia;
    if (I.x === I.y && I.y === I.z && !force) {
        // If inertia M = s*I, where I is identity and s a scalar, then
        //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M
        // where R is the rotation matrix.
        // In other words, we don't have to transform the inertia if all
        // inertia diagonal entries are equal.
    } else {
        var m1 = uiw_m1,
            m2 = uiw_m2,
            m3 = uiw_m3;
        m1.setRotationFromQuaternion(this.quaternion);
        m1.transpose(m2);
        m1.scale(I,m1);
        m1.mmult(m2,this.invInertiaWorld);
        //m3.getTrace(this.invInertiaWorld);
    }

    /*
    this.quaternion.vmult(this.inertia,this.inertiaWorld);
    this.quaternion.vmult(this.invInertia,this.invInertiaWorld);
    */
};

/**
 * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.
 * @method applyForce
 * @param  {Vec3} force The amount of force to add.
 * @param  {Vec3} worldPoint A world point to apply the force on.
 */
var Body_applyForce_r = new Vec3();
var Body_applyForce_rotForce = new Vec3();
Body.prototype.applyForce = function(force,worldPoint){
    if(this.type !== Body.DYNAMIC){
        return;
    }

    // Compute point position relative to the body center
    var r = Body_applyForce_r;
    worldPoint.vsub(this.position,r);

    // Compute produced rotational force
    var rotForce = Body_applyForce_rotForce;
    r.cross(force,rotForce);

    // Add linear force
    this.force.vadd(force,this.force);

    // Add rotational force
    this.torque.vadd(rotForce,this.torque);
};

/**
 * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.
 * @method applyImpulse
 * @param  {Vec3} impulse The amount of impulse to add.
 * @param  {Vec3} worldPoint A world point to apply the force on.
 */
var Body_applyImpulse_r = new Vec3();
var Body_applyImpulse_velo = new Vec3();
var Body_applyImpulse_rotVelo = new Vec3();
Body.prototype.applyImpulse = function(impulse, worldPoint){
    if(this.type !== Body.DYNAMIC){
        return;
    }

    // Compute point position relative to the body center
    var r = Body_applyImpulse_r;
    worldPoint.vsub(this.position,r);

    // Compute produced central impulse velocity
    var velo = Body_applyImpulse_velo;
    velo.copy(impulse);
    velo.mult(this.invMass,velo);

    // Add linear impulse
    this.velocity.vadd(velo, this.velocity);

    // Compute produced rotational impulse velocity
    var rotVelo = Body_applyImpulse_rotVelo;
    r.cross(impulse,rotVelo);

    /*
    rotVelo.x *= this.invInertia.x;
    rotVelo.y *= this.invInertia.y;
    rotVelo.z *= this.invInertia.z;
    */
    this.invInertiaWorld.vmult(rotVelo,rotVelo);

    // Add rotational Impulse
    this.angularVelocity.vadd(rotVelo, this.angularVelocity);
};

/**
 * Should be called whenever you change the body mass.
 * @method updateMassProperties
 */
/*Body.prototype.updateMassProperties = function(){
    this.invMass = this.mass>0 ? 1.0/this.mass : 0;
    this.shape.calculateLocalInertia(this.mass, this.inertia);
    var I = this.inertia;
    var fixed = this.fixedRotation;
    this.invInertia.set(
        I.x > 0 && !fixed ? 1.0 / I.x : 0,
        I.y > 0 && !fixed ? 1.0 / I.y : 0,
        I.z > 0 && !fixed ? 1.0 / I.z : 0
    );
    this.updateInertiaWorld(true);
};
*/

Body.prototype.updateMassProperties = function(){
    var target = new Vec3();

    // TODO: check if only 1 shape at origin, use shape inertia in that case

    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;
    var I = this.inertia;
    var fixed = this.fixedRotation;

    // Approximate with AABB
    this.computeAABB();
    Box.calculateInertia(new Vec3(
        (this.aabb.upperBound.x-this.aabb.lowerBound.x) / 2,
        (this.aabb.upperBound.y-this.aabb.lowerBound.y) / 2,
        (this.aabb.upperBound.z-this.aabb.lowerBound.z) / 2
    ), this.mass, I);

    this.invInertia.set(
        I.x > 0 && !fixed ? 1.0 / I.x : 0,
        I.y > 0 && !fixed ? 1.0 / I.y : 0,
        I.z > 0 && !fixed ? 1.0 / I.z : 0
    );
    this.updateInertiaWorld(true);
};

/**
 * Get world velocity of a point in the body.
 * @method getVelocityAtWorldPoint
 * @param  {Vec3} worldPoint
 * @param  {Vec3} result
 * @return {Vec3} The result vector.
 */
Body.prototype.getVelocityAtWorldPoint = function(worldPoint, result){
    var r = new Vec3();
    worldPoint.vsub(this.position, r);
    this.angularVelocity.cross(r, result);
    this.velocity.vadd(result, result);
    return result;
};

},{"../collision/AABB":3,"../material/Material":22,"../math/Mat3":24,"../math/Quaternion":25,"../math/Vec3":27,"../shapes/Box":34,"../shapes/Shape":40,"../utils/EventTarget":45}],29:[function(_dereq_,module,exports){
var Body = _dereq_('./Body');
var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var RaycastResult = _dereq_('../collision/RaycastResult');
var Ray = _dereq_('../collision/Ray');
var WheelInfo = _dereq_('../objects/WheelInfo');

module.exports = RaycastVehicle;

/**
 * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.
 * @class RaycastVehicle
 * @constructor
 * @param {object} [options]
 * @param {Body} [options.chassisBody] The car chassis body.
 * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2
 * @param {integer} [options.indexLeftAxis]
 * @param {integer} [options.indexUpAxis]
 */
function RaycastVehicle(options){

    /**
     * @property {Body} chassisBody
     */
    this.chassisBody = options.chassisBody;

    /**
     * An array of WheelInfo objects.
     * @property {array} wheelInfos
     */
    this.wheelInfos = [];

    /**
     * Will be set to true if the car is sliding.
     * @property {boolean} sliding
     */
    this.sliding = false;

    /**
     * @property {World} world
     */
    this.world = null;

    /**
     * Index of the right axis, 0=x, 1=y, 2=z
     * @property {integer} indexRightAxis
     * @default 1
     */
    this.indexRightAxis = typeof(options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;

    /**
     * Index of the forward axis, 0=x, 1=y, 2=z
     * @property {integer} indexForwardAxis
     * @default 0
     */
    this.indexForwardAxis = typeof(options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;

    /**
     * Index of the up axis, 0=x, 1=y, 2=z
     * @property {integer} indexUpAxis
     * @default 2
     */
    this.indexUpAxis = typeof(options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;
}

var tmpVec1 = new Vec3();
var tmpVec2 = new Vec3();
var tmpVec3 = new Vec3();
var tmpVec4 = new Vec3();
var tmpVec5 = new Vec3();
var tmpVec6 = new Vec3();
var tmpRay = new Ray();

/**
 * Add a wheel. For information about the options, see WheelInfo.
 * @method addWheel
 * @param {object} [options]
 */
RaycastVehicle.prototype.addWheel = function(options){
    options = options || {};

    var info = new WheelInfo(options);
    var index = this.wheelInfos.length;
    this.wheelInfos.push(info);

    return index;
};

/**
 * Set the steering value of a wheel.
 * @method setSteeringValue
 * @param {number} value
 * @param {integer} wheelIndex
 */
RaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex){
    var wheel = this.wheelInfos[wheelIndex];
    wheel.steering = value;
};

var torque = new Vec3();

/**
 * Set the wheel force to apply on one of the wheels each time step
 * @method applyEngineForce
 * @param  {number} value
 * @param  {integer} wheelIndex
 */
RaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex){
    this.wheelInfos[wheelIndex].engineForce = value;
};

/**
 * Set the braking force of a wheel
 * @method setBrake
 * @param {number} brake
 * @param {integer} wheelIndex
 */
RaycastVehicle.prototype.setBrake = function(brake, wheelIndex){
    this.wheelInfos[wheelIndex].brake = brake;
};

/**
 * Add the vehicle including its constraints to the world.
 * @method addToWorld
 * @param {World} world
 */
RaycastVehicle.prototype.addToWorld = function(world){
    var constraints = this.constraints;
    world.add(this.chassisBody);
    var that = this;
    world.addEventListener('preStep', function(){
        that.updateVehicle(world.dt);
    });
    this.world = world;
};

/**
 * Get one of the wheel axles, world-oriented.
 * @private
 * @method getVehicleAxisWorld
 * @param  {integer} axisIndex
 * @param  {Vec3} result
 */
RaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result){
    result.set(
        axisIndex === 0 ? 1 : 0,
        axisIndex === 1 ? 1 : 0,
        axisIndex === 2 ? 1 : 0
    );
    this.chassisBody.vectorToWorldFrame(result, result);
};

RaycastVehicle.prototype.updateVehicle = function(timeStep){
    var wheelInfos = this.wheelInfos;
    var numWheels = wheelInfos.length;
    var chassisBody = this.chassisBody;

    for (var i = 0; i < numWheels; i++) {
        this.updateWheelTransform(i, false);
    }

    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();

    var forwardWorld = new Vec3();
    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);

    if (forwardWorld.dot(chassisBody.velocity) < 0){
        this.currentVehicleSpeedKmHour *= -1;
    }

    // simulate suspension
    for (var i = 0; i < numWheels; i++) {
        this.castRay(wheelInfos[i]);
    }

    this.updateSuspension(timeStep);

    var impulse = new Vec3();
    var relpos = new Vec3();
    for (var i = 0; i < numWheels; i++) {
        //apply suspension force
        var wheel = wheelInfos[i];
        var suspensionForce = wheel.suspensionForce;
        if (suspensionForce > wheel.maxSuspensionForce) {
            suspensionForce = wheel.maxSuspensionForce;
        }
        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);

        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);
        chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);
    }

    this.updateFriction(timeStep);

    var hitNormalWorldScaledWithProj = new Vec3();
    var fwd  = new Vec3();
    var vel = new Vec3();
    for (i = 0; i < numWheels; i++) {
        var wheel = wheelInfos[i];
        //var relpos = new Vec3();
        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);
        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);

        // Hack to get the rotation in the correct direction
        var m = 1;
        switch(this.indexUpAxis){
        case 1:
            m = -1;
            break;
        }

        if (wheel.isInContact) {

            this.getVehicleAxisWorld(this.indexForwardAxis, fwd);
            var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);
            wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);

            fwd.vsub(hitNormalWorldScaledWithProj, fwd);

            var proj2 = fwd.dot(vel);
            wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;
        }

        if((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed){
            // Apply custom rotation when accelerating and sliding
            wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;
        }

        // Lock wheels
        if(Math.abs(wheel.brake) > Math.abs(wheel.engineForce)){
            wheel.deltaRotation = 0;
        }

        wheel.rotation += wheel.deltaRotation; // Use the old value
        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact
    }
};

RaycastVehicle.prototype.updateSuspension = function(deltaTime) {
    var chassisBody = this.chassisBody;
    var chassisMass = chassisBody.mass;
    var wheelInfos = this.wheelInfos;
    var numWheels = wheelInfos.length;

    for (var w_it = 0; w_it < numWheels; w_it++){
        var wheel = wheelInfos[w_it];

        if (wheel.isInContact){
            var force;

            // Spring
            var susp_length = wheel.suspensionRestLength;
            var current_length = wheel.suspensionLength;
            var length_diff = (susp_length - current_length);

            force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;

            // Damper
            var projected_rel_vel = wheel.suspensionRelativeVelocity;
            var susp_damping;
            if (projected_rel_vel < 0) {
                susp_damping = wheel.dampingCompression;
            } else {
                susp_damping = wheel.dampingRelaxation;
            }
            force -= susp_damping * projected_rel_vel;

            wheel.suspensionForce = force * chassisMass;
            if (wheel.suspensionForce < 0) {
                wheel.suspensionForce = 0;
            }
        } else {
            wheel.suspensionForce = 0;
        }
    }
};

/**
 * Remove the vehicle including its constraints from the world.
 * @method removeFromWorld
 * @param {World} world
 */
RaycastVehicle.prototype.removeFromWorld = function(world){
    var constraints = this.constraints;
    world.remove(this.chassisBody);
    world.removeEventListener('preStep', this.updateVehicle);
    this.world = null;
};

var castRay_rayvector = new Vec3();
var castRay_target = new Vec3();
RaycastVehicle.prototype.castRay = function(wheel) {
    var rayvector = castRay_rayvector;
    var target = castRay_target;

    this.updateWheelTransformWorld(wheel);
    var chassisBody = this.chassisBody;

    var depth = -1;

    var raylen = wheel.suspensionRestLength + wheel.radius;

    wheel.directionWorld.scale(raylen, rayvector);
    var source = wheel.chassisConnectionPointWorld;
    source.vadd(rayvector, target);
    var raycastResult = wheel.raycastResult;

    var param = 0;

    raycastResult.reset();
    // Turn off ray collision with the chassis temporarily
    var oldState = chassisBody.collisionResponse;
    chassisBody.collisionResponse = false;

    // Cast ray against world
    this.world.rayTest(source, target, raycastResult);
    chassisBody.collisionResponse = oldState;

    var object = raycastResult.body;

    wheel.raycastResult.groundObject = 0;

    if (object) {
        depth = raycastResult.distance;
        wheel.raycastResult.hitNormalWorld  = raycastResult.hitNormalWorld;
        wheel.isInContact = true;

        var hitDistance = raycastResult.distance;
        wheel.suspensionLength = hitDistance - wheel.radius;

        // clamp on max suspension travel
        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;
        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;
        if (wheel.suspensionLength < minSuspensionLength) {
            wheel.suspensionLength = minSuspensionLength;
        }
        if (wheel.suspensionLength > maxSuspensionLength) {
            wheel.suspensionLength = maxSuspensionLength;
            wheel.raycastResult.reset();
        }

        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);

        var chassis_velocity_at_contactPoint = new Vec3();
        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);

        var projVel = wheel.raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );

        if (denominator >= -0.1) {
            wheel.suspensionRelativeVelocity = 0;
            wheel.clippedInvContactDotSuspension = 1 / 0.1;
        } else {
            var inv = -1 / denominator;
            wheel.suspensionRelativeVelocity = projVel * inv;
            wheel.clippedInvContactDotSuspension = inv;
        }

    } else {

        //put wheel info as in rest position
        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;
        wheel.suspensionRelativeVelocity = 0.0;
        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);
        wheel.clippedInvContactDotSuspension = 1.0;
    }

    return depth;
};

RaycastVehicle.prototype.updateWheelTransformWorld = function(wheel){
    wheel.isInContact = false;
    var chassisBody = this.chassisBody;
    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);
    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);
    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);
};

RaycastVehicle.prototype.updateWheelTransform = function(wheelIndex){
    var up = tmpVec4;
    var right = tmpVec5;
    var fwd = tmpVec6;

    var wheel = this.wheelInfos[wheelIndex];
    this.updateWheelTransformWorld(wheel);

    wheel.directionLocal.scale(-1, up);
    right.copy(wheel.axleLocal);
    up.cross(right, fwd);
    fwd.normalize();
    right.normalize();

    // Rotate around steering over the wheelAxle
    var steering = wheel.steering;
    var steeringOrn = new Quaternion();
    steeringOrn.setFromAxisAngle(up, steering);

    var rotatingOrn = new Quaternion();
    rotatingOrn.setFromAxisAngle(right, wheel.rotation);

    // World rotation of the wheel
    var q = wheel.worldTransform.quaternion;
    this.chassisBody.quaternion.mult(steeringOrn, q);
    q.mult(rotatingOrn, q);

    q.normalize();

    // world position of the wheel
    var p = wheel.worldTransform.position;
    p.copy(wheel.directionWorld);
    p.scale(wheel.suspensionLength, p);
    p.vadd(wheel.chassisConnectionPointWorld, p);
};

var directions = [
    new Vec3(1, 0, 0),
    new Vec3(0, 1, 0),
    new Vec3(0, 0, 1)
];

/**
 * Get the world transform of one of the wheels
 * @method getWheelTransformWorld
 * @param  {integer} wheelIndex
 * @return {Transform}
 */
RaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {
    return this.wheelInfos[wheelIndex].worldTransform;
};


var updateFriction_surfNormalWS_scaled_proj = new Vec3();
var updateFriction_axle = [];
var updateFriction_forwardWS = [];
var sideFrictionStiffness2 = 1;
RaycastVehicle.prototype.updateFriction = function(timeStep) {
    var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;

    //calculate the impulse, so that the wheels don't move sidewards
    var wheelInfos = this.wheelInfos;
    var numWheels = wheelInfos.length;
    var chassisBody = this.chassisBody;
    var forwardWS = updateFriction_forwardWS;
    var axle = updateFriction_axle;

    var numWheelsOnGround = 0;

    for (var i = 0; i < numWheels; i++) {
        var wheel = wheelInfos[i];

        var groundObject = wheel.raycastResult.body;
        if (groundObject){
            numWheelsOnGround++;
        }

        wheel.sideImpulse = 0;
        wheel.forwardImpulse = 0;
        if(!forwardWS[i]){
            forwardWS[i] = new Vec3();
        }
        if(!axle[i]){
            axle[i] = new Vec3();
        }
    }

    for (var i = 0; i < numWheels; i++){
        var wheel = wheelInfos[i];

        var groundObject = wheel.raycastResult.body;

        if (groundObject) {
            var axlei = axle[i];
            var wheelTrans = this.getWheelTransformWorld(i);

            // Get world axle
            wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);

            var surfNormalWS = wheel.raycastResult.hitNormalWorld;
            var proj = axlei.dot(surfNormalWS);
            surfNormalWS.scale(proj, surfNormalWS_scaled_proj);
            axlei.vsub(surfNormalWS_scaled_proj, axlei);
            axlei.normalize();

            surfNormalWS.cross(axlei, forwardWS[i]);
            forwardWS[i].normalize();

            wheel.sideImpulse = resolveSingleBilateral(
                chassisBody,
                wheel.raycastResult.hitPointWorld,
                groundObject,
                wheel.raycastResult.hitPointWorld,
                axlei
            );

            wheel.sideImpulse *= sideFrictionStiffness2;
        }
    }

    var sideFactor = 1;
    var fwdFactor = 0.5;

    this.sliding = false;
    for (var i = 0; i < numWheels; i++) {
        var wheel = wheelInfos[i];
        var groundObject = wheel.raycastResult.body;

        var rollingFriction = 0;

        wheel.slipInfo = 1;
        if (groundObject) {
            var defaultRollingFrictionImpulse = 0;
            var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;

            // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);
            // rollingFriction = calcRollingFriction(contactPt);
            rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);

            rollingFriction += wheel.engineForce * timeStep;

            // rollingFriction = 0;
            var factor = maxImpulse / rollingFriction;
            wheel.slipInfo *= factor;
        }

        //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)

        wheel.forwardImpulse = 0;
        wheel.skidInfo = 1;

        if (groundObject) {
            wheel.skidInfo = 1;

            var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;
            var maximpSide = maximp;

            var maximpSquared = maximp * maximpSide;

            wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;

            var x = wheel.forwardImpulse * fwdFactor;
            var y = wheel.sideImpulse * sideFactor;

            var impulseSquared = x * x + y * y;

            wheel.sliding = false;
            if (impulseSquared > maximpSquared) {
                this.sliding = true;
                wheel.sliding = true;

                var factor = maximp / Math.sqrt(impulseSquared);

                wheel.skidInfo *= factor;
            }
        }
    }

    if (this.sliding) {
        for (var i = 0; i < numWheels; i++) {
            var wheel = wheelInfos[i];
            if (wheel.sideImpulse !== 0) {
                if (wheel.skidInfo < 1){
                    wheel.forwardImpulse *= wheel.skidInfo;
                    wheel.sideImpulse *= wheel.skidInfo;
                }
            }
        }
    }

    // apply the impulses
    for (var i = 0; i < numWheels; i++) {
        var wheel = wheelInfos[i];

        var rel_pos = new Vec3();
        //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);
        // cannons applyimpulse is using world coord for the position
        rel_pos.copy(wheel.raycastResult.hitPointWorld);

        if (wheel.forwardImpulse !== 0) {
            var impulse = new Vec3();
            forwardWS[i].scale(wheel.forwardImpulse, impulse);
            chassisBody.applyImpulse(impulse, rel_pos);
        }

        if (wheel.sideImpulse !== 0){
            var groundObject = wheel.raycastResult.body;

            var rel_pos2 = new Vec3();
            //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);
            rel_pos2.copy(wheel.raycastResult.hitPointWorld);
            var sideImp = new Vec3();
            axle[i].scale(wheel.sideImpulse, sideImp);

            // Scale the relative position in the up direction with rollInfluence.
            // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).
            chassisBody.pointToLocalFrame(rel_pos, rel_pos);
            rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;
            chassisBody.pointToWorldFrame(rel_pos, rel_pos);
            chassisBody.applyImpulse(sideImp, rel_pos);

            //apply friction impulse on the ground
            sideImp.scale(-1, sideImp);
            groundObject.applyImpulse(sideImp, rel_pos2);
        }
    }
};

var calcRollingFriction_vel1 = new Vec3();
var calcRollingFriction_vel2 = new Vec3();
var calcRollingFriction_vel = new Vec3();

function calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {
    var j1 = 0;
    var contactPosWorld = frictionPosWorld;

    // var rel_pos1 = new Vec3();
    // var rel_pos2 = new Vec3();
    var vel1 = calcRollingFriction_vel1;
    var vel2 = calcRollingFriction_vel2;
    var vel = calcRollingFriction_vel;
    // contactPosWorld.vsub(body0.position, rel_pos1);
    // contactPosWorld.vsub(body1.position, rel_pos2);

    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);
    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);
    vel1.vsub(vel2, vel);

    var vrel = frictionDirectionWorld.dot(vel);

    var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);
    var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);
    var relaxation = 1;
    var jacDiagABInv = relaxation / (denom0 + denom1);

    // calculate j that moves us to zero relative velocity
    j1 = -vrel * jacDiagABInv;

    if (maxImpulse < j1) {
        j1 = maxImpulse;
    }
    if (j1 < -maxImpulse) {
        j1 = -maxImpulse;
    }

    return j1;
}

var computeImpulseDenominator_r0 = new Vec3();
var computeImpulseDenominator_c0 = new Vec3();
var computeImpulseDenominator_vec = new Vec3();
var computeImpulseDenominator_m = new Vec3();
function computeImpulseDenominator(body, pos, normal) {
    var r0 = computeImpulseDenominator_r0;
    var c0 = computeImpulseDenominator_c0;
    var vec = computeImpulseDenominator_vec;
    var m = computeImpulseDenominator_m;

    pos.vsub(body.position, r0);
    r0.cross(normal, c0);
    body.invInertiaWorld.vmult(c0, m);
    m.cross(r0, vec);

    return body.invMass + normal.dot(vec);
}


var resolveSingleBilateral_vel1 = new Vec3();
var resolveSingleBilateral_vel2 = new Vec3();
var resolveSingleBilateral_vel = new Vec3();

//bilateral constraint between two dynamic objects
function resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse){
    var normalLenSqr = normal.norm2();
    if (normalLenSqr > 1.1){
        return 0; // no impulse
    }
    // var rel_pos1 = new Vec3();
    // var rel_pos2 = new Vec3();
    // pos1.vsub(body1.position, rel_pos1);
    // pos2.vsub(body2.position, rel_pos2);

    var vel1 = resolveSingleBilateral_vel1;
    var vel2 = resolveSingleBilateral_vel2;
    var vel = resolveSingleBilateral_vel;
    body1.getVelocityAtWorldPoint(pos1, vel1);
    body2.getVelocityAtWorldPoint(pos2, vel2);

    vel1.vsub(vel2, vel);

    var rel_vel = normal.dot(vel);

    var contactDamping = 0.2;
    var massTerm = 1 / (body1.invMass + body2.invMass);
    var impulse = - contactDamping * rel_vel * massTerm;

    return impulse;
}
},{"../collision/Ray":9,"../collision/RaycastResult":10,"../math/Quaternion":25,"../math/Vec3":27,"../objects/WheelInfo":33,"./Body":28}],30:[function(_dereq_,module,exports){
var Body = _dereq_('./Body');
var Sphere = _dereq_('../shapes/Sphere');
var Box = _dereq_('../shapes/Box');
var Vec3 = _dereq_('../math/Vec3');
var HingeConstraint = _dereq_('../constraints/HingeConstraint');

module.exports = RigidVehicle;

/**
 * Simple vehicle helper class with spherical rigid body wheels.
 * @class RigidVehicle
 * @constructor
 * @param {object} [options.chassisBody]
 */
function RigidVehicle(options){
    this.wheelBodies = [];

    /**
     * @property coordinateSystem
     * @type {Vec3}
     */
    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();

    /**
     * @property {Body} chassisBody
     */
    this.chassisBody = options.chassisBody;

    if(!this.chassisBody){
        // No chassis body given. Create it!
        var chassisShape = new Box(new Vec3(5, 2, 0.5));
        this.chassisBody = new Body(1, chassisShape);
    }

    /**
     * @property constraints
     * @type {Array}
     */
    this.constraints = [];

    this.wheelAxes = [];
    this.wheelForces = [];
}

/**
 * Add a wheel
 * @method addWheel
 * @param {object} options
 * @param {object} [options.isFrontWheel]
 * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.
 * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.
 * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.
 * @param {Body} [options.body] The wheel body.
 */
RigidVehicle.prototype.addWheel = function(options){
    options = options || {};
    var wheelBody = options.body;
    if(!wheelBody){
        wheelBody =  new Body(1, new Sphere(1.2));
    }
    this.wheelBodies.push(wheelBody);
    this.wheelForces.push(0);

    // Position constrain wheels
    var zero = new Vec3();
    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();

    // Set position locally to the chassis
    var worldPosition = new Vec3();
    this.chassisBody.pointToWorldFrame(position, worldPosition);
    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);

    // Constrain wheel
    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);
    this.wheelAxes.push(axis);

    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {
        pivotA: position,
        axisA: axis,
        pivotB: Vec3.ZERO,
        axisB: axis,
        collideConnected: false
    });
    this.constraints.push(hingeConstraint);

    return this.wheelBodies.length - 1;
};

/**
 * Set the steering value of a wheel.
 * @method setSteeringValue
 * @param {number} value
 * @param {integer} wheelIndex
 * @todo check coordinateSystem
 */
RigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){
    // Set angle of the hinge axis
    var axis = this.wheelAxes[wheelIndex];

    var c = Math.cos(value),
        s = Math.sin(value),
        x = axis.x,
        y = axis.y;
    this.constraints[wheelIndex].axisA.set(
        c*x -s*y,
        s*x +c*y,
        0
    );
};

/**
 * Set the target rotational speed of the hinge constraint.
 * @method setMotorSpeed
 * @param {number} value
 * @param {integer} wheelIndex
 */
RigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){
    var hingeConstraint = this.constraints[wheelIndex];
    hingeConstraint.enableMotor();
    hingeConstraint.motorTargetVelocity = value;
};

/**
 * Set the target rotational speed of the hinge constraint.
 * @method disableMotor
 * @param {number} value
 * @param {integer} wheelIndex
 */
RigidVehicle.prototype.disableMotor = function(wheelIndex){
    var hingeConstraint = this.constraints[wheelIndex];
    hingeConstraint.disableMotor();
};

var torque = new Vec3();

/**
 * Set the wheel force to apply on one of the wheels each time step
 * @method setWheelForce
 * @param  {number} value
 * @param  {integer} wheelIndex
 */
RigidVehicle.prototype.setWheelForce = function(value, wheelIndex){
    this.wheelForces[wheelIndex] = value;
};

/**
 * Apply a torque on one of the wheels.
 * @method applyWheelForce
 * @param  {number} value
 * @param  {integer} wheelIndex
 */
RigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){
    var axis = this.wheelAxes[wheelIndex];
    var wheelBody = this.wheelBodies[wheelIndex];
    var bodyTorque = wheelBody.torque;

    axis.scale(value, torque);
    wheelBody.vectorToWorldFrame(torque, torque);
    bodyTorque.vadd(torque, bodyTorque);
};

/**
 * Add the vehicle including its constraints to the world.
 * @method addToWorld
 * @param {World} world
 */
RigidVehicle.prototype.addToWorld = function(world){
    var constraints = this.constraints;
    var bodies = this.wheelBodies.concat([this.chassisBody]);

    for (var i = 0; i < bodies.length; i++) {
        world.add(bodies[i]);
    }

    for (var i = 0; i < constraints.length; i++) {
        world.addConstraint(constraints[i]);
    }

    world.addEventListener('preStep', this._update.bind(this));
};

RigidVehicle.prototype._update = function(){
    var wheelForces = this.wheelForces;
    for (var i = 0; i < wheelForces.length; i++) {
        this.applyWheelForce(wheelForces[i], i);
    }
};

/**
 * Remove the vehicle including its constraints from the world.
 * @method removeFromWorld
 * @param {World} world
 */
RigidVehicle.prototype.removeFromWorld = function(world){
    var constraints = this.constraints;
    var bodies = this.wheelBodies.concat([this.chassisBody]);

    for (var i = 0; i < bodies.length; i++) {
        world.remove(bodies[i]);
    }

    for (var i = 0; i < constraints.length; i++) {
        world.removeConstraint(constraints[i]);
    }
};

var worldAxis = new Vec3();

/**
 * Get current rotational velocity of a wheel
 * @method getWheelSpeed
 * @param {integer} wheelIndex
 */
RigidVehicle.prototype.getWheelSpeed = function(wheelIndex){
    var axis = this.wheelAxes[wheelIndex];
    var wheelBody = this.wheelBodies[wheelIndex];
    var w = wheelBody.angularVelocity;
    this.chassisBody.vectorToWorldFrame(axis, worldAxis);
    return w.dot(worldAxis);
};

},{"../constraints/HingeConstraint":14,"../math/Vec3":27,"../shapes/Box":34,"../shapes/Sphere":41,"./Body":28}],31:[function(_dereq_,module,exports){
module.exports = SPHSystem;

var Shape = _dereq_('../shapes/Shape');
var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var Particle = _dereq_('../shapes/Particle');
var Body = _dereq_('../objects/Body');
var Material = _dereq_('../material/Material');

/**
 * Smoothed-particle hydrodynamics system
 * @class SPHSystem
 * @constructor
 */
function SPHSystem(){
    this.particles = [];
    this.density = 1; // kg/m3
    this.smoothingRadius = 1; // Adjust so there are about 15-20 neighbor particles within this radius
    this.speedOfSound = 1;
    this.viscosity = 0.01;
    this.eps = 0.000001;

    // Stuff Computed per particle
    this.pressures = [];
    this.densities = [];
    this.neighbors = [];
}

SPHSystem.prototype.add = function(particle){
    this.particles.push(particle);
    if(this.neighbors.length < this.particles.length){
        this.neighbors.push([]);
    }
};

SPHSystem.prototype.remove = function(particle){
    var idx = this.particles.indexOf(particle);
    if(idx !== -1){
        this.particles.splice(idx,1);
        if(this.neighbors.length > this.particles.length){
            this.neighbors.pop();
        }
    }
};

/**
 * Get neighbors within smoothing volume, save in the array neighbors
 * @method getNeighbors
 * @param {Body} particle
 * @param {Array} neighbors
 */
var SPHSystem_getNeighbors_dist = new Vec3();
SPHSystem.prototype.getNeighbors = function(particle,neighbors){
    var N = this.particles.length,
        id = particle.id,
        R2 = this.smoothingRadius * this.smoothingRadius,
        dist = SPHSystem_getNeighbors_dist;
    for(var i=0; i!==N; i++){
        var p = this.particles[i];
        p.position.vsub(particle.position,dist);
        if(id!==p.id && dist.norm2() < R2){
            neighbors.push(p);
        }
    }
};

// Temp vectors for calculation
var SPHSystem_update_dist = new Vec3(),
    SPHSystem_update_a_pressure = new Vec3(),
    SPHSystem_update_a_visc = new Vec3(),
    SPHSystem_update_gradW = new Vec3(),
    SPHSystem_update_r_vec = new Vec3(),
    SPHSystem_update_u = new Vec3(); // Relative velocity
SPHSystem.prototype.update = function(){
    var N = this.particles.length,
        dist = SPHSystem_update_dist,
        cs = this.speedOfSound,
        eps = this.eps;

    for(var i=0; i!==N; i++){
        var p = this.particles[i]; // Current particle
        var neighbors = this.neighbors[i];

        // Get neighbors
        neighbors.length = 0;
        this.getNeighbors(p,neighbors);
        neighbors.push(this.particles[i]); // Add current too
        var numNeighbors = neighbors.length;

        // Accumulate density for the particle
        var sum = 0.0;
        for(var j=0; j!==numNeighbors; j++){

            //printf("Current particle has position %f %f %f\n",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());
            p.position.vsub(neighbors[j].position, dist);
            var len = dist.norm();

            var weight = this.w(len);
            sum += neighbors[j].mass * weight;
        }

        // Save
        this.densities[i] = sum;
        this.pressures[i] = cs * cs * (this.densities[i] - this.density);
    }

    // Add forces

    // Sum to these accelerations
    var a_pressure= SPHSystem_update_a_pressure;
    var a_visc =    SPHSystem_update_a_visc;
    var gradW =     SPHSystem_update_gradW;
    var r_vec =     SPHSystem_update_r_vec;
    var u =         SPHSystem_update_u;

    for(var i=0; i!==N; i++){

        var particle = this.particles[i];

        a_pressure.set(0,0,0);
        a_visc.set(0,0,0);

        // Init vars
        var Pij;
        var nabla;
        var Vij;

        // Sum up for all other neighbors
        var neighbors = this.neighbors[i];
        var numNeighbors = neighbors.length;

        //printf("Neighbors: ");
        for(var j=0; j!==numNeighbors; j++){

            var neighbor = neighbors[j];
            //printf("%d ",nj);

            // Get r once for all..
            particle.position.vsub(neighbor.position,r_vec);
            var r = r_vec.norm();

            // Pressure contribution
            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));
            this.gradw(r_vec, gradW);
            // Add to pressure acceleration
            gradW.mult(Pij , gradW);
            a_pressure.vadd(gradW, a_pressure);

            // Viscosity contribution
            neighbor.velocity.vsub(particle.velocity, u);
            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );
            nabla = this.nablaw(r);
            u.mult(nabla,u);
            // Add to viscosity acceleration
            a_visc.vadd( u, a_visc );
        }

        // Calculate force
        a_visc.mult(particle.mass, a_visc);
        a_pressure.mult(particle.mass, a_pressure);

        // Add force to particles
        particle.force.vadd(a_visc, particle.force);
        particle.force.vadd(a_pressure, particle.force);
    }
};

// Calculate the weight using the W(r) weightfunction
SPHSystem.prototype.w = function(r){
    // 315
    var h = this.smoothingRadius;
    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);
};

// calculate gradient of the weight function
SPHSystem.prototype.gradw = function(rVec,resultVec){
    var r = rVec.norm(),
        h = this.smoothingRadius;
    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);
};

// Calculate nabla(W)
SPHSystem.prototype.nablaw = function(r){
    var h = this.smoothingRadius;
    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);
    return nabla;
};

},{"../material/Material":22,"../math/Quaternion":25,"../math/Vec3":27,"../objects/Body":28,"../shapes/Particle":38,"../shapes/Shape":40}],32:[function(_dereq_,module,exports){
var Vec3 = _dereq_('../math/Vec3');

module.exports = Spring;

/**
 * A spring, connecting two bodies.
 *
 * @class Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.restLength]   A number > 0. Default: 1
 * @param {number} [options.stiffness]    A number >= 0. Default: 100
 * @param {number} [options.damping]      A number >= 0. Default: 1
 * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.
 * @param {Vec3}  [options.worldAnchorB]
 * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.
 * @param {Vec3}  [options.localAnchorB]
 */
function Spring(bodyA,bodyB,options){
    options = options || {};

    /**
     * Rest length of the spring.
     * @property restLength
     * @type {number}
     */
    this.restLength = typeof(options.restLength) === "number" ? options.restLength : 1;

    /**
     * Stiffness of the spring.
     * @property stiffness
     * @type {number}
     */
    this.stiffness = options.stiffness || 100;

    /**
     * Damping of the spring.
     * @property damping
     * @type {number}
     */
    this.damping = options.damping || 1;

    /**
     * First connected body.
     * @property bodyA
     * @type {Body}
     */
    this.bodyA = bodyA;

    /**
     * Second connected body.
     * @property bodyB
     * @type {Body}
     */
    this.bodyB = bodyB;

    /**
     * Anchor for bodyA in local bodyA coordinates.
     * @property localAnchorA
     * @type {Vec3}
     */
    this.localAnchorA = new Vec3();

    /**
     * Anchor for bodyB in local bodyB coordinates.
     * @property localAnchorB
     * @type {Vec3}
     */
    this.localAnchorB = new Vec3();

    if(options.localAnchorA){
        this.localAnchorA.copy(options.localAnchorA);
    }
    if(options.localAnchorB){
        this.localAnchorB.copy(options.localAnchorB);
    }
    if(options.worldAnchorA){
        this.setWorldAnchorA(options.worldAnchorA);
    }
    if(options.worldAnchorB){
        this.setWorldAnchorB(options.worldAnchorB);
    }
}

/**
 * Set the anchor point on body A, using world coordinates.
 * @method setWorldAnchorA
 * @param {Vec3} worldAnchorA
 */
Spring.prototype.setWorldAnchorA = function(worldAnchorA){
    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);
};

/**
 * Set the anchor point on body B, using world coordinates.
 * @method setWorldAnchorB
 * @param {Vec3} worldAnchorB
 */
Spring.prototype.setWorldAnchorB = function(worldAnchorB){
    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);
};

/**
 * Get the anchor point on body A, in world coordinates.
 * @method getWorldAnchorA
 * @param {Vec3} result The vector to store the result in.
 */
Spring.prototype.getWorldAnchorA = function(result){
    this.bodyA.pointToWorldFrame(this.localAnchorA,result);
};

/**
 * Get the anchor point on body B, in world coordinates.
 * @method getWorldAnchorB
 * @param {Vec3} result The vector to store the result in.
 */
Spring.prototype.getWorldAnchorB = function(result){
    this.bodyB.pointToWorldFrame(this.localAnchorB,result);
};

var applyForce_r =              new Vec3(),
    applyForce_r_unit =         new Vec3(),
    applyForce_u =              new Vec3(),
    applyForce_f =              new Vec3(),
    applyForce_worldAnchorA =   new Vec3(),
    applyForce_worldAnchorB =   new Vec3(),
    applyForce_ri =             new Vec3(),
    applyForce_rj =             new Vec3(),
    applyForce_ri_x_f =         new Vec3(),
    applyForce_rj_x_f =         new Vec3(),
    applyForce_tmp =            new Vec3();

/**
 * Apply the spring force to the connected bodies.
 * @method applyForce
 */
Spring.prototype.applyForce = function(){
    var k = this.stiffness,
        d = this.damping,
        l = this.restLength,
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        r = applyForce_r,
        r_unit = applyForce_r_unit,
        u = applyForce_u,
        f = applyForce_f,
        tmp = applyForce_tmp;

    var worldAnchorA = applyForce_worldAnchorA,
        worldAnchorB = applyForce_worldAnchorB,
        ri = applyForce_ri,
        rj = applyForce_rj,
        ri_x_f = applyForce_ri_x_f,
        rj_x_f = applyForce_rj_x_f;

    // Get world anchors
    this.getWorldAnchorA(worldAnchorA);
    this.getWorldAnchorB(worldAnchorB);

    // Get offset points
    worldAnchorA.vsub(bodyA.position,ri);
    worldAnchorB.vsub(bodyB.position,rj);

    // Compute distance vector between world anchor points
    worldAnchorB.vsub(worldAnchorA,r);
    var rlen = r.norm();
    r_unit.copy(r);
    r_unit.normalize();

    // Compute relative velocity of the anchor points, u
    bodyB.velocity.vsub(bodyA.velocity,u);
    // Add rotational velocity

    bodyB.angularVelocity.cross(rj,tmp);
    u.vadd(tmp,u);
    bodyA.angularVelocity.cross(ri,tmp);
    u.vsub(tmp,u);

    // F = - k * ( x - L ) - D * ( u )
    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);

    // Add forces to bodies
    bodyA.force.vsub(f,bodyA.force);
    bodyB.force.vadd(f,bodyB.force);

    // Angular force
    ri.cross(f,ri_x_f);
    rj.cross(f,rj_x_f);
    bodyA.torque.vsub(ri_x_f,bodyA.torque);
    bodyB.torque.vadd(rj_x_f,bodyB.torque);
};

},{"../math/Vec3":27}],33:[function(_dereq_,module,exports){
var Vec3 = _dereq_('../math/Vec3');
var Transform = _dereq_('../math/Transform');
var RaycastResult = _dereq_('../collision/RaycastResult');
var Utils = _dereq_('../utils/Utils');

module.exports = WheelInfo;

/**
 * @class WheelInfo
 * @constructor
 * @param {Object} [options]
 *
 * @param {Vec3} [options.chassisConnectionPointLocal]
 * @param {Vec3} [options.chassisConnectionPointWorld]
 * @param {Vec3} [options.directionLocal]
 * @param {Vec3} [options.directionWorld]
 * @param {Vec3} [options.axleLocal]
 * @param {Vec3} [options.axleWorld]
 * @param {number} [options.suspensionRestLength=1]
 * @param {number} [options.suspensionMaxLength=2]
 * @param {number} [options.radius=1]
 * @param {number} [options.suspensionStiffness=100]
 * @param {number} [options.dampingCompression=10]
 * @param {number} [options.dampingRelaxation=10]
 * @param {number} [options.frictionSlip=10000]
 * @param {number} [options.steering=0]
 * @param {number} [options.rotation=0]
 * @param {number} [options.deltaRotation=0]
 * @param {number} [options.rollInfluence=0.01]
 * @param {number} [options.maxSuspensionForce]
 * @param {number} [options.isFrontWheel=true]
 * @param {number} [options.clippedInvContactDotSuspension=1]
 * @param {number} [options.suspensionRelativeVelocity=0]
 * @param {number} [options.suspensionForce=0]
 * @param {number} [options.skidInfo=0]
 * @param {number} [options.suspensionLength=0]
 * @param {number} [options.maxSuspensionTravel=1]
 * @param {number} [options.useCustomSlidingRotationalSpeed=false]
 * @param {number} [options.customSlidingRotationalSpeed=-0.1]
 */
function WheelInfo(options){
    options = Utils.defaults(options, {
        chassisConnectionPointLocal: new Vec3(),
        chassisConnectionPointWorld: new Vec3(),
        directionLocal: new Vec3(),
        directionWorld: new Vec3(),
        axleLocal: new Vec3(),
        axleWorld: new Vec3(),
        suspensionRestLength: 1,
        suspensionMaxLength: 2,
        radius: 1,
        suspensionStiffness: 100,
        dampingCompression: 10,
        dampingRelaxation: 10,
        frictionSlip: 10000,
        steering: 0,
        rotation: 0,
        deltaRotation: 0,
        rollInfluence: 0.01,
        maxSuspensionForce: Number.MAX_VALUE,
        isFrontWheel: true,
        clippedInvContactDotSuspension: 1,
        suspensionRelativeVelocity: 0,
        suspensionForce: 0,
        skidInfo: 0,
        suspensionLength: 0,
        maxSuspensionTravel: 1,
        useCustomSlidingRotationalSpeed: false,
        customSlidingRotationalSpeed: -0.1
    });

    /**
     * Max travel distance of the suspension, in meters.
     * @property {number} maxSuspensionTravel
     */
    this.maxSuspensionTravel = options.maxSuspensionTravel;

    /**
     * Speed to apply to the wheel rotation when the wheel is sliding.
     * @property {number} customSlidingRotationalSpeed
     */
    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;

    /**
     * If the customSlidingRotationalSpeed should be used.
     * @property {Boolean} useCustomSlidingRotationalSpeed
     */
    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;

    /**
     * @property {Boolean} sliding
     */
    this.sliding = false;

    /**
     * Connection point, defined locally in the chassis body frame.
     * @property {Vec3} chassisConnectionPointLocal
     */
    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();

    /**
     * @property {Vec3} chassisConnectionPointWorld
     */
    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();

    /**
     * @property {Vec3} directionLocal
     */
    this.directionLocal = options.directionLocal.clone();

    /**
     * @property {Vec3} directionWorld
     */
    this.directionWorld = options.directionWorld.clone();

    /**
     * @property {Vec3} axleLocal
     */
    this.axleLocal = options.axleLocal.clone();

    /**
     * @property {Vec3} axleWorld
     */
    this.axleWorld = options.axleWorld.clone();

    /**
     * @property {number} suspensionRestLength
     */
    this.suspensionRestLength = options.suspensionRestLength;

    /**
     * @property {number} suspensionMaxLength
     */
    this.suspensionMaxLength = options.suspensionMaxLength;

    /**
     * @property {number} radius
     */
    this.radius = options.radius;

    /**
     * @property {number} suspensionStiffness
     */
    this.suspensionStiffness = options.suspensionStiffness;

    /**
     * @property {number} dampingCompression
     */
    this.dampingCompression = options.dampingCompression;

    /**
     * @property {number} dampingRelaxation
     */
    this.dampingRelaxation = options.dampingRelaxation;

    /**
     * @property {number} frictionSlip
     */
    this.frictionSlip = options.frictionSlip;

    /**
     * @property {number} steering
     */
    this.steering = 0;

    /**
     * Rotation value, in radians.
     * @property {number} rotation
     */
    this.rotation = 0;

    /**
     * @property {number} deltaRotation
     */
    this.deltaRotation = 0;

    /**
     * @property {number} rollInfluence
     */
    this.rollInfluence = options.rollInfluence;

    /**
     * @property {number} maxSuspensionForce
     */
    this.maxSuspensionForce = options.maxSuspensionForce;

    /**
     * @property {number} engineForce
     */
    this.engineForce = 0;

    /**
     * @property {number} brake
     */
    this.brake = 0;

    /**
     * @property {number} isFrontWheel
     */
    this.isFrontWheel = options.isFrontWheel;

    /**
     * @property {number} clippedInvContactDotSuspension
     */
    this.clippedInvContactDotSuspension = 1;

    /**
     * @property {number} suspensionRelativeVelocity
     */
    this.suspensionRelativeVelocity = 0;

    /**
     * @property {number} suspensionForce
     */
    this.suspensionForce = 0;

    /**
     * @property {number} skidInfo
     */
    this.skidInfo = 0;

    /**
     * @property {number} suspensionLength
     */
    this.suspensionLength = 0;

    /**
     * @property {number} sideImpulse
     */
    this.sideImpulse = 0;

    /**
     * @property {number} forwardImpulse
     */
    this.forwardImpulse = 0;

    /**
     * The result from raycasting
     * @property {RaycastResult} raycastResult
     */
    this.raycastResult = new RaycastResult();

    /**
     * Wheel world transform
     * @property {Transform} worldTransform
     */
    this.worldTransform = new Transform();

    /**
     * @property {boolean} isInContact
     */
    this.isInContact = false;
}

var chassis_velocity_at_contactPoint = new Vec3();
var relpos = new Vec3();
var chassis_velocity_at_contactPoint = new Vec3();
WheelInfo.prototype.updateWheel = function(chassis){
    var raycastResult = this.raycastResult;

    if (this.isInContact){
        var project= raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);
        raycastResult.hitPointWorld.vsub(chassis.position, relpos);
        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);
        var projVel = raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );
        if (project >= -0.1) {
            this.suspensionRelativeVelocity = 0.0;
            this.clippedInvContactDotSuspension = 1.0 / 0.1;
        } else {
            var inv = -1 / project;
            this.suspensionRelativeVelocity = projVel * inv;
            this.clippedInvContactDotSuspension = inv;
        }

    } else {
        // Not in contact : position wheel in a nice (rest length) position
        raycastResult.suspensionLength = this.suspensionRestLength;
        this.suspensionRelativeVelocity = 0.0;
        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);
        this.clippedInvContactDotSuspension = 1.0;
    }
};
},{"../collision/RaycastResult":10,"../math/Transform":26,"../math/Vec3":27,"../utils/Utils":48}],34:[function(_dereq_,module,exports){
module.exports = Box;

var Shape = _dereq_('./Shape');
var Vec3 = _dereq_('../math/Vec3');
var ConvexPolyhedron = _dereq_('./ConvexPolyhedron');

/**
 * A 3d box shape.
 * @class Box
 * @constructor
 * @param {Vec3} halfExtents
 * @author schteppe
 * @extends Shape
 */
function Box(halfExtents){
    Shape.call(this);

    this.type = Shape.types.BOX;

    /**
     * @property halfExtents
     * @type {Vec3}
     */
    this.halfExtents = halfExtents;

    /**
     * Used by the contact generator to make contacts with other convex polyhedra for example
     * @property convexPolyhedronRepresentation
     * @type {ConvexPolyhedron}
     */
    this.convexPolyhedronRepresentation = null;

    this.updateConvexPolyhedronRepresentation();
    this.updateBoundingSphereRadius();
}
Box.prototype = new Shape();
Box.prototype.constructor = Box;

/**
 * Updates the local convex polyhedron representation used for some collisions.
 * @method updateConvexPolyhedronRepresentation
 */
Box.prototype.updateConvexPolyhedronRepresentation = function(){
    var sx = this.halfExtents.x;
    var sy = this.halfExtents.y;
    var sz = this.halfExtents.z;
    var V = Vec3;

    var h = new ConvexPolyhedron([new V(-sx,-sy,-sz),
                                         new V( sx,-sy,-sz),
                                         new V( sx, sy,-sz),
                                         new V(-sx, sy,-sz),
                                         new V(-sx,-sy, sz),
                                         new V( sx,-sy, sz),
                                         new V( sx, sy, sz),
                                         new V(-sx, sy, sz)],
                                         [[3,2,1,0], // -z
                                          [4,5,6,7], // +z
                                          [5,4,0,1], // -y
                                          [2,3,7,6], // +y
                                          [0,4,7,3], // -x
                                          [1,2,6,5], // +x
                                          ],
                                        [new V( 0, 0,-1),
                                         new V( 0, 0, 1),
                                         new V( 0,-1, 0),
                                         new V( 0, 1, 0),
                                         new V(-1, 0, 0),
                                         new V( 1, 0, 0)]);
    this.convexPolyhedronRepresentation = h;
};

/**
 * @method calculateLocalInertia
 * @param  {Number} mass
 * @param  {Vec3} target
 * @return {Vec3}
 */
Box.prototype.calculateLocalInertia = function(mass,target){
    target = target || new Vec3();
    Box.calculateInertia(this.halfExtents, mass, target);
    return target;
};

Box.calculateInertia = function(halfExtents,mass,target){
    var e = halfExtents;
    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );
    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );
    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );
};

/**
 * Get the box 6 side normals
 * @method getSideNormals
 * @param {Boolean}     includeNegative If true, this function returns 6 vectors. If false, it only returns 3 (but you get 6 by reversing those 3)
 * @param {Quaternion}  quat            Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.
 * @return {array}
 */
Box.prototype.getSideNormals = function(sixTargetVectors,quat){
    var sides = sixTargetVectors;
    var ex = this.halfExtents;
    sides[0].set(  ex.x,     0,     0);
    sides[1].set(     0,  ex.y,     0);
    sides[2].set(     0,     0,  ex.z);
    sides[3].set( -ex.x,     0,     0);
    sides[4].set(     0, -ex.y,     0);
    sides[5].set(     0,     0, -ex.z);

    if(quat!==undefined){
        for(var i=0; i!==sides.length; i++){
            quat.vmult(sides[i],sides[i]);
        }
    }

    return sides;
};

Box.prototype.volume = function(){
    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
};

Box.prototype.updateBoundingSphereRadius = function(){
    this.boundingSphereRadius = this.halfExtents.norm();
};

var worldCornerTempPos = new Vec3();
var worldCornerTempNeg = new Vec3();
Box.prototype.forEachWorldCorner = function(pos,quat,callback){

    var e = this.halfExtents;
    var corners = [[  e.x,  e.y,  e.z],
                   [ -e.x,  e.y,  e.z],
                   [ -e.x, -e.y,  e.z],
                   [ -e.x, -e.y, -e.z],
                   [  e.x, -e.y, -e.z],
                   [  e.x,  e.y, -e.z],
                   [ -e.x,  e.y, -e.z],
                   [  e.x, -e.y,  e.z]];
    for(var i=0; i<corners.length; i++){
        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);
        quat.vmult(worldCornerTempPos,worldCornerTempPos);
        pos.vadd(worldCornerTempPos,worldCornerTempPos);
        callback(worldCornerTempPos.x,
                 worldCornerTempPos.y,
                 worldCornerTempPos.z);
    }
};

var worldCornersTemp = [
    new Vec3(),
    new Vec3(),
    new Vec3(),
    new Vec3(),
    new Vec3(),
    new Vec3(),
    new Vec3(),
    new Vec3()
];
Box.prototype.calculateWorldAABB = function(pos,quat,min,max){

    var e = this.halfExtents;
    worldCornersTemp[0].set(e.x, e.y, e.z);
    worldCornersTemp[1].set(-e.x,  e.y, e.z);
    worldCornersTemp[2].set(-e.x, -e.y, e.z);
    worldCornersTemp[3].set(-e.x, -e.y, -e.z);
    worldCornersTemp[4].set(e.x, -e.y, -e.z);
    worldCornersTemp[5].set(e.x,  e.y, -e.z);
    worldCornersTemp[6].set(-e.x,  e.y, -e.z);
    worldCornersTemp[7].set(e.x, -e.y,  e.z);

    var wc = worldCornersTemp[0];
    quat.vmult(wc, wc);
    pos.vadd(wc, wc);
    max.copy(wc);
    min.copy(wc);
    for(var i=1; i<8; i++){
        var wc = worldCornersTemp[i];
        quat.vmult(wc, wc);
        pos.vadd(wc, wc);
        var x = wc.x;
        var y = wc.y;
        var z = wc.z;
        if(x > max.x){
            max.x = x;
        }
        if(y > max.y){
            max.y = y;
        }
        if(z > max.z){
            max.z = z;
        }

        if(x < min.x){
            min.x = x;
        }
        if(y < min.y){
            min.y = y;
        }
        if(z < min.z){
            min.z = z;
        }
    }

    // Get each axis max
    // min.set(Infinity,Infinity,Infinity);
    // max.set(-Infinity,-Infinity,-Infinity);
    // this.forEachWorldCorner(pos,quat,function(x,y,z){
    //     if(x > max.x){
    //         max.x = x;
    //     }
    //     if(y > max.y){
    //         max.y = y;
    //     }
    //     if(z > max.z){
    //         max.z = z;
    //     }

    //     if(x < min.x){
    //         min.x = x;
    //     }
    //     if(y < min.y){
    //         min.y = y;
    //     }
    //     if(z < min.z){
    //         min.z = z;
    //     }
    // });
};

},{"../math/Vec3":27,"./ConvexPolyhedron":35,"./Shape":40}],35:[function(_dereq_,module,exports){
module.exports = ConvexPolyhedron;

var Shape = _dereq_('./Shape');
var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var Transform = _dereq_('../math/Transform');

/**
 * A set of polygons describing a convex shape.
 * @class ConvexPolyhedron
 * @constructor
 * @extends Shape
 * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained
 * in the same 3D plane), instead these should be merged into one polygon.
 *
 * @param {array} points An array of Vec3's
 * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.
 *
 * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)
 * @author schteppe / https://github.com/schteppe
 * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/
 * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp
 *
 * @todo Move the clipping functions to ContactGenerator?
 * @todo Automatically merge coplanar polygons in constructor.
 */
function ConvexPolyhedron(points, faces) {
    var that = this;
    Shape.call(this);
    this.type = Shape.types.CONVEXPOLYHEDRON;

    /**
     * Array of Vec3
     * @property vertices
     * @type {Array}
     */
    this.vertices = points||[];

    this.worldVertices = []; // World transformed version of .vertices
    this.worldVerticesNeedsUpdate = true;

    /**
     * Array of integer arrays, indicating which vertices each face consists of
     * @property faces
     * @type {Array}
     */
    this.faces = faces||[];

    /**
     * Array of Vec3
     * @property faceNormals
     * @type {Array}
     */
    this.faceNormals = [];
    this.computeNormals();

    this.worldFaceNormalsNeedsUpdate = true;
    this.worldFaceNormals = []; // World transformed version of .faceNormals

    /**
     * Array of Vec3
     * @property uniqueEdges
     * @type {Array}
     */
    this.uniqueEdges = [];

    this.computeEdges();
    this.updateBoundingSphereRadius();
}
ConvexPolyhedron.prototype = new Shape();
ConvexPolyhedron.prototype.constructor = ConvexPolyhedron;

/**
 * Computes uniqueEdges
 * @method computeEdges
 */
ConvexPolyhedron.prototype.computeEdges = function(){
    var faces = this.faces;
    var vertices = this.vertices;
    var nv = vertices.length;
    var edges = this.uniqueEdges;

    edges.length = 0;

    for(var pi=0; pi<nv; pi++){
        var p = vertices[pi];
        if(!(p instanceof Vec3)){
            throw "Argument 1 must be instance of Vec3";
        }
        this.uniqueEdges.push(p);
    }

    for(var i=0; i<faces.length; i++){
        var face = faces[i];
        var numVertices = face.length;
        for(var j = 0; j < numVertices; j++){
            var k = ( j+1 ) % numVertices;
            var edge = new Vec3();
            vertices[face[j]].vsub(vertices[face[k]], edge);
            edge.normalize();
            var found = false;
            for(var p=0; p < edges.length; p++){
                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){
                    found = true;
                    break;
                }
            }

            if (!found){
                edges.push(edge);
            }

            if (edge) {
                edge.face1 = i;
            } else {
                /*
                var ed;
                ed.m_face0 = i;
                edges.insert(vp,ed);
                 */
            }
        }
    }
};

/**
 * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.
 * @method computeNormals
 */
ConvexPolyhedron.prototype.computeNormals = function(){
    this.faceNormals.length = this.faces.length;

    // Generate normals
    for(var i=0; i<this.faces.length; i++){

        // Check so all vertices exists for this face
        for(var j=0; j<this.faces[i].length; j++){
            if(!this.vertices[this.faces[i][j]]){
                throw new Error("Vertex "+this.faces[i][j]+" not found!");
            }
        }

        var n = this.faceNormals[i] || new Vec3();
        this.getFaceNormal(i,n);
        n.negate(n);
        this.faceNormals[i] = n;
        var vertex = this.vertices[this.faces[i][0]];
        if(n.dot(vertex) < 0){
            console.error(".faceNormals[" + i + "] = Vec3("+n.toString()+") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.");
            for(var j=0; j<this.faces[i].length; j++){
                console.warn(".vertices["+this.faces[i][j]+"] = Vec3("+this.vertices[this.faces[i][j]].toString()+")");
            }
        }
    }
};

/**
 * Get face normal given 3 vertices
 * @static
 * @method getFaceNormal
 * @param {Vec3} va
 * @param {Vec3} vb
 * @param {Vec3} vc
 * @param {Vec3} target
 */
var cb = new Vec3();
var ab = new Vec3();
ConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {
    vb.vsub(va,ab);
    vc.vsub(vb,cb);
    cb.cross(ab,target);
    if ( !target.isZero() ) {
        target.normalize();
    }
};

/**
 * Compute the normal of a face from its vertices
 * @method getFaceNormal
 * @param  {Number} i
 * @param  {Vec3} target
 */
ConvexPolyhedron.prototype.getFaceNormal = function(i,target){
    var f = this.faces[i];
    var va = this.vertices[f[0]];
    var vb = this.vertices[f[1]];
    var vc = this.vertices[f[2]];
    return ConvexPolyhedron.computeNormal(va,vb,vc,target);
};

/**
 * @method clipAgainstHull
 * @param {Vec3} posA
 * @param {Quaternion} quatA
 * @param {ConvexPolyhedron} hullB
 * @param {Vec3} posB
 * @param {Quaternion} quatB
 * @param {Vec3} separatingNormal
 * @param {Number} minDist Clamp distance
 * @param {Number} maxDist
 * @param {array} result The an array of contact point objects, see clipFaceAgainstHull
 * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp
 */
var cah_WorldNormal = new Vec3();
ConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){
    var WorldNormal = cah_WorldNormal;
    if(!(posA instanceof Vec3)){
        throw new Error("posA must be Vec3");
    }
    if(!(quatA instanceof Quaternion)){
        throw new Error("quatA must be Quaternion");
    }
    var hullA = this;
    var curMaxDist = maxDist;
    var closestFaceB = -1;
    var dmax = -Infinity;
    for(var face=0; face < hullB.faces.length; face++){
        WorldNormal.copy(hullB.faceNormals[face]);
        quatB.vmult(WorldNormal,WorldNormal);
        //posB.vadd(WorldNormal,WorldNormal);
        var d = WorldNormal.dot(separatingNormal);
        if (d > dmax){
            dmax = d;
            closestFaceB = face;
        }
    }
    var worldVertsB1 = [];
    var polyB = hullB.faces[closestFaceB];
    var numVertices = polyB.length;
    for(var e0=0; e0<numVertices; e0++){
        var b = hullB.vertices[polyB[e0]];
        var worldb = new Vec3();
        worldb.copy(b);
        quatB.vmult(worldb,worldb);
        posB.vadd(worldb,worldb);
        worldVertsB1.push(worldb);
    }

    if (closestFaceB>=0){
        this.clipFaceAgainstHull(separatingNormal,
                                 posA,
                                 quatA,
                                 worldVertsB1,
                                 minDist,
                                 maxDist,
                                 result);
    }
};

/**
 * Find the separating axis between this hull and another
 * @method findSeparatingAxis
 * @param {ConvexPolyhedron} hullB
 * @param {Vec3} posA
 * @param {Quaternion} quatA
 * @param {Vec3} posB
 * @param {Quaternion} quatB
 * @param {Vec3} target The target vector to save the axis in
 * @return {bool} Returns false if a separation is found, else true
 */
var fsa_faceANormalWS3 = new Vec3(),
    fsa_Worldnormal1 = new Vec3(),
    fsa_deltaC = new Vec3(),
    fsa_worldEdge0 = new Vec3(),
    fsa_worldEdge1 = new Vec3(),
    fsa_Cross = new Vec3();
ConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){
    var faceANormalWS3 = fsa_faceANormalWS3,
        Worldnormal1 = fsa_Worldnormal1,
        deltaC = fsa_deltaC,
        worldEdge0 = fsa_worldEdge0,
        worldEdge1 = fsa_worldEdge1,
        Cross = fsa_Cross;

    var dmin = Infinity;
    var hullA = this;
    var curPlaneTests=0;
    var numFacesA = faceListA ? faceListA.length : hullA.faces.length;

    // Test normals from hullA
    for(var i=0; i<numFacesA; i++){
        var fi = faceListA ? faceListA[i] : i;
        // Get world face normal
        faceANormalWS3.copy(hullA.faceNormals[fi]);
        quatA.vmult(faceANormalWS3,faceANormalWS3);
        //posA.vadd(faceANormalWS3,faceANormalWS3); // Needed?
        //console.log("face normal:",hullA.faceNormals[fi].toString(),"world face normal:",faceANormalWS3);
        var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);
        if(d===false){
            return false;
        }

        if(d<dmin){
            dmin = d;
            target.copy(faceANormalWS3);
        }
    }

    // Test normals from hullB
    var numFacesB = faceListB ? faceListB.length : hullB.faces.length;
    for(var i=0;i<numFacesB;i++){

        var fi = faceListB ? faceListB[i] : i;

        Worldnormal1.copy(hullB.faceNormals[fi]);
        quatB.vmult(Worldnormal1,Worldnormal1);
        //posB.vadd(Worldnormal1,Worldnormal1);
        //console.log("facenormal",hullB.faceNormals[fi].toString(),"world:",Worldnormal1.toString());
        curPlaneTests++;
        var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);
        if(d===false){
            return false;
        }

        if(d<dmin){
            dmin = d;
            target.copy(Worldnormal1);
        }
    }

    var edgeAstart,edgeAend,edgeBstart,edgeBend;

    var curEdgeEdge = 0;
    // Test edges
    for(var e0=0; e0<hullA.uniqueEdges.length; e0++){
        // Get world edge
        worldEdge0.copy(hullA.uniqueEdges[e0]);
        quatA.vmult(worldEdge0,worldEdge0);
        //posA.vadd(worldEdge0,worldEdge0); // needed?

        //console.log("edge0:",worldEdge0.toString());

        for(var e1=0; e1<hullB.uniqueEdges.length; e1++){
            worldEdge1.copy(hullB.uniqueEdges[e1]);
            quatB.vmult(worldEdge1,worldEdge1);
            //posB.vadd(worldEdge1,worldEdge1); // needed?
            //console.log("edge1:",worldEdge1.toString());
            worldEdge0.cross(worldEdge1,Cross);
            curEdgeEdge++;
            if(!Cross.almostZero()){
                Cross.normalize();
                var dist = hullA.testSepAxis( Cross, hullB, posA,quatA,posB,quatB);
                if(dist===false){
                    return false;
                }
                if(dist<dmin){
                    dmin = dist;
                    target.copy(Cross);
                }
            }
        }
    }

    posB.vsub(posA,deltaC);
    if((deltaC.dot(target))>0.0){
        target.negate(target);
    }
    return true;
};

/**
 * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.
 * @method testSepAxis
 * @param {Vec3} axis
 * @param {ConvexPolyhedron} hullB
 * @param {Vec3} posA
 * @param {Quaternion} quatA
 * @param {Vec3} posB
 * @param {Quaternion} quatB
 * @return {float} The overlap depth, or FALSE if no penetration.
 */
ConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){
    var maxminA=[], maxminB=[], hullA=this;
    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);
    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);
    var maxA = maxminA[0];
    var minA = maxminA[1];
    var maxB = maxminB[0];
    var minB = maxminB[1];
    if(maxA<minB || maxB<minA){
        //console.log(minA,maxA,minB,maxB);
        return false; // Separated
    }
    var d0 = maxA - minB;
    var d1 = maxB - minA;
    var depth = d0<d1 ? d0:d1;
    return depth;
};

var cli_aabbmin = new Vec3(),
    cli_aabbmax = new Vec3();

/**
 * @method calculateLocalInertia
 * @param  {Number} mass
 * @param  {Vec3} target
 */
ConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){
    // Approximate with box inertia
    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);
    var x = cli_aabbmax.x - cli_aabbmin.x,
        y = cli_aabbmax.y - cli_aabbmin.y,
        z = cli_aabbmax.z - cli_aabbmin.z;
    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );
    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );
    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );
};

/**
 * @method getPlaneConstantOfFace
 * @param  {Number} face_i Index of the face
 * @return {Number}
 */
ConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){
    var f = this.faces[face_i];
    var n = this.faceNormals[face_i];
    var v = this.vertices[f[0]];
    var c = -n.dot(v);
    return c;
};

/**
 * Clip a face against a hull.
 * @method clipFaceAgainstHull
 * @param {Vec3} separatingNormal
 * @param {Vec3} posA
 * @param {Quaternion} quatA
 * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.
 * @param {Number} minDist Distance clamping
 * @param {Number} maxDist
 * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.
 */
var cfah_faceANormalWS = new Vec3(),
    cfah_edge0 = new Vec3(),
    cfah_WorldEdge0 = new Vec3(),
    cfah_worldPlaneAnormal1 = new Vec3(),
    cfah_planeNormalWS1 = new Vec3(),
    cfah_worldA1 = new Vec3(),
    cfah_localPlaneNormal = new Vec3(),
    cfah_planeNormalWS = new Vec3();
ConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){
    if(!(separatingNormal instanceof Vec3)){
        throw new Error("sep normal must be vector");
    }
    if(!(worldVertsB1 instanceof Array)){
        throw new Error("world verts must be array");
    }

    var faceANormalWS = cfah_faceANormalWS,
        edge0 = cfah_edge0,
        WorldEdge0 = cfah_WorldEdge0,
        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,
        planeNormalWS1 = cfah_planeNormalWS1,
        worldA1 = cfah_worldA1,
        localPlaneNormal = cfah_localPlaneNormal,
        planeNormalWS = cfah_planeNormalWS;

    minDist = Number(minDist);
    maxDist = Number(maxDist);
    var hullA = this;
    var worldVertsB2 = [];
    var pVtxIn = worldVertsB1;
    var pVtxOut = worldVertsB2;
    // Find the face with normal closest to the separating axis
    var closestFaceA = -1;
    var dmin = Infinity;
    for(var face=0; face<hullA.faces.length; face++){
        faceANormalWS.copy(hullA.faceNormals[face]);
        quatA.vmult(faceANormalWS,faceANormalWS);
        //posA.vadd(faceANormalWS,faceANormalWS);
        var d = faceANormalWS.dot(separatingNormal);
        if (d < dmin){
            dmin = d;
            closestFaceA = face;
        }
    }
    if (closestFaceA<0){
        console.log("--- did not find any closest face... ---");
        return;
    }
    //console.log("closest A: ",closestFaceA);
    // Get the face and construct connected faces
    var polyA = hullA.faces[closestFaceA];
    polyA.connectedFaces = [];
    for(var i=0; i<hullA.faces.length; i++){
        for(var j=0; j<hullA.faces[i].length; j++){
            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){
                polyA.connectedFaces.push(i);
            }
        }
    }
    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face
    var numContacts = pVtxIn.length;
    var numVerticesA = polyA.length;
    var res = [];
    for(var e0=0; e0<numVerticesA; e0++){
        var a = hullA.vertices[polyA[e0]];
        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];
        a.vsub(b,edge0);
        WorldEdge0.copy(edge0);
        quatA.vmult(WorldEdge0,WorldEdge0);
        posA.vadd(WorldEdge0,WorldEdge0);
        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);
        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);
        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);
        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);
        planeNormalWS1.negate(planeNormalWS1);
        worldA1.copy(a);
        quatA.vmult(worldA1,worldA1);
        posA.vadd(worldA1,worldA1);
        var planeEqWS1 = -worldA1.dot(planeNormalWS1);
        var planeEqWS;
        if(true){
            var otherFace = polyA.connectedFaces[e0];
            localPlaneNormal.copy(this.faceNormals[otherFace]);
            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);

            planeNormalWS.copy(localPlaneNormal);
            quatA.vmult(planeNormalWS,planeNormalWS);
            //posA.vadd(planeNormalWS,planeNormalWS);
            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);
        } else  {
            planeNormalWS.copy(planeNormalWS1);
            planeEqWS = planeEqWS1;
        }

        // Clip face against our constructed plane
        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);

        // Throw away all clipped points, but save the reamining until next clip
        while(pVtxIn.length){
            pVtxIn.shift();
        }
        while(pVtxOut.length){
            pVtxIn.push(pVtxOut.shift());
        }
    }

    //console.log("Resulting points after clip:",pVtxIn);

    // only keep contact points that are behind the witness face
    localPlaneNormal.copy(this.faceNormals[closestFaceA]);

    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);
    planeNormalWS.copy(localPlaneNormal);
    quatA.vmult(planeNormalWS,planeNormalWS);

    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);
    for (var i=0; i<pVtxIn.length; i++){
        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???
        /*console.log("depth calc from normal=",planeNormalWS.toString()," and constant "+planeEqWS+" and vertex ",pVtxIn[i].toString()," gives "+depth);*/
        if (depth <=minDist){
            console.log("clamped: depth="+depth+" to minDist="+(minDist+""));
            depth = minDist;
        }

        if (depth <=maxDist){
            var point = pVtxIn[i];
            if(depth<=0){
                /*console.log("Got contact point ",point.toString(),
                  ", depth=",depth,
                  "contact normal=",separatingNormal.toString(),
                  "plane",planeNormalWS.toString(),
                  "planeConstant",planeEqWS);*/
                var p = {
                    point:point,
                    normal:planeNormalWS,
                    depth: depth,
                };
                result.push(p);
            }
        }
    }
};

/**
 * Clip a face in a hull against the back of a plane.
 * @method clipFaceAgainstPlane
 * @param {Array} inVertices
 * @param {Array} outVertices
 * @param {Vec3} planeNormal
 * @param {Number} planeConstant The constant in the mathematical plane equation
 */
ConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){
    if(!(planeNormal instanceof Vec3)){
        throw new Error("planeNormal must be Vec3, "+planeNormal+" given");
    }
    if(!(inVertices instanceof Array)) {
        throw new Error("invertices must be Array, "+inVertices+" given");
    }
    if(!(outVertices instanceof Array)){
        throw new Error("outvertices must be Array, "+outVertices+" given");
    }
    var n_dot_first, n_dot_last;
    var numVerts = inVertices.length;

    if(numVerts < 2){
        return outVertices;
    }

    var firstVertex = inVertices[inVertices.length-1],
        lastVertex =   inVertices[0];

    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;

    for(var vi = 0; vi < numVerts; vi++){
        lastVertex = inVertices[vi];
        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;
        if(n_dot_first < 0){
            if(n_dot_last < 0){
                // Start < 0, end < 0, so output lastVertex
                var newv = new Vec3();
                newv.copy(lastVertex);
                outVertices.push(newv);
            } else {
                // Start < 0, end >= 0, so output intersection
                var newv = new Vec3();
                firstVertex.lerp(lastVertex,
                                 n_dot_first / (n_dot_first - n_dot_last),
                                 newv);
                outVertices.push(newv);
            }
        } else {
            if(n_dot_last<0){
                // Start >= 0, end < 0 so output intersection and end
                var newv = new Vec3();
                firstVertex.lerp(lastVertex,
                                 n_dot_first / (n_dot_first - n_dot_last),
                                 newv);
                outVertices.push(newv);
                outVertices.push(lastVertex);
            }
        }
        firstVertex = lastVertex;
        n_dot_first = n_dot_last;
    }
    return outVertices;
};

// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.
ConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){
    var N = this.vertices.length;
    while(this.worldVertices.length < N){
        this.worldVertices.push( new Vec3() );
    }

    var verts = this.vertices,
        worldVerts = this.worldVertices;
    for(var i=0; i!==N; i++){
        quat.vmult( verts[i] , worldVerts[i] );
        position.vadd( worldVerts[i] , worldVerts[i] );
    }

    this.worldVerticesNeedsUpdate = false;
};

var computeLocalAABB_worldVert = new Vec3();
ConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){
    var n = this.vertices.length,
        vertices = this.vertices,
        worldVert = computeLocalAABB_worldVert;

    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);

    for(var i=0; i<n; i++){
        var v = vertices[i];
        if     (v.x < aabbmin.x){
            aabbmin.x = v.x;
        } else if(v.x > aabbmax.x){
            aabbmax.x = v.x;
        }
        if     (v.y < aabbmin.y){
            aabbmin.y = v.y;
        } else if(v.y > aabbmax.y){
            aabbmax.y = v.y;
        }
        if     (v.z < aabbmin.z){
            aabbmin.z = v.z;
        } else if(v.z > aabbmax.z){
            aabbmax.z = v.z;
        }
    }
};

/**
 * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.
 * @method computeWorldFaceNormals
 * @param  {Quaternion} quat
 */
ConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){
    var N = this.faceNormals.length;
    while(this.worldFaceNormals.length < N){
        this.worldFaceNormals.push( new Vec3() );
    }

    var normals = this.faceNormals,
        worldNormals = this.worldFaceNormals;
    for(var i=0; i!==N; i++){
        quat.vmult( normals[i] , worldNormals[i] );
    }

    this.worldFaceNormalsNeedsUpdate = false;
};

/**
 * @method updateBoundingSphereRadius
 */
ConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){
    // Assume points are distributed with local (0,0,0) as center
    var max2 = 0;
    var verts = this.vertices;
    for(var i=0, N=verts.length; i!==N; i++) {
        var norm2 = verts[i].norm2();
        if(norm2 > max2){
            max2 = norm2;
        }
    }
    this.boundingSphereRadius = Math.sqrt(max2);
};

var tempWorldVertex = new Vec3();

/**
 * @method calculateWorldAABB
 * @param {Vec3}        pos
 * @param {Quaternion}  quat
 * @param {Vec3}        min
 * @param {Vec3}        max
 */
ConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){
    var n = this.vertices.length, verts = this.vertices;
    var minx,miny,minz,maxx,maxy,maxz;
    for(var i=0; i<n; i++){
        tempWorldVertex.copy(verts[i]);
        quat.vmult(tempWorldVertex,tempWorldVertex);
        pos.vadd(tempWorldVertex,tempWorldVertex);
        var v = tempWorldVertex;
        if     (v.x < minx || minx===undefined){
            minx = v.x;
        } else if(v.x > maxx || maxx===undefined){
            maxx = v.x;
        }

        if     (v.y < miny || miny===undefined){
            miny = v.y;
        } else if(v.y > maxy || maxy===undefined){
            maxy = v.y;
        }

        if     (v.z < minz || minz===undefined){
            minz = v.z;
        } else if(v.z > maxz || maxz===undefined){
            maxz = v.z;
        }
    }
    min.set(minx,miny,minz);
    max.set(maxx,maxy,maxz);
};

/**
 * Get approximate convex volume
 * @method volume
 * @return {Number}
 */
ConvexPolyhedron.prototype.volume = function(){
    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
};

/**
 * Get an average of all the vertices positions
 * @method getAveragePointLocal
 * @param  {Vec3} target
 * @return {Vec3}
 */
ConvexPolyhedron.prototype.getAveragePointLocal = function(target){
    target = target || new Vec3();
    var n = this.vertices.length,
        verts = this.vertices;
    for(var i=0; i<n; i++){
        target.vadd(verts[i],target);
    }
    target.mult(1/n,target);
    return target;
};

/**
 * Transform all local points. Will change the .vertices
 * @method transformAllPoints
 * @param  {Vec3} offset
 * @param  {Quaternion} quat
 */
ConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){
    var n = this.vertices.length,
        verts = this.vertices;

    // Apply rotation
    if(quat){
        // Rotate vertices
        for(var i=0; i<n; i++){
            var v = verts[i];
            quat.vmult(v,v);
        }
        // Rotate face normals
        for(var i=0; i<this.faceNormals.length; i++){
            var v = this.faceNormals[i];
            quat.vmult(v,v);
        }
        /*
        // Rotate edges
        for(var i=0; i<this.uniqueEdges.length; i++){
            var v = this.uniqueEdges[i];
            quat.vmult(v,v);
        }*/
    }

    // Apply offset
    if(offset){
        for(var i=0; i<n; i++){
            var v = verts[i];
            v.vadd(offset,v);
        }
    }
};

/**
 * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.
 * @method pointIsInside
 * @param  {Vec3} p      A point given in local coordinates
 * @return {Boolean}
 */
var ConvexPolyhedron_pointIsInside = new Vec3();
var ConvexPolyhedron_vToP = new Vec3();
var ConvexPolyhedron_vToPointInside = new Vec3();
ConvexPolyhedron.prototype.pointIsInside = function(p){
    var n = this.vertices.length,
        verts = this.vertices,
        faces = this.faces,
        normals = this.faceNormals;
    var positiveResult = null;
    var N = this.faces.length;
    var pointInside = ConvexPolyhedron_pointIsInside;
    this.getAveragePointLocal(pointInside);
    for(var i=0; i<N; i++){
        var numVertices = this.faces[i].length;
        var n = normals[i];
        var v = verts[faces[i][0]]; // We only need one point in the face

        // This dot product determines which side of the edge the point is
        var vToP = ConvexPolyhedron_vToP;
        p.vsub(v,vToP);
        var r1 = n.dot(vToP);

        var vToPointInside = ConvexPolyhedron_vToPointInside;
        pointInside.vsub(v,vToPointInside);
        var r2 = n.dot(vToPointInside);

        if((r1<0 && r2>0) || (r1>0 && r2<0)){
            return false; // Encountered some other sign. Exit.
        } else {
        }
    }

    // If we got here, all dot products were of the same sign.
    return positiveResult ? 1 : -1;
};

/**
 * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.
 * @static
 * @method project
 * @param {ConvexPolyhedron} hull
 * @param {Vec3} axis
 * @param {Vec3} pos
 * @param {Quaternion} quat
 * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.
 */
var project_worldVertex = new Vec3();
var project_localAxis = new Vec3();
var project_localOrigin = new Vec3();
ConvexPolyhedron.project = function(hull, axis, pos, quat, result){
    var n = hull.vertices.length,
        worldVertex = project_worldVertex,
        localAxis = project_localAxis,
        max = 0,
        min = 0,
        localOrigin = project_localOrigin,
        vs = hull.vertices;

    localOrigin.setZero();

    // Transform the axis to local
    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);
    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);
    var add = localOrigin.dot(localAxis);

    min = max = vs[0].dot(localAxis);

    for(var i = 1; i < n; i++){
        var val = vs[i].dot(localAxis);

        if(val > max){
            max = val;
        }

        if(val < min){
            min = val;
        }
    }

    min -= add;
    max -= add;

    if(min > max){
        // Inconsistent - swap
        var temp = min;
        min = max;
        max = temp;
    }
    // Output
    result[0] = max;
    result[1] = min;
};

},{"../math/Quaternion":25,"../math/Transform":26,"../math/Vec3":27,"./Shape":40}],36:[function(_dereq_,module,exports){
module.exports = Cylinder;

var Shape = _dereq_('./Shape');
var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var ConvexPolyhedron = _dereq_('./ConvexPolyhedron');

/**
 * @class Cylinder
 * @constructor
 * @extends ConvexPolyhedron
 * @author schteppe / https://github.com/schteppe
 * @param {Number} radiusTop
 * @param {Number} radiusBottom
 * @param {Number} height
 * @param {Number} numSegments The number of segments to build the cylinder out of
 */
function Cylinder( radiusTop, radiusBottom, height , numSegments ) {
    var N = numSegments,
        verts = [],
        normals = [],
        faces = [],
        bottomface = [],
        topface = [],
        cos = Math.cos,
        sin = Math.sin;

    // First bottom point
    verts.push(new Vec3(radiusBottom*cos(0),
                               radiusBottom*sin(0),
                               -height*0.5));
    bottomface.push(0);

    // First top point
    verts.push(new Vec3(radiusTop*cos(0),
                               radiusTop*sin(0),
                               height*0.5));
    topface.push(1);

    for(var i=0; i<N; i++){
        var theta = 2*Math.PI/N * (i+1);
        var thetaN = 2*Math.PI/N * (i+0.5);
        if(i<N-1){
            // Bottom
            verts.push(new Vec3(radiusBottom*cos(theta),
                                       radiusBottom*sin(theta),
                                       -height*0.5));
            bottomface.push(2*i+2);
            // Top
            verts.push(new Vec3(radiusTop*cos(theta),
                                       radiusTop*sin(theta),
                                       height*0.5));
            topface.push(2*i+3);
            // Normal
            normals.push(new Vec3(cos(thetaN),
                                         sin(thetaN),
                                         0));
            // Face
            faces.push([2*i+2, 2*i+3, 2*i+1,2*i]);
        } else {
            faces.push([0,1, 2*i+1, 2*i]); // Connect
            // Normal
            normals.push(new Vec3(cos(thetaN),sin(thetaN),0));
        }
    }
    faces.push(topface);
    normals.push(new Vec3(0,0,1));

    // Reorder bottom face
    var temp = [];
    for(var i=0; i<bottomface.length; i++){
        temp.push(bottomface[bottomface.length - i - 1]);
    }
    faces.push(temp);
    normals.push(new Vec3(0,0,-1));

    this.type = Shape.types.CONVEXPOLYHEDRON;
    ConvexPolyhedron.call( this, verts, faces, normals );
}

Cylinder.prototype = new ConvexPolyhedron();

},{"../math/Quaternion":25,"../math/Vec3":27,"./ConvexPolyhedron":35,"./Shape":40}],37:[function(_dereq_,module,exports){
var Shape = _dereq_('./Shape');
var ConvexPolyhedron = _dereq_('./ConvexPolyhedron');
var Vec3 = _dereq_('../math/Vec3');
var Utils = _dereq_('../utils/Utils');

module.exports = Heightfield;

/**
 * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.
 * @class Heightfield
 * @extends Shape
 * @constructor
 * @param {Array} data An array of Y values that will be used to construct the terrain.
 * @param {object} options
 * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.
 * @param {Number} [options.maxValue] Maximum value.
 * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.
 * @todo Should be possible to use along all axes, not just y
 *
 * @example
 *     // Generate some height data (y-values).
 *     var data = [];
 *     for(var i = 0; i < 1000; i++){
 *         var y = 0.5 * Math.cos(0.2 * i);
 *         data.push(y);
 *     }
 *
 *     // Create the heightfield shape
 *     var heightfieldShape = new Heightfield(data, {
 *         elementSize: 1 // Distance between the data points in X and Y directions
 *     });
 *     var heightfieldBody = new Body();
 *     heightfieldBody.addShape(heightfieldShape);
 *     world.addBody(heightfieldBody);
 */
function Heightfield(data, options){
    options = Utils.defaults(options, {
        maxValue : null,
        minValue : null,
        elementSize : 1
    });

    /**
     * An array of numbers, or height values, that are spread out along the x axis.
     * @property {array} data
     */
    this.data = data;

    /**
     * Max value of the data
     * @property {number} maxValue
     */
    this.maxValue = options.maxValue;

    /**
     * Max value of the data
     * @property {number} minValue
     */
    this.minValue = options.minValue;

    /**
     * The width of each element
     * @property {number} elementSize
     * @todo elementSizeX and Y
     */
    this.elementSize = options.elementSize;

    if(options.minValue === null){
        this.updateMinValue();
    }
    if(options.maxValue === null){
        this.updateMaxValue();
    }

    this.cacheEnabled = true;

    Shape.call(this);

    this.pillarConvex = new ConvexPolyhedron();
    this.pillarOffset = new Vec3();

    this.type = Shape.types.HEIGHTFIELD;
    this.updateBoundingSphereRadius();

    // "i_j_isUpper" => { convex: ..., offset: ... }
    // for example:
    // _cachedPillars["0_2_1"]
    this._cachedPillars = {};
}
Heightfield.prototype = new Shape();

/**
 * Call whenever you change the data array.
 * @method update
 */
Heightfield.prototype.update = function(){
    this._cachedPillars = {};
};

/**
 * @method updateMinValue
 * Update the .minValue property
 */
Heightfield.prototype.updateMinValue = function(){
    var data = this.data;
    var minValue = data[0][0];
    for(var i=0; i !== data.length; i++){
        for(var j=0; j !== data[i].length; j++){
            var v = data[i][j];
            if(v < minValue){
                minValue = v;
            }
        }
    }
    this.minValue = minValue;
};

/**
 * Update the .maxValue property
 * @method updateMaxValue
 */
Heightfield.prototype.updateMaxValue = function(){
    var data = this.data;
    var maxValue = data[0][0];
    for(var i=0; i !== data.length; i++){
        for(var j=0; j !== data[i].length; j++){
            var v = data[i][j];
            if(v > maxValue){
                maxValue = v;
            }
        }
    }
    this.maxValue = maxValue;
};

/**
 * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.
 * @method setHeightValueAtIndex
 * @param {integer} xi
 * @param {integer} yi
 * @param {number} value
 */
Heightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){
    var data = this.data;
    data[xi][yi] = value;

    // Invalidate cache
    this.clearCachedConvexTrianglePillar(xi, yi, false);
    if(xi > 0){
        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);
        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);
    }
    if(yi > 0){
        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);
        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);
    }
    if(yi > 0 && xi > 0){
        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);
    }
};

/**
 * Get max/min in a rectangle in the matrix data
 * @method getRectMinMax
 * @param  {integer} iMinX
 * @param  {integer} iMinY
 * @param  {integer} iMaxX
 * @param  {integer} iMaxY
 * @param  {array} [result] An array to store the results in.
 * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.
 */
Heightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {
    result = result || [];

    // Get max and min of the data
    var data = this.data,
        max = this.minValue; // Set first value
    for(var i = iMinX; i < iMaxX; i++){
        for(var j = iMinY; j < iMaxY; j++){
            var height = data[i][j];
            if(height > max){
                max = height;
            }
        }
    }

    result[0] = this.minValue;
    result[1] = max;
};

/**
 * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.
 * @method getIndexOfPosition
 * @param  {number} x
 * @param  {number} y
 * @param  {array} result Two-element array
 * @param  {boolean} clamp If the position should be clamped to the heightfield edge.
 * @return {boolean}
 */
Heightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {

    // Get the index of the data points to test against
    var w = this.elementSize;
    var data = this.data;
    var xi = Math.floor(x / w);
    var yi = Math.floor(y / w);

    result[0] = xi;
    result[1] = yi;

    if(clamp){
        // Clamp index to edges
        if(xi < 0){ xi = 0; }
        if(yi < 0){ yi = 0; }
        if(xi >= data.length - 1){ xi = data.length - 1; }
        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }
    }

    // Bail out if we are out of the terrain
    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){
        return false;
    }

    return true;
};

Heightfield.prototype.getHeightAt = function(x, y, edgeClamp){
    var idx = [];
    this.getIndexOfPosition(x, y, idx, edgeClamp);

    // TODO: do it better
    var minmax = [];
    this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);

    return (minmax[0] + minmax[1]) / 2; // average
};

Heightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){
    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);
};

Heightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){
    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
};

Heightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){
    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {
        convex: convex,
        offset: offset
    };
};

Heightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){
    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
};

/**
 * Get a triangle in the terrain in the form of a triangular convex shape.
 * @method getConvexTrianglePillar
 * @param  {integer} i
 * @param  {integer} j
 * @param  {boolean} getUpperTriangle
 */
Heightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){
    var result = this.pillarConvex;
    var offsetResult = this.pillarOffset;

    if(this.cacheEnabled){
        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);
        if(data){
            this.pillarConvex = data.convex;
            this.pillarOffset = data.offset;
            return;
        }

        result = new ConvexPolyhedron();
        offsetResult = new Vec3();

        this.pillarConvex = result;
        this.pillarOffset = offsetResult;
    }

    var data = this.data;
    var elementSize = this.elementSize;
    var faces = result.faces;

    // Reuse verts if possible
    result.vertices.length = 6;
    for (var i = 0; i < 6; i++) {
        if(!result.vertices[i]){
            result.vertices[i] = new Vec3();
        }
    }

    // Reuse faces if possible
    faces.length = 5;
    for (var i = 0; i < 5; i++) {
        if(!faces[i]){
            faces[i] = [];
        }
    }

    var verts = result.vertices;

    var h = (Math.min(
        data[xi][yi],
        data[xi+1][yi],
        data[xi][yi+1],
        data[xi+1][yi+1]
    ) - this.minValue ) / 2 + this.minValue;

    if (!getUpperTriangle) {

        // Center of the triangle pillar - all polygons are given relative to this one
        offsetResult.set(
            (xi + 0.25) * elementSize, // sort of center of a triangle
            (yi + 0.25) * elementSize,
            h // vertical center
        );

        // Top triangle verts
        verts[0].set(
            -0.25 * elementSize,
            -0.25 * elementSize,
            data[xi][yi] - h
        );
        verts[1].set(
            0.75 * elementSize,
            -0.25 * elementSize,
            data[xi + 1][yi] - h
        );
        verts[2].set(
            -0.25 * elementSize,
            0.75 * elementSize,
            data[xi][yi + 1] - h
        );

        // bottom triangle verts
        verts[3].set(
            -0.25 * elementSize,
            -0.25 * elementSize,
            -h-1
        );
        verts[4].set(
            0.75 * elementSize,
            -0.25 * elementSize,
            -h-1
        );
        verts[5].set(
            -0.25 * elementSize,
            0.75  * elementSize,
            -h-1
        );

        // top triangle
        faces[0][0] = 0;
        faces[0][1] = 1;
        faces[0][2] = 2;

        // bottom triangle
        faces[1][0] = 5;
        faces[1][1] = 4;
        faces[1][2] = 3;

        // -x facing quad
        faces[2][0] = 0;
        faces[2][1] = 2;
        faces[2][2] = 5;
        faces[2][3] = 3;

        // -y facing quad
        faces[3][0] = 1;
        faces[3][1] = 0;
        faces[3][2] = 3;
        faces[3][3] = 4;

        // +xy facing quad
        faces[4][0] = 4;
        faces[4][1] = 5;
        faces[4][2] = 2;
        faces[4][3] = 1;


    } else {

        // Center of the triangle pillar - all polygons are given relative to this one
        offsetResult.set(
            (xi + 0.75) * elementSize, // sort of center of a triangle
            (yi + 0.75) * elementSize,
            h // vertical center
        );

        // Top triangle verts
        verts[0].set(
            0.25 * elementSize,
            0.25 * elementSize,
            data[xi + 1][yi + 1] - h
        );
        verts[1].set(
            -0.75 * elementSize,
            0.25 * elementSize,
            data[xi][yi + 1] - h
        );
        verts[2].set(
            0.25 * elementSize,
            -0.75 * elementSize,
            data[xi + 1][yi] - h
        );

        // bottom triangle verts
        verts[3].set(
            0.25 * elementSize,
            0.25 * elementSize,
            - h-1
        );
        verts[4].set(
            -0.75 * elementSize,
            0.25 * elementSize,
            - h-1
        );
        verts[5].set(
            0.25 * elementSize,
            -0.75 * elementSize,
            - h-1
        );

        // Top triangle
        faces[0][0] = 0;
        faces[0][1] = 1;
        faces[0][2] = 2;

        // bottom triangle
        faces[1][0] = 5;
        faces[1][1] = 4;
        faces[1][2] = 3;

        // +x facing quad
        faces[2][0] = 2;
        faces[2][1] = 5;
        faces[2][2] = 3;
        faces[2][3] = 0;

        // +y facing quad
        faces[3][0] = 3;
        faces[3][1] = 4;
        faces[3][2] = 1;
        faces[3][3] = 0;

        // -xy facing quad
        faces[4][0] = 1;
        faces[4][1] = 4;
        faces[4][2] = 5;
        faces[4][3] = 2;
    }

    result.computeNormals();
    result.computeEdges();
    result.updateBoundingSphereRadius();

    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);
};

Heightfield.prototype.calculateLocalInertia = function(mass, target){
    target = target || new Vec3();
    target.set(0, 0, 0);
    return target;
};

Heightfield.prototype.volume = function(){
    return Number.MAX_VALUE; // The terrain is infinite
};

Heightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){
    // TODO: do it properly
    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
};

Heightfield.prototype.updateBoundingSphereRadius = function(){
    // Use the bounding box of the min/max values
    var data = this.data,
        s = this.elementSize;
    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();
};
},{"../math/Vec3":27,"../utils/Utils":48,"./ConvexPolyhedron":35,"./Shape":40}],38:[function(_dereq_,module,exports){
module.exports = Particle;

var Shape = _dereq_('./Shape');
var Vec3 = _dereq_('../math/Vec3');

/**
 * Particle shape.
 * @class Particle
 * @constructor
 * @author schteppe
 * @extends Shape
 */
function Particle(){
    Shape.call(this);

    this.type = Shape.types.PARTICLE;
}
Particle.prototype = new Shape();
Particle.prototype.constructor = Particle;

/**
 * @method calculateLocalInertia
 * @param  {Number} mass
 * @param  {Vec3} target
 * @return {Vec3}
 */
Particle.prototype.calculateLocalInertia = function(mass,target){
    target = target || new Vec3();
    target.set(0, 0, 0);
    return target;
};

Particle.prototype.volume = function(){
    return 0;
};

Particle.prototype.updateBoundingSphereRadius = function(){
    this.boundingSphereRadius = 0;
};

Particle.prototype.calculateWorldAABB = function(pos,quat,min,max){
    // Get each axis max
    min.copy(pos);
    max.copy(pos);
};

},{"../math/Vec3":27,"./Shape":40}],39:[function(_dereq_,module,exports){
module.exports = Plane;

var Shape = _dereq_('./Shape');
var Vec3 = _dereq_('../math/Vec3');

/**
 * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.
 * @class Plane
 * @constructor
 * @extends Shape
 * @author schteppe
 */
function Plane(){
    Shape.call(this);
    this.type = Shape.types.PLANE;

    // World oriented normal
    this.worldNormal = new Vec3();
    this.worldNormalNeedsUpdate = true;

    this.boundingSphereRadius = Number.MAX_VALUE;
}
Plane.prototype = new Shape();
Plane.prototype.constructor = Plane;

Plane.prototype.computeWorldNormal = function(quat){
    var n = this.worldNormal;
    n.set(0,0,1);
    quat.vmult(n,n);
    this.worldNormalNeedsUpdate = false;
};

Plane.prototype.calculateLocalInertia = function(mass,target){
    target = target || new Vec3();
    return target;
};

Plane.prototype.volume = function(){
    return Number.MAX_VALUE; // The plane is infinite...
};

var tempNormal = new Vec3();
Plane.prototype.calculateWorldAABB = function(pos, quat, min, max){
    // The plane AABB is infinite, except if the normal is pointing along any axis
    tempNormal.set(0,0,1); // Default plane normal is z
    quat.vmult(tempNormal,tempNormal);
    var maxVal = Number.MAX_VALUE;
    min.set(-maxVal, -maxVal, -maxVal);
    max.set(maxVal, maxVal, maxVal);

    if(tempNormal.x === 1){ max.x = pos.x; }
    if(tempNormal.y === 1){ max.y = pos.y; }
    if(tempNormal.z === 1){ max.z = pos.z; }

    if(tempNormal.x === -1){ min.x = pos.x; }
    if(tempNormal.y === -1){ min.y = pos.y; }
    if(tempNormal.z === -1){ min.z = pos.z; }
};

Plane.prototype.updateBoundingSphereRadius = function(){
    this.boundingSphereRadius = Number.MAX_VALUE;
};
},{"../math/Vec3":27,"./Shape":40}],40:[function(_dereq_,module,exports){
module.exports = Shape;

var Shape = _dereq_('./Shape');
var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var Material = _dereq_('../material/Material');

/**
 * Base class for shapes
 * @class Shape
 * @constructor
 * @author schteppe
 * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time
 */
function Shape(){

    /**
     * The type of this shape. Must be set to an int > 0 by subclasses.
     * @property type
     * @type {Number}
     * @see Shape.types
     */
    this.type = 0;

    /**
     * The local bounding sphere radius of this shape.
     * @property {Number} boundingSphereRadius
     */
    this.boundingSphereRadius = 0;

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.
     * @property {boolean} collisionResponse
     */
    this.collisionResponse = true;
}
Shape.prototype.constructor = Shape;

/**
 * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius
 * @method updateBoundingSphereRadius
 * @return {Number}
 */
Shape.prototype.updateBoundingSphereRadius = function(){
    throw "computeBoundingSphereRadius() not implemented for shape type "+this.type;
};

/**
 * Get the volume of this shape
 * @method volume
 * @return {Number}
 */
Shape.prototype.volume = function(){
    throw "volume() not implemented for shape type "+this.type;
};

/**
 * Calculates the inertia in the local frame for this shape.
 * @method calculateLocalInertia
 * @return {Vec3}
 * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia
 */
Shape.prototype.calculateLocalInertia = function(mass,target){
    throw "calculateLocalInertia() not implemented for shape type "+this.type;
};

/**
 * The available shape types.
 * @static
 * @property types
 * @type {Object}
 */
Shape.types = {
    SPHERE:1,
    PLANE:2,
    BOX:4,
    COMPOUND:8,
    CONVEXPOLYHEDRON:16,
    HEIGHTFIELD:32,
    PARTICLE:64,
    CYLINDER:128
};


},{"../material/Material":22,"../math/Quaternion":25,"../math/Vec3":27,"./Shape":40}],41:[function(_dereq_,module,exports){
module.exports = Sphere;

var Shape = _dereq_('./Shape');
var Vec3 = _dereq_('../math/Vec3');

/**
 * Spherical shape
 * @class Sphere
 * @constructor
 * @extends Shape
 * @param {Number} radius
 * @author schteppe / http://github.com/schteppe
 */
function Sphere(radius){
    Shape.call(this);

    /**
     * @property {Number} radius
     */
    this.radius = radius!==undefined ? Number(radius) : 1.0;
    this.type = Shape.types.SPHERE;

    this.updateBoundingSphereRadius();
}
Sphere.prototype = new Shape();
Sphere.prototype.constructor = Sphere;

Sphere.prototype.calculateLocalInertia = function(mass,target){
    target = target || new Vec3();
    var I = 2.0*mass*this.radius*this.radius/5.0;
    target.x = I;
    target.y = I;
    target.z = I;
    return target;
};

Sphere.prototype.volume = function(){
    return 4.0 * Math.PI * this.radius / 3.0;
};

Sphere.prototype.updateBoundingSphereRadius = function(){
    this.boundingSphereRadius = this.radius;
};

Sphere.prototype.calculateWorldAABB = function(pos,quat,min,max){
    var r = this.radius;
    var axes = ['x','y','z'];
    for(var i=0; i<axes.length; i++){
        var ax = axes[i];
        min[ax] = pos[ax] - r;
        max[ax] = pos[ax] + r;
    }
};

},{"../math/Vec3":27,"./Shape":40}],42:[function(_dereq_,module,exports){
module.exports = GSSolver;

var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var Solver = _dereq_('./Solver');

/**
 * Constraint equation Gauss-Seidel solver.
 * @class GSSolver
 * @constructor
 * @todo The spook parameters should be specified for each constraint, not globally.
 * @author schteppe / https://github.com/schteppe
 * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf
 * @extends Solver
 */
function GSSolver(){
    Solver.call(this);

    /**
     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.
     * @property iterations
     * @type {Number}
     * @todo write more about solver and iterations in the wiki
     */
    this.iterations = 10;

    /**
     * When tolerance is reached, the system is assumed to be converged.
     * @property tolerance
     * @type {Number}
     */
    this.tolerance = 0;
}
GSSolver.prototype = new Solver();

var GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.
var GSSolver_solve_invCs = [];
var GSSolver_solve_Bs = [];
GSSolver.prototype.solve = function(dt,world){
    var iter = 0,
        maxIter = this.iterations,
        tolSquared = this.tolerance*this.tolerance,
        equations = this.equations,
        Neq = equations.length,
        bodies = world.bodies,
        Nbodies = bodies.length,
        h = dt,
        q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;

    // Update solve mass
    if(Neq !== 0){
        for(var i=0; i!==Nbodies; i++){
            bodies[i].updateSolveMassProperties();
        }
    }

    // Things that does not change during iteration can be computed once
    var invCs = GSSolver_solve_invCs,
        Bs = GSSolver_solve_Bs,
        lambda = GSSolver_solve_lambda;
    invCs.length = Neq;
    Bs.length = Neq;
    lambda.length = Neq;
    for(var i=0; i!==Neq; i++){
        var c = equations[i];
        lambda[i] = 0.0;
        Bs[i] = c.computeB(h);
        invCs[i] = 1.0 / c.computeC();
    }

    if(Neq !== 0){

        // Reset vlambda
        for(var i=0; i!==Nbodies; i++){
            var b=bodies[i],
                vlambda=b.vlambda,
                wlambda=b.wlambda;
            vlambda.set(0,0,0);
            if(wlambda){
                wlambda.set(0,0,0);
            }
        }

        // Iterate over equations
        for(iter=0; iter!==maxIter; iter++){

            // Accumulate the total error for each iteration.
            deltalambdaTot = 0.0;

            for(var j=0; j!==Neq; j++){

                var c = equations[j];

                // Compute iteration
                B = Bs[j];
                invC = invCs[j];
                lambdaj = lambda[j];
                GWlambda = c.computeGWlambda();
                deltalambda = invC * ( B - GWlambda - c.eps * lambdaj );

                // Clamp if we are not within the min/max interval
                if(lambdaj + deltalambda < c.minForce){
                    deltalambda = c.minForce - lambdaj;
                } else if(lambdaj + deltalambda > c.maxForce){
                    deltalambda = c.maxForce - lambdaj;
                }
                lambda[j] += deltalambda;

                deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)

                c.addToWlambda(deltalambda);
            }

            // If the total error is small enough - stop iterate
            if(deltalambdaTot*deltalambdaTot < tolSquared){
                break;
            }
        }

        // Add result to velocity
        for(var i=0; i!==Nbodies; i++){
            var b=bodies[i],
                v=b.velocity,
                w=b.angularVelocity;
            v.vadd(b.vlambda, v);
            if(w){
                w.vadd(b.wlambda, w);
            }
        }
    }

    return iter;
};

},{"../math/Quaternion":25,"../math/Vec3":27,"./Solver":43}],43:[function(_dereq_,module,exports){
module.exports = Solver;

/**
 * Constraint equation solver base class.
 * @class Solver
 * @constructor
 * @author schteppe / https://github.com/schteppe
 */
function Solver(){
    /**
     * All equations to be solved
     * @property {Array} equations
     */
    this.equations = [];
}

/**
 * Should be implemented in subclasses!
 * @method solve
 * @param  {Number} dt
 * @param  {World} world
 */
Solver.prototype.solve = function(dt,world){
    // Should return the number of iterations done!
    return 0;
};

/**
 * Add an equation
 * @method addEquation
 * @param {Equation} eq
 */
Solver.prototype.addEquation = function(eq){
    if (eq.enabled) {
        this.equations.push(eq);
    }
};

/**
 * Remove an equation
 * @method removeEquation
 * @param {Equation} eq
 */
Solver.prototype.removeEquation = function(eq){
    var eqs = this.equations;
    var i = eqs.indexOf(eq);
    if(i !== -1){
        eqs.splice(i,1);
    }
};

/**
 * Add all equations
 * @method removeAllEquations
 */
Solver.prototype.removeAllEquations = function(){
    this.equations.length = 0;
};


},{}],44:[function(_dereq_,module,exports){
module.exports = SplitSolver;

var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var Solver = _dereq_('./Solver');
var Body = _dereq_('../objects/Body');

/**
 * Splits the equations into islands and solves them independently. Can improve performance.
 * @class SplitSolver
 * @constructor
 * @extends Solver
 * @param {Solver} subsolver
 */
function SplitSolver(subsolver){
    Solver.call(this);
    this.subsolver = subsolver;
}
SplitSolver.prototype = new Solver();

// Returns the number of subsystems
var SplitSolver_solve_nodes = []; // All allocated node objects
var SplitSolver_solve_eqs = [];   // Temp array
var SplitSolver_solve_bds = [];   // Temp array
var SplitSolver_solve_dummyWorld = {bodies:null}; // Temp object

/**
 * Solve the subsystems
 * @method solve
 * @param  {Number} dt
 * @param  {World} world
 */
SplitSolver.prototype.solve = function(dt,world){
    var nodes=SplitSolver_solve_nodes,
        bodies=world.bodies,
        equations=this.equations,
        Neq=equations.length,
        Nbodies=bodies.length,
        subsolver=this.subsolver;
    // Create needed nodes, reuse if possible
    if(nodes.length>Nbodies){
        nodes.length = Nbodies;
    }
    while(nodes.length<Nbodies){
        nodes.push({ body:null, children:[], eqs:[], visited:false });
    }

    // Reset node values
    for(var i=0; i!==Nbodies; i++){
        var node = nodes[i];
        node.body = bodies[i];
        node.children.length = 0;
        node.eqs.length = 0;
        node.visited = false;
    }
    for(var k=0; k!==Neq; k++){
        var eq=equations[k],
            i=bodies.indexOf(eq.bi),
            j=bodies.indexOf(eq.bj),
            ni=nodes[i],
            nj=nodes[j];
        ni.children.push(nj);
        ni.eqs.push(eq);
        nj.children.push(ni);
        nj.eqs.push(eq);
    }

    var STATIC = Body.STATIC;
    function getUnvisitedNode(nodes){
        var Nnodes = nodes.length;
        for(var i=0; i!==Nnodes; i++){
            var node = nodes[i];
            if(!node.visited && !(node.body.type & STATIC)){
                return node;
            }
        }
        return false;
    }

    function bfs(root,visitFunc){
        var queue = [];
        queue.push(root);
        root.visited = true;
        visitFunc(root);
        while(queue.length) {
            var node = queue.pop();
            // Loop over unvisited child nodes
            var child;
            while((child = getUnvisitedNode(node.children))) {
                child.visited = true;
                visitFunc(child);
                queue.push(child);
            }
        }
    }

    var child, n=0, eqs=SplitSolver_solve_eqs, bds=SplitSolver_solve_bds;
    function visitFunc(node){
        bds.push(node.body);
        var Neqs = node.eqs.length;
        for(var i=0; i!==Neqs; i++){
            var eq = node.eqs[i];
            if(eqs.indexOf(eq) === -1){
                eqs.push(eq);
            }
        }
    }
    var dummyWorld = SplitSolver_solve_dummyWorld;
    while((child = getUnvisitedNode(nodes))){
        eqs.length = 0;
        bds.length = 0;
        bfs(child,visitFunc);

        var Neqs = eqs.length;
        for(var i=0; i!==Neqs; i++){
            subsolver.addEquation(eqs[i]);
        }

        dummyWorld.bodies = bds;
        var iter = subsolver.solve(dt,dummyWorld);
        subsolver.removeAllEquations();
        n++;
    }

    return n;
};

},{"../math/Quaternion":25,"../math/Vec3":27,"../objects/Body":28,"./Solver":43}],45:[function(_dereq_,module,exports){
/**
 * Base class for objects that dispatches events.
 * @class EventTarget
 * @constructor
 */
var EventTarget = function () {

};

module.exports = EventTarget;

EventTarget.prototype = {
    constructor: EventTarget,

    /**
     * Add an event listener
     * @method addEventListener
     * @param  {String} type
     * @param  {Function} listener
     * @return {EventTarget} The self object, for chainability.
     */
    addEventListener: function ( type, listener ) {
        if ( this._listeners === undefined ){ this._listeners = {}; }
        var listeners = this._listeners;
        if ( listeners[ type ] === undefined ) {
            listeners[ type ] = [];
        }
        if ( listeners[ type ].indexOf( listener ) === - 1 ) {
            listeners[ type ].push( listener );
        }
        return this;
    },

    /**
     * Check if an event listener is added
     * @method hasEventListener
     * @param  {String} type
     * @param  {Function} listener
     * @return {Boolean}
     */
    hasEventListener: function ( type, listener ) {
        if ( this._listeners === undefined ){ return false; }
        var listeners = this._listeners;
        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {
            return true;
        }
        return false;
    },

    /**
     * Remove an event listener
     * @method removeEventListener
     * @param  {String} type
     * @param  {Function} listener
     * @return {EventTarget} The self object, for chainability.
     */
    removeEventListener: function ( type, listener ) {
        if ( this._listeners === undefined ){ return this; }
        var listeners = this._listeners;
        if ( listeners[type] === undefined ){ return this; }
        var index = listeners[ type ].indexOf( listener );
        if ( index !== - 1 ) {
            listeners[ type ].splice( index, 1 );
        }
        return this;
    },

    /**
     * Emit an event.
     * @method dispatchEvent
     * @param  {Object} event
     * @param  {String} event.type
     * @return {EventTarget} The self object, for chainability.
     */
    dispatchEvent: function ( event ) {
        if ( this._listeners === undefined ){ return this; }
        var listeners = this._listeners;
        var listenerArray = listeners[ event.type ];
        if ( listenerArray !== undefined ) {
            event.target = this;
            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {
                listenerArray[ i ].call( this, event );
            }
        }
        return this;
    }
};

},{}],46:[function(_dereq_,module,exports){
module.exports = Pool;

/**
 * For pooling objects that can be reused.
 * @class Pool
 * @constructor
 */
function Pool(){
    /**
     * The pooled objects
     * @property {Array} objects
     */
    this.objects = [];

    /**
     * Constructor of the objects
     * @property {mixed} type
     */
    this.type = Object;
}

/**
 * Release an object after use
 * @method release
 * @param {Object} obj
 */
Pool.prototype.release = function(){
    var Nargs = arguments.length;
    for(var i=0; i!==Nargs; i++){
        this.objects.push(arguments[i]);
    }
};

/**
 * Get an object
 * @method get
 * @return {mixed}
 */
Pool.prototype.get = function(){
    if(this.objects.length===0){
        return this.constructObject();
    } else {
        return this.objects.pop();
    }
};

/**
 * Construct an object. Should be implmented in each subclass.
 * @method constructObject
 * @return {mixed}
 */
Pool.prototype.constructObject = function(){
    throw new Error("constructObject() not implemented in this Pool subclass yet!");
};

},{}],47:[function(_dereq_,module,exports){
module.exports = TupleDictionary;

/**
 * @class TupleDictionary
 * @constructor
 */
function TupleDictionary() {

    /**
     * The data storage
     * @property data
     * @type {Object}
     */
    this.data = { keys:[] };
}

/**
 * @method get
 * @param  {Number} i
 * @param  {Number} j
 * @return {Number}
 */
TupleDictionary.prototype.get = function(i, j) {
    if (i > j) {
        // swap
        var temp = j;
        j = i;
        i = temp;
    }
    return this.data[i+'-'+j];
};

/**
 * @method set
 * @param  {Number} i
 * @param  {Number} j
 * @param {Number} value
 */
TupleDictionary.prototype.set = function(i, j, value) {
    if (i > j) {
        var temp = j;
        j = i;
        i = temp;
    }
    var key = i+'-'+j;

    // Check if key already exists
    if(!this.get(i,j)){
        this.data.keys.push(key);
    }

    this.data[key] = value;
};

/**
 * @method reset
 */
TupleDictionary.prototype.reset = function() {
    var data = this.data,
        keys = data.keys;
    while(keys.length > 0){
        var key = keys.pop();
        delete data[key];
    }
};

},{}],48:[function(_dereq_,module,exports){
function Utils(){}

module.exports = Utils;

/**
 * Extend an options object with default values.
 * @static
 * @method defaults
 * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.
 * @param  {object} defaults An object containing default values.
 * @return {object} The modified options object.
 */
Utils.defaults = function(options, defaults){
    options = options || {};

    for(var key in defaults){
        if(!(key in options)){
            options[key] = defaults[key];
        }
    }

    return options;
};

},{}],49:[function(_dereq_,module,exports){
module.exports = Vec3Pool;

var Vec3 = _dereq_('../math/Vec3');
var Pool = _dereq_('./Pool');

/**
 * @class Vec3Pool
 * @constructor
 * @extends Pool
 */
function Vec3Pool(){
    Pool.call(this);
    this.type = Vec3;
}
Vec3Pool.prototype = new Pool();

/**
 * Construct a vector
 * @method constructObject
 * @return {Vec3}
 */
Vec3Pool.prototype.constructObject = function(){
    return new Vec3();
};

},{"../math/Vec3":27,"./Pool":46}],50:[function(_dereq_,module,exports){
module.exports = Narrowphase;

var Shape = _dereq_('../shapes/Shape');
var Vec3 = _dereq_('../math/Vec3');
var Transform = _dereq_('../math/Transform');
var ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');
var Quaternion = _dereq_('../math/Quaternion');
var Solver = _dereq_('../solver/Solver');
var Vec3Pool = _dereq_('../utils/Vec3Pool');
var ContactEquation = _dereq_('../equations/ContactEquation');

/**
 * Helper class for the World. Generates ContactEquations.
 * @class Narrowphase
 * @constructor
 * @todo Sphere-ConvexPolyhedron contacts
 * @todo Contact reduction
 * @todo  should move methods to prototype
 */
function Narrowphase(){

    /**
     * Internal storage of pooled contact points.
     * @property {Array} contactPointPool
     */
    this.contactPointPool = [];

    /**
     * Pooled vectors.
     * @property {Vec3Pool} v3pool
     */
    this.v3pool = new Vec3Pool();
}

/**
 * Make a contact object, by using the internal pool or creating a new one.
 * @method makeResult
 * @return {ContactEquation}
 */
Narrowphase.prototype.makeResult = function(bi, bj, si, sj, rsi, rsj){
    var c;
    if(this.contactPointPool.length){
        c = this.contactPointPool.pop();
        c.bi = bi;
        c.bj = bj;
    } else {
        c = new ContactEquation(bi, bj);
    }

    c.enabled = true;
    c.si = rsi || si;
    c.sj = rsj || sj;

    return c;
};

var tmpVec1 = new Vec3();
var tmpVec2 = new Vec3();
var tmpQuat1 = new Quaternion();
var tmpQuat2 = new Quaternion();

/**
 * Generate all contacts between a list of body pairs
 * @method getContacts
 * @param {array} p1 Array of body indices
 * @param {array} p2 Array of body indices
 * @param {World} world
 * @param {array} result Array to store generated contacts
 * @param {array} oldcontacts Optional. Array of reusable contact objects
 */
Narrowphase.prototype.getContacts = function(p1,p2,world,result,oldcontacts){
    // Save old contact objects
    this.contactPointPool = oldcontacts;

    var qi = tmpQuat1;
    var qj = tmpQuat2;
    var xi = tmpVec1;
    var xj = tmpVec2;

    for(var k=0, N=p1.length; k!==N; k++){

        // Get current collision bodies
        var bi = p1[k],
            bj = p2[k];

        for (var i = 0; i < bi.shapes.length; i++) {
            bi.quaternion.mult(bi.shapeOrientations[i], qi);
            bi.quaternion.vmult(bi.shapeOffsets[i], xi);
            xi.vadd(bi.position, xi);
            var si = bi.shapes[i];

            for (var j = 0; j < bj.shapes.length; j++) {

                // Compute world transform of shapes
                bj.quaternion.mult(bj.shapeOrientations[j], qj);
                bj.quaternion.vmult(bj.shapeOffsets[j], xj);
                xj.vadd(bj.position, xj);
                var sj = bj.shapes[j];

                if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){
                    continue;
                }

                // Get contacts
                var resolver = this[si.type | sj.type];
                if(resolver){
                    if (si.type < sj.type) {
                        resolver.call(this, result, si,sj,xi,xj,qi,qj,bi,bj,si,sj);
                    } else {
                        resolver.call(this, result, sj,si,xj,xi,qj,qi,bj,bi,si,sj);
                    }
                }
            }
        }
    }
};

var numWarnings = 0;
var maxWarnings = 10;

function warn(msg){
    if(numWarnings > maxWarnings){
        return;
    }

    numWarnings++;

    console.warn(msg);
}

Narrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =
Narrowphase.prototype.boxBox = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    this.convexConvex(result,si.convexPolyhedronRepresentation,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj,si,sj);
};

Narrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =
Narrowphase.prototype.boxConvex = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    this.convexConvex(result,si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);
};

Narrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =
Narrowphase.prototype.boxParticle = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    this.convexParticle(result,si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);
};

/**
 * @method sphereSphere
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.SPHERE] =
Narrowphase.prototype.sphereSphere = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    // We will have only one contact in this case
    var r = this.makeResult(bi,bj,si,sj);

    // Contact normal
    bj.position.vsub(xi, r.ni);
    r.ni.normalize();

    // Contact point locations
    r.ri.copy(r.ni);
    r.rj.copy(r.ni);
    r.ri.mult(si.radius, r.ri);
    r.rj.mult(-sj.radius, r.rj);
    result.push(r);
};

var point_on_plane_to_sphere = new Vec3();
var plane_to_sphere_ortho = new Vec3();

/**
 * @method spherePlane
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =
Narrowphase.prototype.spherePlane = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    // We will have one contact in this case
    var r = this.makeResult(bi,bj,si,sj);

    // Contact normal
    r.ni.set(0,0,1);
    qj.vmult(r.ni, r.ni);
    r.ni.negate(r.ni); // body i is the sphere, flip normal
    r.ni.normalize(); // Needed?

    // Vector from sphere center to contact point
    r.ni.mult(si.radius, r.ri);

    // Project down sphere on plane
    xi.vsub(xj, point_on_plane_to_sphere);
    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);
    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho,r.rj); // The sphere position projected to plane

    if(plane_to_sphere_ortho.norm2() <= si.radius * si.radius){
        result.push(r);

        // Make it relative to the body
        var ri = r.ri;
        var rj = r.rj;
        ri.vadd(xi, ri);
        ri.vsub(bi.position, ri);
        rj.vadd(xj, rj);
        rj.vsub(bj.position, rj);
    }
};

// See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html
var pointInPolygon_edge = new Vec3();
var pointInPolygon_edge_x_normal = new Vec3();
var pointInPolygon_vtp = new Vec3();
function pointInPolygon(verts, normal, p){
    var positiveResult = null;
    var N = verts.length;
    for(var i=0; i!==N; i++){
        var v = verts[i];

        // Get edge to the next vertex
        var edge = pointInPolygon_edge;
        verts[(i+1) % (N)].vsub(v,edge);

        // Get cross product between polygon normal and the edge
        var edge_x_normal = pointInPolygon_edge_x_normal;
        //var edge_x_normal = new Vec3();
        edge.cross(normal,edge_x_normal);

        // Get vector between point and current vertex
        var vertex_to_p = pointInPolygon_vtp;
        p.vsub(v,vertex_to_p);

        // This dot product determines which side of the edge the point is
        var r = edge_x_normal.dot(vertex_to_p);

        // If all such dot products have same sign, we are inside the polygon.
        if(positiveResult===null || (r>0 && positiveResult===true) || (r<=0 && positiveResult===false)){
            if(positiveResult===null){
                positiveResult = r>0;
            }
            continue;
        } else {
            return false; // Encountered some other sign. Exit.
        }
    }

    // If we got here, all dot products were of the same sign.
    return true;
}

var box_to_sphere = new Vec3();
var sphereBox_ns = new Vec3();
var sphereBox_ns1 = new Vec3();
var sphereBox_ns2 = new Vec3();
var sphereBox_sides = [new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3()];
var sphereBox_sphere_to_corner = new Vec3();
var sphereBox_side_ns = new Vec3();
var sphereBox_side_ns1 = new Vec3();
var sphereBox_side_ns2 = new Vec3();

/**
 * @method sphereBox
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =
Narrowphase.prototype.sphereBox = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    var v3pool = this.v3pool;

    // we refer to the box as body j
    var sides = sphereBox_sides;
    xi.vsub(xj,box_to_sphere);
    sj.getSideNormals(sides,qj);
    var R =     si.radius;
    var penetrating_sides = [];

    // Check side (plane) intersections
    var found = false;

    // Store the resulting side penetration info
    var side_ns = sphereBox_side_ns;
    var side_ns1 = sphereBox_side_ns1;
    var side_ns2 = sphereBox_side_ns2;
    var side_h = null;
    var side_penetrations = 0;
    var side_dot1 = 0;
    var side_dot2 = 0;
    var side_distance = null;
    for(var idx=0,nsides=sides.length; idx!==nsides && found===false; idx++){
        // Get the plane side normal (ns)
        var ns = sphereBox_ns;
        ns.copy(sides[idx]);

        var h = ns.norm();
        ns.normalize();

        // The normal/distance dot product tells which side of the plane we are
        var dot = box_to_sphere.dot(ns);

        if(dot<h+R && dot>0){
            // Intersects plane. Now check the other two dimensions
            var ns1 = sphereBox_ns1;
            var ns2 = sphereBox_ns2;
            ns1.copy(sides[(idx+1)%3]);
            ns2.copy(sides[(idx+2)%3]);
            var h1 = ns1.norm();
            var h2 = ns2.norm();
            ns1.normalize();
            ns2.normalize();
            var dot1 = box_to_sphere.dot(ns1);
            var dot2 = box_to_sphere.dot(ns2);
            if(dot1<h1 && dot1>-h1 && dot2<h2 && dot2>-h2){
                var dist = Math.abs(dot-h-R);
                if(side_distance===null || dist < side_distance){
                    side_distance = dist;
                    side_dot1 = dot1;
                    side_dot2 = dot2;
                    side_h = h;
                    side_ns.copy(ns);
                    side_ns1.copy(ns1);
                    side_ns2.copy(ns2);
                    side_penetrations++;
                }
            }
        }
    }
    if(side_penetrations){
        found = true;
        var r = this.makeResult(bi,bj,si,sj);
        side_ns.mult(-R,r.ri); // Sphere r
        r.ni.copy(side_ns);
        r.ni.negate(r.ni); // Normal should be out of sphere
        side_ns.mult(side_h,side_ns);
        side_ns1.mult(side_dot1,side_ns1);
        side_ns.vadd(side_ns1,side_ns);
        side_ns2.mult(side_dot2,side_ns2);
        side_ns.vadd(side_ns2,r.rj);

        // Make relative to bodies
        r.ri.vadd(xi, r.ri);
        r.ri.vsub(bi.position, r.ri);
        r.rj.vadd(xj, r.rj);
        r.rj.vsub(bj.position, r.rj);

        result.push(r);
    }

    // Check corners
    var rj = v3pool.get();
    var sphere_to_corner = sphereBox_sphere_to_corner;
    for(var j=0; j!==2 && !found; j++){
        for(var k=0; k!==2 && !found; k++){
            for(var l=0; l!==2 && !found; l++){
                rj.set(0,0,0);
                if(j){
                    rj.vadd(sides[0],rj);
                } else {
                    rj.vsub(sides[0],rj);
                }
                if(k){
                    rj.vadd(sides[1],rj);
                } else {
                    rj.vsub(sides[1],rj);
                }
                if(l){
                    rj.vadd(sides[2],rj);
                } else {
                    rj.vsub(sides[2],rj);
                }

                // World position of corner
                xj.vadd(rj,sphere_to_corner);
                sphere_to_corner.vsub(xi,sphere_to_corner);

                if(sphere_to_corner.norm2() < R*R){
                    found = true;
                    var r = this.makeResult(bi,bj,si,sj);
                    r.ri.copy(sphere_to_corner);
                    r.ri.normalize();
                    r.ni.copy(r.ri);
                    r.ri.mult(R,r.ri);
                    r.rj.copy(rj);

                    // Make relative to bodies
                    r.ri.vadd(xi, r.ri);
                    r.ri.vsub(bi.position, r.ri);
                    r.rj.vadd(xj, r.rj);
                    r.rj.vsub(bj.position, r.rj);

                    result.push(r);
                }
            }
        }
    }
    v3pool.release(rj);
    rj = null;

    // Check edges
    var edgeTangent = v3pool.get();
    var edgeCenter = v3pool.get();
    var r = v3pool.get(); // r = edge center to sphere center
    var orthogonal = v3pool.get();
    var dist = v3pool.get();
    var Nsides = sides.length;
    for(var j=0; j!==Nsides && !found; j++){
        for(var k=0; k!==Nsides && !found; k++){
            if(j%3 !== k%3){
                // Get edge tangent
                sides[k].cross(sides[j],edgeTangent);
                edgeTangent.normalize();
                sides[j].vadd(sides[k], edgeCenter);
                r.copy(xi);
                r.vsub(edgeCenter,r);
                r.vsub(xj,r);
                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction
                edgeTangent.mult(orthonorm,orthogonal); // Vector from edge center to sphere center in the tangent direction

                // Find the third side orthogonal to this one
                var l = 0;
                while(l===j%3 || l===k%3){
                    l++;
                }

                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent
                dist.copy(xi);
                dist.vsub(orthogonal,dist);
                dist.vsub(edgeCenter,dist);
                dist.vsub(xj,dist);

                // Distances in tangent direction and distance in the plane orthogonal to it
                var tdist = Math.abs(orthonorm);
                var ndist = dist.norm();

                if(tdist < sides[l].norm() && ndist<R){
                    found = true;
                    var res = this.makeResult(bi,bj,si,sj);
                    edgeCenter.vadd(orthogonal,res.rj); // box rj
                    res.rj.copy(res.rj);
                    dist.negate(res.ni);
                    res.ni.normalize();

                    res.ri.copy(res.rj);
                    res.ri.vadd(xj,res.ri);
                    res.ri.vsub(xi,res.ri);
                    res.ri.normalize();
                    res.ri.mult(R,res.ri);

                    // Make relative to bodies
                    res.ri.vadd(xi, res.ri);
                    res.ri.vsub(bi.position, res.ri);
                    res.rj.vadd(xj, res.rj);
                    res.rj.vsub(bj.position, res.rj);

                    result.push(res);
                }
            }
        }
    }
    v3pool.release(edgeTangent,edgeCenter,r,orthogonal,dist);
};

var convex_to_sphere = new Vec3();
var sphereConvex_edge = new Vec3();
var sphereConvex_edgeUnit = new Vec3();
var sphereConvex_sphereToCorner = new Vec3();
var sphereConvex_worldCorner = new Vec3();
var sphereConvex_worldNormal = new Vec3();
var sphereConvex_worldPoint = new Vec3();
var sphereConvex_worldSpherePointClosestToPlane = new Vec3();
var sphereConvex_penetrationVec = new Vec3();
var sphereConvex_sphereToWorldPoint = new Vec3();

/**
 * @method sphereConvex
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =
Narrowphase.prototype.sphereConvex = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    var v3pool = this.v3pool;
    xi.vsub(xj,convex_to_sphere);
    var normals = sj.faceNormals;
    var faces = sj.faces;
    var verts = sj.vertices;
    var R =     si.radius;
    var penetrating_sides = [];

    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){
    //     return;
    // }

    // Check corners
    for(var i=0; i!==verts.length; i++){
        var v = verts[i];

        // World position of corner
        var worldCorner = sphereConvex_worldCorner;
        qj.vmult(v,worldCorner);
        xj.vadd(worldCorner,worldCorner);
        var sphere_to_corner = sphereConvex_sphereToCorner;
        worldCorner.vsub(xi, sphere_to_corner);
        if(sphere_to_corner.norm2() < R * R){
            found = true;
            var r = this.makeResult(bi,bj,si,sj);
            r.ri.copy(sphere_to_corner);
            r.ri.normalize();
            r.ni.copy(r.ri);
            r.ri.mult(R,r.ri);
            worldCorner.vsub(xj,r.rj);

            // Should be relative to the body.
            r.ri.vadd(xi, r.ri);
            r.ri.vsub(bi.position, r.ri);

            // Should be relative to the body.
            r.rj.vadd(xj, r.rj);
            r.rj.vsub(bj.position, r.rj);

            result.push(r);
            return;
        }
    }

    // Check side (plane) intersections
    var found = false;
    for(var i=0, nfaces=faces.length; i!==nfaces && found===false; i++){
        var normal = normals[i];
        var face = faces[i];

        // Get world-transformed normal of the face
        var worldNormal = sphereConvex_worldNormal;
        qj.vmult(normal,worldNormal);

        // Get a world vertex from the face
        var worldPoint = sphereConvex_worldPoint;
        qj.vmult(verts[face[0]],worldPoint);
        worldPoint.vadd(xj,worldPoint);

        // Get a point on the sphere, closest to the face normal
        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;
        worldNormal.mult(-R, worldSpherePointClosestToPlane);
        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);

        // Vector from a face point to the closest point on the sphere
        var penetrationVec = sphereConvex_penetrationVec;
        worldSpherePointClosestToPlane.vsub(worldPoint,penetrationVec);

        // The penetration. Negative value means overlap.
        var penetration = penetrationVec.dot(worldNormal);

        var worldPointToSphere = sphereConvex_sphereToWorldPoint;
        xi.vsub(worldPoint, worldPointToSphere);

        if(penetration < 0 && worldPointToSphere.dot(worldNormal)>0){
            // Intersects plane. Now check if the sphere is inside the face polygon
            var faceVerts = []; // Face vertices, in world coords
            for(var j=0, Nverts=face.length; j!==Nverts; j++){
                var worldVertex = v3pool.get();
                qj.vmult(verts[face[j]], worldVertex);
                xj.vadd(worldVertex,worldVertex);
                faceVerts.push(worldVertex);
            }

            if(pointInPolygon(faceVerts,worldNormal,xi)){ // Is the sphere center in the face polygon?
                found = true;
                var r = this.makeResult(bi,bj,si,sj);

                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact
                worldNormal.negate(r.ni); // Normal pointing out of sphere

                var penetrationVec2 = v3pool.get();
                worldNormal.mult(-penetration, penetrationVec2);
                var penetrationSpherePoint = v3pool.get();
                worldNormal.mult(-R, penetrationSpherePoint);

                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);
                xi.vsub(xj,r.rj);
                r.rj.vadd(penetrationSpherePoint,r.rj);
                r.rj.vadd(penetrationVec2 , r.rj);

                // Should be relative to the body.
                r.rj.vadd(xj, r.rj);
                r.rj.vsub(bj.position, r.rj);

                // Should be relative to the body.
                r.ri.vadd(xi, r.ri);
                r.ri.vsub(bi.position, r.ri);

                v3pool.release(penetrationVec2);
                v3pool.release(penetrationSpherePoint);

                result.push(r);

                // Release world vertices
                for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){
                    v3pool.release(faceVerts[j]);
                }

                return; // We only expect *one* face contact
            } else {
                // Edge?
                for(var j=0; j!==face.length; j++){

                    // Get two world transformed vertices
                    var v1 = v3pool.get();
                    var v2 = v3pool.get();
                    qj.vmult(verts[face[(j+1)%face.length]], v1);
                    qj.vmult(verts[face[(j+2)%face.length]], v2);
                    xj.vadd(v1, v1);
                    xj.vadd(v2, v2);

                    // Construct edge vector
                    var edge = sphereConvex_edge;
                    v2.vsub(v1,edge);

                    // Construct the same vector, but normalized
                    var edgeUnit = sphereConvex_edgeUnit;
                    edge.unit(edgeUnit);

                    // p is xi projected onto the edge
                    var p = v3pool.get();
                    var v1_to_xi = v3pool.get();
                    xi.vsub(v1, v1_to_xi);
                    var dot = v1_to_xi.dot(edgeUnit);
                    edgeUnit.mult(dot, p);
                    p.vadd(v1, p);

                    // Compute a vector from p to the center of the sphere
                    var xi_to_p = v3pool.get();
                    p.vsub(xi, xi_to_p);

                    // Collision if the edge-sphere distance is less than the radius
                    // AND if p is in between v1 and v2
                    if(dot > 0 && dot*dot<edge.norm2() && xi_to_p.norm2() < R*R){ // Collision if the edge-sphere distance is less than the radius
                        // Edge contact!
                        var r = this.makeResult(bi,bj,si,sj);
                        p.vsub(xj,r.rj);

                        p.vsub(xi,r.ni);
                        r.ni.normalize();

                        r.ni.mult(R,r.ri);

                        // Should be relative to the body.
                        r.rj.vadd(xj, r.rj);
                        r.rj.vsub(bj.position, r.rj);

                        // Should be relative to the body.
                        r.ri.vadd(xi, r.ri);
                        r.ri.vsub(bi.position, r.ri);

                        result.push(r);

                        // Release world vertices
                        for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){
                            v3pool.release(faceVerts[j]);
                        }

                        v3pool.release(v1);
                        v3pool.release(v2);
                        v3pool.release(p);
                        v3pool.release(xi_to_p);
                        v3pool.release(v1_to_xi);

                        return;
                    }

                    v3pool.release(v1);
                    v3pool.release(v2);
                    v3pool.release(p);
                    v3pool.release(xi_to_p);
                    v3pool.release(v1_to_xi);
                }
            }

            // Release world vertices
            for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){
                v3pool.release(faceVerts[j]);
            }
        }
    }
};

var planeBox_normal = new Vec3();
var plane_to_corner = new Vec3();

/**
 * @method planeBox
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =
Narrowphase.prototype.planeBox = function(result,si,sj,xi,xj,qi,qj,bi,bj){
    this.planeConvex(result,si,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj);
};

var planeConvex_v = new Vec3();
var planeConvex_normal = new Vec3();
var planeConvex_relpos = new Vec3();
var planeConvex_projected = new Vec3();

/**
 * @method planeConvex
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =
Narrowphase.prototype.planeConvex = function(
    result,
    planeShape,
    convexShape,
    planePosition,
    convexPosition,
    planeQuat,
    convexQuat,
    planeBody,
    convexBody
){
    // Simply return the points behind the plane.
    var worldVertex = planeConvex_v,
        worldNormal = planeConvex_normal;
    worldNormal.set(0,0,1);
    planeQuat.vmult(worldNormal,worldNormal); // Turn normal according to plane orientation

    var relpos = planeConvex_relpos;
    for(var i = 0; i !== convexShape.vertices.length; i++){

        // Get world convex vertex
        worldVertex.copy(convexShape.vertices[i]);
        convexQuat.vmult(worldVertex, worldVertex);
        convexPosition.vadd(worldVertex, worldVertex);
        worldVertex.vsub(planePosition, relpos);

        var dot = worldNormal.dot(relpos);
        if(dot <= 0.0){

            var r = this.makeResult(planeBody, convexBody, planeShape, convexShape);

            // Get vertex position projected on plane
            var projected = planeConvex_projected;
            worldNormal.mult(worldNormal.dot(relpos),projected);
            worldVertex.vsub(projected, projected);
            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane

            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane

            // rj is now just the vector from the convex center to the vertex
            worldVertex.vsub(convexPosition, r.rj);

            // Make it relative to the body
            r.ri.vadd(planePosition, r.ri);
            r.ri.vsub(planeBody.position, r.ri);
            r.rj.vadd(convexPosition, r.rj);
            r.rj.vsub(convexBody.position, r.rj);

            result.push(r);
        }
    }
};

var convexConvex_sepAxis = new Vec3();
var convexConvex_q = new Vec3();

/**
 * @method convexConvex
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =
Narrowphase.prototype.convexConvex = function(result,si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){
    var sepAxis = convexConvex_sepAxis;

    if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){
        return;
    }

    if(si.findSeparatingAxis(sj,xi,qi,xj,qj,sepAxis,faceListA,faceListB)){
        var res = [];
        var q = convexConvex_q;
        si.clipAgainstHull(xi,qi,sj,xj,qj,sepAxis,-100,100,res);
        for(var j = 0; j !== res.length; j++){
            var r = this.makeResult(bi,bj,si,sj,rsi,rsj),
                ri = r.ri,
                rj = r.rj;
            sepAxis.negate(r.ni);
            res[j].normal.negate(q);
            q.mult(res[j].depth, q);
            res[j].point.vadd(q, ri);
            rj.copy(res[j].point);

            // Contact points are in world coordinates. Transform back to relative
            ri.vsub(xi,ri);
            rj.vsub(xj,rj);

            // Make relative to bodies
            ri.vadd(xi, ri);
            ri.vsub(bi.position, ri);
            rj.vadd(xj, rj);
            rj.vsub(bj.position, rj);

            result.push(r);
        }
    }
};

var particlePlane_normal = new Vec3();
var particlePlane_relpos = new Vec3();
var particlePlane_projected = new Vec3();

/**
 * @method particlePlane
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =
Narrowphase.prototype.planeParticle = function(result,sj,si,xj,xi,qj,qi,bj,bi){
    var normal = particlePlane_normal;
    normal.set(0,0,1);
    bj.quaternion.vmult(normal,normal); // Turn normal according to plane orientation
    var relpos = particlePlane_relpos;
    xi.vsub(bj.position,relpos);
    var dot = normal.dot(relpos);
    if(dot <= 0.0){
        var r = this.makeResult(bi,bj,si,sj);
        r.ni.copy(normal); // Contact normal is the plane normal
        r.ni.negate(r.ni);
        r.ri.set(0,0,0); // Center of particle

        // Get particle position projected on plane
        var projected = particlePlane_projected;
        normal.mult(normal.dot(xi),projected);
        xi.vsub(projected,projected);
        //projected.vadd(bj.position,projected);

        // rj is now the projected world position minus plane position
        r.rj.copy(projected);
        result.push(r);
    }
};

var particleSphere_normal = new Vec3();

/**
 * @method particleSphere
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =
Narrowphase.prototype.sphereParticle = function(result,sj,si,xj,xi,qj,qi,bj,bi){
    // The normal is the unit vector from sphere center to particle center
    var normal = particleSphere_normal;
    normal.set(0,0,1);
    xi.vsub(xj,normal);
    var lengthSquared = normal.norm2();

    if(lengthSquared <= sj.radius * sj.radius){
        var r = this.makeResult(bi,bj,si,sj);
        normal.normalize();
        r.rj.copy(normal);
        r.rj.mult(sj.radius,r.rj);
        r.ni.copy(normal); // Contact normal
        r.ni.negate(r.ni);
        r.ri.set(0,0,0); // Center of particle
        result.push(r);
    }
};

// WIP
var cqj = new Quaternion();
var convexParticle_local = new Vec3();
var convexParticle_normal = new Vec3();
var convexParticle_penetratedFaceNormal = new Vec3();
var convexParticle_vertexToParticle = new Vec3();
var convexParticle_worldPenetrationVec = new Vec3();

/**
 * @method convexParticle
 * @param  {Array}      result
 * @param  {Shape}      si
 * @param  {Shape}      sj
 * @param  {Vec3}       xi
 * @param  {Vec3}       xj
 * @param  {Quaternion} qi
 * @param  {Quaternion} qj
 * @param  {Body}       bi
 * @param  {Body}       bj
 */
Narrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =
Narrowphase.prototype.convexParticle = function(result,sj,si,xj,xi,qj,qi,bj,bi){
    var penetratedFaceIndex = -1;
    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;
    var worldPenetrationVec = convexParticle_worldPenetrationVec;
    var minPenetration = null;
    var numDetectedFaces = 0;

    // Convert particle position xi to local coords in the convex
    var local = convexParticle_local;
    local.copy(xi);
    local.vsub(xj,local); // Convert position to relative the convex origin
    qj.conjugate(cqj);
    cqj.vmult(local,local);

    if(sj.pointIsInside(local)){

        if(sj.worldVerticesNeedsUpdate){
            sj.computeWorldVertices(xj,qj);
        }
        if(sj.worldFaceNormalsNeedsUpdate){
            sj.computeWorldFaceNormals(qj);
        }

        // For each world polygon in the polyhedra
        for(var i=0,nfaces=sj.faces.length; i!==nfaces; i++){

            // Construct world face vertices
            var verts = [ sj.worldVertices[ sj.faces[i][0] ] ];
            var normal = sj.worldFaceNormals[i];

            // Check how much the particle penetrates the polygon plane.
            xi.vsub(verts[0],convexParticle_vertexToParticle);
            var penetration = -normal.dot(convexParticle_vertexToParticle);
            if(minPenetration===null || Math.abs(penetration)<Math.abs(minPenetration)){
                minPenetration = penetration;
                penetratedFaceIndex = i;
                penetratedFaceNormal.copy(normal);
                numDetectedFaces++;
            }
        }

        if(penetratedFaceIndex!==-1){
            // Setup contact
            var r = this.makeResult(bi,bj,si,sj);
            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);

            // rj is the particle position projected to the face
            worldPenetrationVec.vadd(xi,worldPenetrationVec);
            worldPenetrationVec.vsub(xj,worldPenetrationVec);
            r.rj.copy(worldPenetrationVec);
            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);
            //projectedToFace.copy(r.rj);

            //qj.vmult(r.rj,r.rj);
            penetratedFaceNormal.negate( r.ni ); // Contact normal
            r.ri.set(0,0,0); // Center of particle

            var ri = r.ri,
                rj = r.rj;

            // Make relative to bodies
            ri.vadd(xi, ri);
            ri.vsub(bi.position, ri);
            rj.vadd(xj, rj);
            rj.vsub(bj.position, rj);

            result.push(r);
        } else {
            console.warn("Point found inside convex, but did not find penetrating face!");
        }
    }
};

Narrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =
Narrowphase.prototype.boxHeightfield = function (result,si,sj,xi,xj,qi,qj,bi,bj){
    this.convexHeightfield(result,si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj);
};

var convexHeightfield_tmp1 = new Vec3();
var convexHeightfield_tmp2 = new Vec3();
var convexHeightfield_faceList = [0];

/**
 * @method sphereHeightfield
 */
Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =
Narrowphase.prototype.convexHeightfield = function (
    result,
    convexShape,
    hfShape,
    convexPos,
    hfPos,
    convexQuat,
    hfQuat,
    convexBody,
    hfBody
){
    var data = hfShape.data,
        w = hfShape.elementSize,
        radius = convexShape.boundingSphereRadius,
        worldPillarOffset = convexHeightfield_tmp2,
        faceList = convexHeightfield_faceList;

    // Get sphere position to heightfield local!
    var localConvexPos = convexHeightfield_tmp1;
    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);

    // Get the index of the data points to test against
    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,
        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,
        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,
        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;

    // Bail out if we are out of the terrain
    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){
        return;
    }

    // Clamp index to edges
    if(iMinX < 0){ iMinX = 0; }
    if(iMaxX < 0){ iMaxX = 0; }
    if(iMinY < 0){ iMinY = 0; }
    if(iMaxY < 0){ iMaxY = 0; }
    if(iMinX >= data.length){ iMinX = data.length - 1; }
    if(iMaxX >= data.length){ iMaxX = data.length - 1; }
    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }
    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }

    var minMax = [];
    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
    var min = minMax[0];
    var max = minMax[1];

    // Bail out if we're cant touch the bounding height box
    if(localConvexPos.z - radius > max || localConvexPos.z + radius < min){
        return;
    }

    for(var i = iMinX; i < iMaxX; i++){
        for(var j = iMinY; j < iMaxY; j++){

            // Lower triangle
            hfShape.getConvexTrianglePillar(i, j, false);
            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
                this.convexConvex(result, convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);
            }

            // Upper triangle
            hfShape.getConvexTrianglePillar(i, j, true);
            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
                this.convexConvex(result, convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);
            }
        }
    }
};




var sphereHeightfield_tmp1 = new Vec3();
var sphereHeightfield_tmp2 = new Vec3();

/**
 * @method sphereHeightfield
 */
Narrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =
Narrowphase.prototype.sphereHeightfield = function (
    result,
    sphereShape,
    hfShape,
    spherePos,
    hfPos,
    sphereQuat,
    hfQuat,
    sphereBody,
    hfBody
){
    var data = hfShape.data,
        radius = sphereShape.radius,
        w = hfShape.elementSize,
        worldPillarOffset = sphereHeightfield_tmp2;

    // Get sphere position to heightfield local!
    var localSpherePos = sphereHeightfield_tmp1;
    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);

    // Get the index of the data points to test against
    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,
        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,
        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,
        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;

    // Bail out if we are out of the terrain
    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){
        return;
    }

    // Clamp index to edges
    if(iMinX < 0){ iMinX = 0; }
    if(iMaxX < 0){ iMaxX = 0; }
    if(iMinY < 0){ iMinY = 0; }
    if(iMaxY < 0){ iMaxY = 0; }
    if(iMinX >= data.length){ iMinX = data.length - 1; }
    if(iMaxX >= data.length){ iMaxX = data.length - 1; }
    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }
    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }

    var minMax = [];
    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
    var min = minMax[0];
    var max = minMax[1];

    // Bail out if we're cant touch the bounding height box
    if(localSpherePos.z - radius > max || localSpherePos.z + radius < min){
        return;
    }

    for(var i = iMinX; i < iMaxX; i++){
        for(var j = iMinY; j < iMaxY; j++){

            var numContactsBefore = result.length;

            // Lower triangle
            hfShape.getConvexTrianglePillar(i, j, false);
            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
                this.sphereConvex(result, sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);
            }

            // Upper triangle
            hfShape.getConvexTrianglePillar(i, j, true);
            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);
            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
                this.sphereConvex(result, sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);
            }

            var numContacts = result.length - numContactsBefore;

            if(numContacts > 2){
                return;
            }
            /*
            // Skip all but 1
            for (var k = 0; k < numContacts - 1; k++) {
                result.pop();
            }
            */
        }
    }
};
},{"../equations/ContactEquation":16,"../math/Quaternion":25,"../math/Transform":26,"../math/Vec3":27,"../shapes/ConvexPolyhedron":35,"../shapes/Shape":40,"../solver/Solver":43,"../utils/Vec3Pool":49}],51:[function(_dereq_,module,exports){
/* global performance */

module.exports = World;

var Shape = _dereq_('../shapes/Shape');
var Vec3 = _dereq_('../math/Vec3');
var Quaternion = _dereq_('../math/Quaternion');
var GSSolver = _dereq_('../solver/GSSolver');
var Vec3Pool = _dereq_('../utils/Vec3Pool');
var ContactEquation = _dereq_('../equations/ContactEquation');
var FrictionEquation = _dereq_('../equations/FrictionEquation');
var Narrowphase = _dereq_('./Narrowphase');
var EventTarget = _dereq_('../utils/EventTarget');
var ArrayCollisionMatrix = _dereq_('../collision/ArrayCollisionMatrix');
var Material = _dereq_('../material/Material');
var ContactMaterial = _dereq_('../material/ContactMaterial');
var Body = _dereq_('../objects/Body');
var TupleDictionary = _dereq_('../utils/TupleDictionary');
var RaycastResult = _dereq_('../collision/RaycastResult');
var AABB = _dereq_('../collision/AABB');
var Ray = _dereq_('../collision/Ray');
var NaiveBroadphase = _dereq_('../collision/NaiveBroadphase');

/**
 * The physics world
 * @class World
 * @constructor
 * @extends EventTarget
 */
function World(){
    EventTarget.apply(this);

    /**
     * Last used timestep. Is set to -1 if not available.
     * @property {Number} dt
     */
    this.dt = -1;

    /**
     * Makes bodies go to sleep when they've been inactive
     * @property allowSleep
     * @type {Boolean}
     */
    this.allowSleep = false;

    /**
     * All the current contacts (instances of ContactEquation) in the world.
     * @property contacts
     * @type {Array}
     */
    this.contacts = [];
    this.frictionEquations = [];

    /**
     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).
     * @property quatNormalizeSkip
     * @type {Number}
     */
    this.quatNormalizeSkip = 0;

    /**
     * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.
     * @property quatNormalizeFast
     * @type {Boolean}
     * @see Quaternion.normalizeFast
     * @see Quaternion.normalize
     */
    this.quatNormalizeFast = false;

    /**
     * The wall-clock time since simulation start
     * @property time
     * @type {Number}
     */
    this.time = 0.0;

    /**
     * Number of timesteps taken since start
     * @property stepnumber
     * @type {Number}
     */
    this.stepnumber = 0;

    /// Default and last timestep sizes
    this.default_dt = 1/60;

    this.nextId = 0;
    /**
     * @property gravity
     * @type {Vec3}
     */
    this.gravity = new Vec3();

    /**
     * @property broadphase
     * @type {Broadphase}
     */
    this.broadphase = new NaiveBroadphase();

    /**
     * @property bodies
     * @type {Array}
     */
    this.bodies = [];

    /**
     * @property solver
     * @type {Solver}
     */
    this.solver = new GSSolver();

    /**
     * @property constraints
     * @type {Array}
     */
    this.constraints = [];

    /**
     * @property narrowphase
     * @type {Narrowphase}
     */
    this.narrowphase = new Narrowphase();

    /**
     * @property {ArrayCollisionMatrix} collisionMatrix
	 * @type {ArrayCollisionMatrix}
	 */
	this.collisionMatrix = new ArrayCollisionMatrix();

    /**
     * CollisionMatrix from the previous step.
     * @property {ArrayCollisionMatrix} collisionMatrixPrevious
	 * @type {ArrayCollisionMatrix}
	 */
	this.collisionMatrixPrevious = new ArrayCollisionMatrix();

    /**
     * All added materials
     * @property materials
     * @type {Array}
     */
    this.materials = [];

    /**
     * @property contactmaterials
     * @type {Array}
     */
    this.contactmaterials = [];

    /**
     * Used to look up a ContactMaterial given two instances of Material.
     * @property {TupleDictionary} contactMaterialTable
     */
    this.contactMaterialTable = new TupleDictionary();

    this.defaultMaterial = new Material("default");

    /**
     * This contact material is used if no suitable contactmaterial is found for a contact.
     * @property defaultContactMaterial
     * @type {ContactMaterial}
     */
    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });

    /**
     * @property doProfiling
     * @type {Boolean}
     */
    this.doProfiling = false;

    /**
     * @property profile
     * @type {Object}
     */
    this.profile = {
        solve:0,
        makeContactConstraints:0,
        broadphase:0,
        integrate:0,
        narrowphase:0,
    };

    /**
     * @property subystems
     * @type {Array}
     */
    this.subsystems = [];

    this.addBodyEvent = {
        type:"addBody",
        body : null,
    };

    this.removeBodyEvent = {
        type:"removeBody",
        body : null,
    };
}
World.prototype = new EventTarget();

// Temp stuff
var tmpAABB1 = new AABB();
var tmpArray1 = [];
var tmpRay = new Ray();

/**
 * Get the contact material between materials m1 and m2
 * @method getContactMaterial
 * @param {Material} m1
 * @param {Material} m2
 * @return {Contactmaterial} The contact material if it was found.
 */
World.prototype.getContactMaterial = function(m1,m2){
    return this.contactMaterialTable.get(m1.id,m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];
};

/**
 * Get number of objects in the world.
 * @method numObjects
 * @return {Number}
 * @deprecated
 */
World.prototype.numObjects = function(){
    return this.bodies.length;
};

/**
 * Store old collision state info
 * @method collisionMatrixTick
 */
World.prototype.collisionMatrixTick = function(){
	var temp = this.collisionMatrixPrevious;
	this.collisionMatrixPrevious = this.collisionMatrix;
	this.collisionMatrix = temp;
	this.collisionMatrix.reset();
};

/**
 * Add a rigid body to the simulation.
 * @method add
 * @param {Body} body
 * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.
 * @todo Adding an array of bodies should be possible. This would save some loops too
 * @deprecated Use .addBody instead
 */
World.prototype.add = World.prototype.addBody = function(body){
    if(this.bodies.indexOf(body) !== -1){
        return;
    }
    body.index = this.bodies.length;
    this.bodies.push(body);
    body.world = this;
    body.initPosition.copy(body.position);
    body.initVelocity.copy(body.velocity);
    body.timeLastSleepy = this.time;
    if(body instanceof Body){
        body.initAngularVelocity.copy(body.angularVelocity);
        body.initQuaternion.copy(body.quaternion);
    }
	this.collisionMatrix.setNumObjects(this.bodies.length);
    this.addBodyEvent.body = body;
    this.dispatchEvent(this.addBodyEvent);
};

/**
 * Add a constraint to the simulation.
 * @method addConstraint
 * @param {Constraint} c
 */
World.prototype.addConstraint = function(c){
    this.constraints.push(c);
};

/**
 * Removes a constraint
 * @method removeConstraint
 * @param {Constraint} c
 */
World.prototype.removeConstraint = function(c){
    var idx = this.constraints.indexOf(c);
    if(idx!==-1){
        this.constraints.splice(idx,1);
    }
};

/**
 * Raycast test
 * @method rayTest
 * @param {Vec3} from
 * @param {Vec3} to
 * @param {Function|RaycastResult} result
 */
World.prototype.rayTest = function(from, to, result){
    // result = result || new RaycastResult();

    tmpRay.from.copy(from);
    tmpRay.to.copy(to);
    tmpRay.getAABB(tmpAABB1);

    tmpArray1.length = 0;
    this.broadphase.aabbQuery(this, tmpAABB1, tmpArray1);

    tmpRay.intersectBodies(tmpArray1, result);
};

/**
 * Remove a rigid body from the simulation.
 * @method remove
 * @param {Body} body
 * @todo Rename to .removeBody
 */
World.prototype.remove = function(body){
    body.world = null;
    var n = this.bodies.length-1,
        bodies = this.bodies,
        idx = bodies.indexOf(body);
    if(idx !== -1){
        bodies.splice(idx, 1); // Todo: should use a garbage free method

        // Recompute index
        for(var i=0; i!==bodies.length; i++){
            bodies[i].index = i;
        }

        this.collisionMatrix.setNumObjects(n);
        this.removeBodyEvent.body = body;
        this.dispatchEvent(this.removeBodyEvent);
    }
};

/**
 * Adds a material to the World.
 * @method addMaterial
 * @param {Material} m
 * @todo Necessary?
 */
World.prototype.addMaterial = function(m){
    this.materials.push(m);
};

/**
 * Adds a contact material to the World
 * @method addContactMaterial
 * @param {ContactMaterial} cmat
 */
World.prototype.addContactMaterial = function(cmat) {

    // Add contact material
    this.contactmaterials.push(cmat);

    // Add current contact material to the material table
    this.contactMaterialTable.set(cmat.materials[0].id,cmat.materials[1].id,cmat);
};

// performance.now()
if(typeof performance === 'undefined'){
    performance = {};
}
if(!performance.now){
    var nowOffset = Date.now();
    if (performance.timing && performance.timing.navigationStart){
        nowOffset = performance.timing.navigationStart;
    }
    performance.now = function(){
        return Date.now() - nowOffset;
    };
}

var step_tmp1 = new Vec3();

/**
 * Step the physics world forward in time.
 *
 * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.
 *
 * @method step
 * @param {Number} dt                       The fixed time step size to use.
 * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.
 * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.
 *
 * @example
 *     // fixed timestepping without interpolation
 *     world.step(1/60);
 *
 * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World
 */
World.prototype.step = function(dt, timeSinceLastCalled, maxSubSteps){
    maxSubSteps = maxSubSteps || 10;
    timeSinceLastCalled = timeSinceLastCalled || 0;

    if(timeSinceLastCalled === 0){ // Fixed, simple stepping

        this.internalStep(dt);

        // Increment time
        this.time += dt;

    } else {

        // Compute the number of fixed steps we should have taken since the last step
        var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);
        internalSteps = Math.min(internalSteps,maxSubSteps);

        // Do some fixed steps to catch up
        var t0 = performance.now();
        for(var i=0; i!==internalSteps; i++){
            this.internalStep(dt);
            if(performance.now() - t0 > dt * 1000){
                // We are slower than real-time. Better bail out.
                break;
            }
        }

        // Increment internal clock
        this.time += timeSinceLastCalled;

        // Compute "Left over" time step
        var h = this.time % dt;
        var h_div_dt = h / dt;
        var interpvelo = step_tmp1;
        var bodies = this.bodies;

        for(var j=0; j !== bodies.length; j++){
            var b = bodies[j];
            if(b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING){

                // Interpolate
                b.position.vsub(b.previousPosition, interpvelo);
                interpvelo.scale(h_div_dt, interpvelo);
                b.position.vadd(interpvelo, b.interpolatedPosition);

                // TODO: interpolate quaternion
                // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;

            } else {

                // For static bodies, just copy. Who else will do it?
                b.interpolatedPosition.copy(b.position);
                b.interpolatedQuaternion.copy(b.quaternion);
            }
        }
    }
};

/**
 * Step the simulation
 * @method step
 * @param {Number} dt
 */
var World_step_postStepEvent = {type:"postStep"}, // Reusable event objects to save memory
    World_step_preStepEvent = {type:"preStep"},
    World_step_collideEvent = {type:"collide", body:null, contact:null },
    World_step_oldContacts = [], // Pools for unused objects
    World_step_frictionEquationPool = [],
    World_step_p1 = [], // Reusable arrays for collision pairs
    World_step_p2 = [],
    World_step_gvec = new Vec3(), // Temporary vectors and quats
    World_step_vi = new Vec3(),
    World_step_vj = new Vec3(),
    World_step_wi = new Vec3(),
    World_step_wj = new Vec3(),
    World_step_t1 = new Vec3(),
    World_step_t2 = new Vec3(),
    World_step_rixn = new Vec3(),
    World_step_rjxn = new Vec3(),
    World_step_step_q = new Quaternion(),
    World_step_step_w = new Quaternion(),
    World_step_step_wq = new Quaternion(),
    invI_tau_dt = new Vec3();
World.prototype.internalStep = function(dt){
    this.dt = dt;

    var world = this,
        that = this,
        contacts = this.contacts,
        p1 = World_step_p1,
        p2 = World_step_p2,
        N = this.numObjects(),
        bodies = this.bodies,
        solver = this.solver,
        gravity = this.gravity,
        doProfiling = this.doProfiling,
        profile = this.profile,
        DYNAMIC = Body.DYNAMIC,
        profilingStart,
        constraints = this.constraints,
        frictionEquationPool = World_step_frictionEquationPool,
        gnorm = gravity.norm(),
        gx = gravity.x,
        gy = gravity.y,
        gz = gravity.z,
        i=0;

    if(doProfiling){
        profilingStart = performance.now();
    }

    // Add gravity to all objects
    for(i=0; i!==N; i++){
        var bi = bodies[i];
        if(bi.type & DYNAMIC){ // Only for dynamic bodies
            var f = bi.force, m = bi.mass;
            f.x += m*gx;
            f.y += m*gy;
            f.z += m*gz;
        }
    }

    // Update subsystems
    for(var i=0, Nsubsystems=this.subsystems.length; i!==Nsubsystems; i++){
        this.subsystems[i].update();
    }

    // Collision detection
    if(doProfiling){ profilingStart = performance.now(); }
    p1.length = 0; // Clean up pair arrays from last step
    p2.length = 0;
    this.broadphase.collisionPairs(this,p1,p2);
    if(doProfiling){ profile.broadphase = performance.now() - profilingStart; }

    // Remove constrained pairs with collideConnected == false
    var Nconstraints = constraints.length;
    for(i=0; i!==Nconstraints; i++){
        var c = constraints[i];
        if(!c.collideConnected){
            for(var j = p1.length-1; j>=0; j-=1){
                if( (c.bodyA === p1[j] && c.bodyB === p2[j]) ||
                    (c.bodyB === p1[j] && c.bodyA === p2[j])){
                    p1.splice(j, 1);
                    p2.splice(j, 1);
                }
            }
        }
    }

    this.collisionMatrixTick();

    // Generate contacts
    if(doProfiling){ profilingStart = performance.now(); }
    var oldcontacts = World_step_oldContacts;
    var NoldContacts = contacts.length;

    for(i=0; i!==NoldContacts; i++){
        oldcontacts.push(contacts[i]);
    }
    contacts.length = 0;

    this.narrowphase.getContacts(p1,p2,
                                this,
                                contacts,
                                oldcontacts // To be reused
                                );
    if(doProfiling){
        profile.narrowphase = performance.now() - profilingStart;
    }

    // Loop over all collisions
    if(doProfiling){
        profilingStart = performance.now();
    }
    var ncontacts = contacts.length;

    // Transfer FrictionEquation from current list to the pool for reuse
    var NoldFrictionEquations = this.frictionEquations.length;
    for(i=0; i!==NoldFrictionEquations; i++){
        frictionEquationPool.push(this.frictionEquations[i]);
    }
    this.frictionEquations.length = 0;

    for(var k=0; k!==ncontacts; k++){

        // Current contact
        var c = contacts[k];

        // Get current collision indeces
        var bi = c.bi,
            bj = c.bj,
            si = c.si,
            sj = c.sj;

        // Resolve indices
        var i = bodies.indexOf(bi), j = bodies.indexOf(bj);

        // Get collision properties
        var cm;
        if(bi.material && bj.material){
            cm = this.getContactMaterial(bi.material,bj.material) || this.defaultContactMaterial;
        } else {
            cm = this.defaultContactMaterial;
        }
        var mu = cm.friction;

        // g = ( xj + rj - xi - ri ) .dot ( ni )
        var gvec = World_step_gvec;
        gvec.set(bj.position.x + c.rj.x - bi.position.x - c.ri.x,
                 bj.position.y + c.rj.y - bi.position.y - c.ri.y,
                 bj.position.z + c.rj.z - bi.position.z - c.ri.z);
        var g = gvec.dot(c.ni); // Gap, negative if penetration

        // Action if penetration
        if(g < 0.0){

            c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;

			c.restitution = cm.restitution;
			c.penetration = g;
			c.setSpookParams(cm.contactEquationStiffness,
                             cm.contactEquationRelaxation,
                             dt);

			solver.addEquation(c);

			// Add friction constraint equation
			if(mu > 0){

				// Create 2 tangent equations
				var mug = mu*gnorm;
				var reducedMass = (bi.invMass + bj.invMass);
				if(reducedMass > 0){
					reducedMass = 1/reducedMass;
				}
				var pool = frictionEquationPool;
				var c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
				var c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
				this.frictionEquations.push(c1);
				this.frictionEquations.push(c2);

				c1.bi = c2.bi = bi;
				c1.bj = c2.bj = bj;
				c1.minForce = c2.minForce = -mug*reducedMass;
				c1.maxForce = c2.maxForce = mug*reducedMass;

				// Copy over the relative vectors
				c1.ri.copy(c.ri);
				c1.rj.copy(c.rj);
				c2.ri.copy(c.ri);
				c2.rj.copy(c.rj);

				// Construct tangents
				c.ni.tangents(c1.t, c2.t);

                // Set spook params
                c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
                c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);

                c1.enabled = c2.enabled = c.enabled;

				// Add equations to solver
				solver.addEquation(c1);
				solver.addEquation(c2);
			}

            if( bi.allowSleep &&
                bi.type === Body.DYNAMIC &&
                bi.sleepState  === Body.SLEEPING &&
                bj.sleepState  === Body.AWAKE &&
                bj.type !== Body.STATIC
            ){
                var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();
                var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);
                if(speedSquaredB >= speedLimitSquaredB*2){
                    bi._wakeUpAfterNarrowphase = true;
                }
            }

            if( bj.allowSleep &&
                bj.type === Body.DYNAMIC &&
                bj.sleepState  === Body.SLEEPING &&
                bi.sleepState  === Body.AWAKE &&
                bi.type !== Body.STATIC
            ){
                var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();
                var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);
                if(speedSquaredA >= speedLimitSquaredA*2){
                    bj._wakeUpAfterNarrowphase = true;
                }
            }

            // Now we know that i and j are in contact. Set collision matrix state
			this.collisionMatrix.set(bi, bj, true);

            if (this.collisionMatrix.get(bi, bj) !== this.collisionMatrixPrevious.get(bi, bj)) {
                // First contact!
                // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.
                World_step_collideEvent.body = bj;
                World_step_collideEvent.contact = c;
                bi.dispatchEvent(World_step_collideEvent);

                World_step_collideEvent.body = bi;
                bj.dispatchEvent(World_step_collideEvent);

                /*
                bi.wakeUp();
                bj.wakeUp();
                */
            }
        }
    }
    if(doProfiling){
        profile.makeContactConstraints = performance.now() - profilingStart;
        profilingStart = performance.now();
    }

    // Wake up bodies
    for(i=0; i!==N; i++){
        var bi = bodies[i];
        if(bi._wakeUpAfterNarrowphase){
            bi.wakeUp();
            bi._wakeUpAfterNarrowphase = false;
        }
    }

    // Add user-added constraints
    var Nconstraints = constraints.length;
    for(i=0; i!==Nconstraints; i++){
        var c = constraints[i];
        c.update();
        for(var j=0, Neq=c.equations.length; j!==Neq; j++){
            var eq = c.equations[j];
            solver.addEquation(eq);
        }
    }

    // Solve the constrained system
    solver.solve(dt,this);

    if(doProfiling){
        profile.solve = performance.now() - profilingStart;
    }

    // Remove all contacts from solver
    solver.removeAllEquations();

    // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details
    var pow = Math.pow;
    for(i=0; i!==N; i++){
        var bi = bodies[i];
        if(bi.type & DYNAMIC){ // Only for dynamic bodies
            var ld = pow(1.0 - bi.linearDamping,dt);
            var v = bi.velocity;
            v.mult(ld,v);
            var av = bi.angularVelocity;
            if(av){
                var ad = pow(1.0 - bi.angularDamping,dt);
                av.mult(ad,av);
            }
        }
    }

    this.dispatchEvent(World_step_preStepEvent);

    // Invoke pre-step callbacks
    for(i=0; i!==N; i++){
        var bi = bodies[i];
        if(bi.preStep){
            bi.preStep.call(bi);
        }
    }

    // Leap frog
    // vnew = v + h*f/m
    // xnew = x + h*vnew
    if(doProfiling){
        profilingStart = performance.now();
    }
    var q = World_step_step_q;
    var w = World_step_step_w;
    var wq = World_step_step_wq;
    var stepnumber = this.stepnumber;
    var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;
    var quatNormalize = stepnumber % (this.quatNormalizeSkip+1) === 0;
    var quatNormalizeFast = this.quatNormalizeFast;
    var half_dt = dt * 0.5;
    var PLANE = Shape.types.PLANE,
        CONVEX = Shape.types.CONVEXPOLYHEDRON;

    for(i=0; i!==N; i++){
        var b = bodies[i],
            s = b.shape,
            force = b.force,
            tau = b.torque;
        if((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING){ // Only for dynamic
            var velo = b.velocity,
                angularVelo = b.angularVelocity,
                pos = b.position,
                quat = b.quaternion,
                invMass = b.invMass,
                invInertia = b.invInertiaWorld;

            velo.x += force.x * invMass * dt;
            velo.y += force.y * invMass * dt;
            velo.z += force.z * invMass * dt;

            if(b.angularVelocity){
                invInertia.vmult(tau,invI_tau_dt);
                invI_tau_dt.mult(dt,invI_tau_dt);
                invI_tau_dt.vadd(angularVelo,angularVelo);
                //console.log(invI_tau_dt);
                /*
                angularVelo.x += tau.x * invInertia.x * dt;
                angularVelo.y += tau.y * invInertia.y * dt;
                angularVelo.z += tau.z * invInertia.z * dt;
                */
            }

            // Use new velocity  - leap frog
            pos.x += velo.x * dt;
            pos.y += velo.y * dt;
            pos.z += velo.z * dt;

            if(b.angularVelocity){
                w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);
                w.mult(quat,wq);
                quat.x += half_dt * wq.x;
                quat.y += half_dt * wq.y;
                quat.z += half_dt * wq.z;
                quat.w += half_dt * wq.w;
                if(quatNormalize){
                    if(quatNormalizeFast){
                        quat.normalizeFast();
                    } else {
                        quat.normalize();
                    }
                }
            }

            if(b.aabb){
                b.aabbNeedsUpdate = true;
            }

            if(s){
                switch(s.type){
                case PLANE:
                    s.worldNormalNeedsUpdate = true;
                    break;
                case CONVEX:
                    s.worldFaceNormalsNeedsUpdate = true;
                    s.worldVerticesNeedsUpdate = true;
                    break;
                }
            }

            // Update world inertia
            if(b.updateInertiaWorld){
                b.updateInertiaWorld();
            }
        }
        b.force.set(0,0,0);
        if(b.torque){
            b.torque.set(0,0,0);
        }

    }

    this.broadphase.dirty = true;

    if(doProfiling){
        profile.integrate = performance.now() - profilingStart;
    }

    // Update world time
    this.time += dt;
    this.stepnumber += 1;

    this.dispatchEvent(World_step_postStepEvent);

    // Invoke post-step callbacks
    for(i=0; i!==N; i++){
        var bi = bodies[i];
        var postStep = bi.postStep;
        if(postStep){
            postStep.call(bi);
        }
    }

    // Sleeping update
    if(this.allowSleep){
        for(i=0; i!==N; i++){
            bodies[i].sleepTick(this.time);
        }
    }
};

},{"../collision/AABB":3,"../collision/ArrayCollisionMatrix":4,"../collision/NaiveBroadphase":7,"../collision/Ray":9,"../collision/RaycastResult":10,"../equations/ContactEquation":16,"../equations/FrictionEquation":18,"../material/ContactMaterial":21,"../material/Material":22,"../math/Quaternion":25,"../math/Vec3":27,"../objects/Body":28,"../shapes/Shape":40,"../solver/GSSolver":42,"../utils/EventTarget":45,"../utils/TupleDictionary":47,"../utils/Vec3Pool":49,"./Narrowphase":50}]},{},[2])
(2)
});
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],13:[function(require,module,exports){
// stats.js - http://github.com/mrdoob/stats.js
var Stats=function(){var l=Date.now(),m=l,g=0,n=Infinity,o=0,h=0,p=Infinity,q=0,r=0,s=0,f=document.createElement("div");f.id="stats";f.addEventListener("mousedown",function(b){b.preventDefault();t(++s%2)},!1);f.style.cssText="width:80px;opacity:0.9;cursor:pointer";var a=document.createElement("div");a.id="fps";a.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#002";f.appendChild(a);var i=document.createElement("div");i.id="fpsText";i.style.cssText="color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
i.innerHTML="FPS";a.appendChild(i);var c=document.createElement("div");c.id="fpsGraph";c.style.cssText="position:relative;width:74px;height:30px;background-color:#0ff";for(a.appendChild(c);74>c.children.length;){var j=document.createElement("span");j.style.cssText="width:1px;height:30px;float:left;background-color:#113";c.appendChild(j)}var d=document.createElement("div");d.id="ms";d.style.cssText="padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";f.appendChild(d);var k=document.createElement("div");
k.id="msText";k.style.cssText="color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";k.innerHTML="MS";d.appendChild(k);var e=document.createElement("div");e.id="msGraph";e.style.cssText="position:relative;width:74px;height:30px;background-color:#0f0";for(d.appendChild(e);74>e.children.length;)j=document.createElement("span"),j.style.cssText="width:1px;height:30px;float:left;background-color:#131",e.appendChild(j);var t=function(b){s=b;switch(s){case 0:a.style.display=
"block";d.style.display="none";break;case 1:a.style.display="none",d.style.display="block"}};return{REVISION:12,domElement:f,setMode:t,begin:function(){l=Date.now()},end:function(){var b=Date.now();g=b-l;n=Math.min(n,g);o=Math.max(o,g);k.textContent=g+" MS ("+n+"-"+o+")";var a=Math.min(30,30-30*(g/200));e.appendChild(e.firstChild).style.height=a+"px";r++;b>m+1E3&&(h=Math.round(1E3*r/(b-m)),p=Math.min(p,h),q=Math.max(q,h),i.textContent=h+" FPS ("+p+"-"+q+")",a=Math.min(30,30-30*(h/100)),c.appendChild(c.firstChild).style.height=
a+"px",m=b,r=0);return b},update:function(){l=this.end()}}};"object"===typeof module&&(module.exports=Stats);

},{}]},{},[6])
//# sourceMappingURL=data:application/json;base64,
